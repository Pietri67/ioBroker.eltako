{
  "version": 3,
  "sources": ["../../../../src/lib/vis/states.ts"],
  "sourcesContent": ["import { getUsedObjectIDs } from './visUtils.js';\nimport type { Client as ObjectsClient } from '@iobroker/db-objects-redis';\n\ninterface CalculatedProject {\n    id: string;\n    val: number;\n}\n\ninterface CalculateProjectsOptions {\n    /** The objects db instance */\n    objects: ObjectsClient;\n    /** Vis instance */\n    instance: number;\n    /** Vis adapter name */\n    visAdapter: 'vis' | 'vis-2';\n}\n\ninterface CalculateProjectOptions extends CalculateProjectsOptions {\n    /** The read project directories */\n    projects: ioBroker.ReadDirResult[];\n}\n\n/**\n * Calculate the number of data points for each project of given instance\n *\n * @param options - database and project information\n */\nasync function calcProject(options: CalculateProjectOptions): Promise<CalculatedProject[]> {\n    const { visAdapter, instance, objects, projects } = options;\n    const result: CalculatedProject[] = [];\n\n    if (!projects?.length) {\n        return result;\n    }\n\n    for (const project of projects) {\n        if (!project?.isDir) {\n            continue;\n        }\n\n        if (!(await objects.fileExists(`${visAdapter}.${instance}`, `/${project.file}/vis-views.json`))) {\n            continue;\n        }\n\n        // calculate data points in one project\n        const data = await objects.readFile(`${visAdapter}.${instance}`, `/${project.file}/vis-views.json`);\n        let json;\n        try {\n            json = JSON.parse(data.file as string);\n        } catch {\n            console.error(`Cannot parse \"/${project.file}/vis-views.json`);\n            continue;\n        }\n\n        const dps = getUsedObjectIDs(json, false);\n        if (dps?.IDs) {\n            result.push({\n                id: `${visAdapter}.${instance}.datapoints.${project.file.replace(/[.\\\\s]/g, '_')}`,\n                val: dps.IDs.length,\n            });\n        }\n    }\n\n    return result;\n}\n\n/**\n * Calculate the number of data points for all vis projects of given instance\n *\n * @param options - db and vis options\n */\nexport async function calcProjects(options: CalculateProjectsOptions): Promise<CalculatedProject[]> {\n    const { visAdapter, instance, objects } = options;\n    const projects = await objects.readDirAsync(`${visAdapter}.${instance}`, '/');\n\n    if (!projects?.length) {\n        return [{ id: `${visAdapter}.${instance}.datapoints.total`, val: 0 }];\n    }\n\n    const result = await calcProject({ objects, projects, instance, visAdapter });\n    if (result?.length) {\n        let total = 0;\n        for (const entry of result) {\n            total += entry.val;\n        }\n        result.push({ id: `${visAdapter}.${instance}.datapoints.total`, val: total });\n    }\n\n    return result;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA,sBAAiC;AA2BjC,eAAe,YAAY,SAAgC;AACvD,QAAM,EAAE,YAAY,UAAU,SAAS,SAAQ,IAAK;AACpD,QAAM,SAA8B,CAAA;AAEpC,MAAI,CAAC,UAAU,QAAQ;AACnB,WAAO;EACX;AAEA,aAAW,WAAW,UAAU;AAC5B,QAAI,CAAC,SAAS,OAAO;AACjB;IACJ;AAEA,QAAI,CAAE,MAAM,QAAQ,WAAW,GAAG,UAAU,IAAI,QAAQ,IAAI,IAAI,QAAQ,IAAI,iBAAiB,GAAI;AAC7F;IACJ;AAGA,UAAM,OAAO,MAAM,QAAQ,SAAS,GAAG,UAAU,IAAI,QAAQ,IAAI,IAAI,QAAQ,IAAI,iBAAiB;AAClG,QAAI;AACJ,QAAI;AACA,aAAO,KAAK,MAAM,KAAK,IAAc;IACzC,QAAQ;AACJ,cAAQ,MAAM,kBAAkB,QAAQ,IAAI,iBAAiB;AAC7D;IACJ;AAEA,UAAM,UAAM,kCAAiB,MAAM,KAAK;AACxC,QAAI,KAAK,KAAK;AACV,aAAO,KAAK;QACR,IAAI,GAAG,UAAU,IAAI,QAAQ,eAAe,QAAQ,KAAK,QAAQ,WAAW,GAAG,CAAC;QAChF,KAAK,IAAI,IAAI;OAChB;IACL;EACJ;AAEA,SAAO;AACX;AAOA,eAAsB,aAAa,SAAiC;AAChE,QAAM,EAAE,YAAY,UAAU,QAAO,IAAK;AAC1C,QAAM,WAAW,MAAM,QAAQ,aAAa,GAAG,UAAU,IAAI,QAAQ,IAAI,GAAG;AAE5E,MAAI,CAAC,UAAU,QAAQ;AACnB,WAAO,CAAC,EAAE,IAAI,GAAG,UAAU,IAAI,QAAQ,qBAAqB,KAAK,EAAC,CAAE;EACxE;AAEA,QAAM,SAAS,MAAM,YAAY,EAAE,SAAS,UAAU,UAAU,WAAU,CAAE;AAC5E,MAAI,QAAQ,QAAQ;AAChB,QAAI,QAAQ;AACZ,eAAW,SAAS,QAAQ;AACxB,eAAS,MAAM;IACnB;AACA,WAAO,KAAK,EAAE,IAAI,GAAG,UAAU,IAAI,QAAQ,qBAAqB,KAAK,MAAK,CAAE;EAChF;AAEA,SAAO;AACX;",
  "names": []
}
