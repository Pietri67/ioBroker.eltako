{
  "version": 3,
  "sources": ["../../../src/lib/blocklistManager.ts"],
  "sourcesContent": ["import type { Client as ObjectsClient } from '@iobroker/db-objects-redis';\nimport {\n    HIGHEST_UNICODE_SYMBOL,\n    SYSTEM_ADAPTER_PREFIX,\n    SYSTEM_CONFIG_ID,\n    SYSTEM_REPOSITORIES_ID,\n} from '@iobroker/js-controller-common-db/constants';\nimport semver from 'semver';\n\ninterface BlocklistManagerOptions {\n    /** The objects client */\n    objects: ObjectsClient;\n}\n\ninterface AdapterVersionBlockedOptions {\n    /** The version of the adapter instance */\n    version: string;\n    /** Name of the adapter */\n    adapterName: string;\n}\n\ninterface InternalAdapterVersionBlockedOptions extends AdapterVersionBlockedOptions {\n    /** The system repository object */\n    systemRepoObj: ioBroker.RepositoryObject;\n    /** The system config object */\n    systemConfigObj: ioBroker.SystemConfigObject;\n}\n\nexport class BlocklistManager {\n    /** The objects client */\n    private readonly objects: ObjectsClient;\n\n    constructor(options: BlocklistManagerOptions) {\n        this.objects = options.objects;\n    }\n\n    /**\n     * Iterates over all instances, disables blocklisted once if enabled\n     *\n     * @returns A list of disabled instances\n     */\n    async disableAllBlocklistedInstances(): Promise<ioBroker.InstanceObject[]> {\n        /** List of instances which we have disabled */\n        const disabledList: ioBroker.InstanceObject[] = [];\n\n        const systemRepoObj = await this.objects.getObject(SYSTEM_REPOSITORIES_ID);\n        const systemConfigObj = await this.objects.getObject(SYSTEM_CONFIG_ID);\n\n        if (!systemConfigObj || !systemRepoObj) {\n            return disabledList;\n        }\n\n        const instancesView = await this.objects.getObjectViewAsync('system', 'instance', {\n            startkey: SYSTEM_ADAPTER_PREFIX,\n            endkey: SYSTEM_ADAPTER_PREFIX + HIGHEST_UNICODE_SYMBOL,\n        });\n\n        for (const row of instancesView.rows) {\n            const obj = row.value;\n\n            if (!obj.common.enabled) {\n                continue;\n            }\n\n            const isBlocked = this.internalIsAdapterVersionBlocked({\n                systemConfigObj,\n                systemRepoObj,\n                adapterName: obj.common.name,\n                version: obj.common.version,\n            });\n\n            if (!isBlocked) {\n                continue;\n            }\n\n            obj.common.enabled = false;\n\n            await this.objects.setObject(obj._id, obj);\n            disabledList.push(row.value);\n        }\n\n        return disabledList;\n    }\n\n    /**\n     * Check if version of a specific adapter is blocked\n     *\n     * @param options adapter version and name information\n     * @returns A boolean indicating if the adapter version is blocked\n     */\n    async isAdapterVersionBlocked(options: AdapterVersionBlockedOptions): Promise<boolean> {\n        const systemRepoObj = await this.objects.getObject(SYSTEM_REPOSITORIES_ID);\n        const systemConfigObj = await this.objects.getObject(SYSTEM_CONFIG_ID);\n\n        if (!systemConfigObj || !systemRepoObj) {\n            return false;\n        }\n\n        return this.internalIsAdapterVersionBlocked({ ...options, systemRepoObj, systemConfigObj });\n    }\n\n    /**\n     * Check if version of a specific adapter is blocked\n     *\n     * @param options information about adapter, version and cached objects\n     * @returns A boolean indicating if the adapter version is blocked\n     */\n    private internalIsAdapterVersionBlocked(options: InternalAdapterVersionBlockedOptions): boolean {\n        const { adapterName, version, systemRepoObj, systemConfigObj } = options;\n\n        for (const activeRepoName of systemConfigObj.common.activeRepo) {\n            if (!(activeRepoName in systemRepoObj.native.repositories)) {\n                return false;\n            }\n\n            const repo = systemRepoObj.native.repositories[activeRepoName];\n            const adapterEntry = repo.json?.[adapterName];\n\n            if (!adapterEntry || !('blockedVersions' in adapterEntry)) {\n                return false;\n            }\n\n            for (const blockedVersion of adapterEntry.blockedVersions) {\n                if (semver.satisfies(version, blockedVersion, { includePrerelease: true })) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AAAA,uBAKO;AACP,oBAAmB;AAqBb,MAAO,iBAAgB;;EAER;EAEjB,YAAY,SAAgC;AACxC,SAAK,UAAU,QAAQ;EAC3B;;;;;;EAOA,MAAM,iCAA8B;AAEhC,UAAM,eAA0C,CAAA;AAEhD,UAAM,gBAAgB,MAAM,KAAK,QAAQ,UAAU,uCAAsB;AACzE,UAAM,kBAAkB,MAAM,KAAK,QAAQ,UAAU,iCAAgB;AAErE,QAAI,CAAC,mBAAmB,CAAC,eAAe;AACpC,aAAO;IACX;AAEA,UAAM,gBAAgB,MAAM,KAAK,QAAQ,mBAAmB,UAAU,YAAY;MAC9E,UAAU;MACV,QAAQ,yCAAwB;KACnC;AAED,eAAW,OAAO,cAAc,MAAM;AAClC,YAAM,MAAM,IAAI;AAEhB,UAAI,CAAC,IAAI,OAAO,SAAS;AACrB;MACJ;AAEA,YAAM,YAAY,KAAK,gCAAgC;QACnD;QACA;QACA,aAAa,IAAI,OAAO;QACxB,SAAS,IAAI,OAAO;OACvB;AAED,UAAI,CAAC,WAAW;AACZ;MACJ;AAEA,UAAI,OAAO,UAAU;AAErB,YAAM,KAAK,QAAQ,UAAU,IAAI,KAAK,GAAG;AACzC,mBAAa,KAAK,IAAI,KAAK;IAC/B;AAEA,WAAO;EACX;;;;;;;EAQA,MAAM,wBAAwB,SAAqC;AAC/D,UAAM,gBAAgB,MAAM,KAAK,QAAQ,UAAU,uCAAsB;AACzE,UAAM,kBAAkB,MAAM,KAAK,QAAQ,UAAU,iCAAgB;AAErE,QAAI,CAAC,mBAAmB,CAAC,eAAe;AACpC,aAAO;IACX;AAEA,WAAO,KAAK,gCAAgC,EAAE,GAAG,SAAS,eAAe,gBAAe,CAAE;EAC9F;;;;;;;EAQQ,gCAAgC,SAA6C;AACjF,UAAM,EAAE,aAAa,SAAS,eAAe,gBAAe,IAAK;AAEjE,eAAW,kBAAkB,gBAAgB,OAAO,YAAY;AAC5D,UAAI,EAAE,kBAAkB,cAAc,OAAO,eAAe;AACxD,eAAO;MACX;AAEA,YAAM,OAAO,cAAc,OAAO,aAAa,cAAc;AAC7D,YAAM,eAAe,KAAK,OAAO,WAAW;AAE5C,UAAI,CAAC,gBAAgB,EAAE,qBAAqB,eAAe;AACvD,eAAO;MACX;AAEA,iBAAW,kBAAkB,aAAa,iBAAiB;AACvD,YAAI,cAAAA,QAAO,UAAU,SAAS,gBAAgB,EAAE,mBAAmB,KAAI,CAAE,GAAG;AACxE,iBAAO;QACX;MACJ;IACJ;AAEA,WAAO;EACX;;",
  "names": ["semver"]
}
