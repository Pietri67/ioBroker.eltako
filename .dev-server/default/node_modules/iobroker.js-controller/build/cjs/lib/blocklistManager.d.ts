import type { Client as ObjectsClient } from '@iobroker/db-objects-redis';
interface BlocklistManagerOptions {
    /** The objects client */
    objects: ObjectsClient;
}
interface AdapterVersionBlockedOptions {
    /** The version of the adapter instance */
    version: string;
    /** Name of the adapter */
    adapterName: string;
}
export declare class BlocklistManager {
    /** The objects client */
    private readonly objects;
    constructor(options: BlocklistManagerOptions);
    /**
     * Iterates over all instances, disables blocklisted once if enabled
     *
     * @returns A list of disabled instances
     */
    disableAllBlocklistedInstances(): Promise<ioBroker.InstanceObject[]>;
    /**
     * Check if version of a specific adapter is blocked
     *
     * @param options adapter version and name information
     * @returns A boolean indicating if the adapter version is blocked
     */
    isAdapterVersionBlocked(options: AdapterVersionBlockedOptions): Promise<boolean>;
    /**
     * Check if version of a specific adapter is blocked
     *
     * @param options information about adapter, version and cached objects
     * @returns A boolean indicating if the adapter version is blocked
     */
    private internalIsAdapterVersionBlocked;
}
export {};
//# sourceMappingURL=blocklistManager.d.ts.map