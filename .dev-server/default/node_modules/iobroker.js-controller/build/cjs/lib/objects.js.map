{
  "version": 3,
  "sources": ["../../../src/lib/objects.ts"],
  "sourcesContent": ["import fs from 'fs-extra';\nimport { DEFAULT_DISK_WARNING_LEVEL } from '@/lib/utils.js';\nimport { tools } from '@iobroker/js-controller-common-db';\n\ninterface GetHostOptions {\n    /** The host base id */\n    id: string;\n    /** The host name */\n    hostname: string;\n    /** If these are the objects for a compact group controller */\n    isCompactGroupController: boolean;\n    /** The ioBroker config */\n    config: ioBroker.IoBrokerJson;\n}\n\nexport type TaskObject = ioBroker.SettableObject & {\n    state?: ioBroker.SettableState;\n};\n\n/**\n * Get all ioBroker objects which should be created in the `system.host.<hostname>` scope\n *\n * @param options information about hostname, compact controller, the base ID and the config\n */\nexport function getHostObjects(options: GetHostOptions): TaskObject[] {\n    const { id, hostname, isCompactGroupController, config } = options;\n\n    const objs: TaskObject[] = [];\n\n    if (!isCompactGroupController) {\n        objs.push({\n            _id: `${id}.compactModeEnabled`,\n            type: 'state',\n            common: {\n                name: 'Controller - compact mode enabled',\n                type: 'boolean',\n                read: true,\n                write: false,\n                role: 'indicator',\n            },\n            native: {},\n        });\n\n        objs.push({\n            _id: `${id}.compactgroupProcesses`,\n            type: 'state',\n            common: {\n                name: 'Controller - number of compact group controllers',\n                type: 'number',\n                read: true,\n                write: false,\n                min: 0,\n                role: 'value',\n                unit: 'processes',\n            },\n            native: {},\n        });\n\n        objs.push({\n            _id: `${id}.nodeVersion`,\n            type: 'state',\n            common: {\n                name: 'Controller - Node.js version',\n                type: 'string',\n                read: true,\n                write: false,\n                desc: 'Node.js version of the host process.',\n                role: 'state',\n            },\n            native: {},\n        });\n\n        objs.push({\n            _id: `${id}.osPackageUpdates`,\n            type: 'state',\n            common: {\n                name: 'Available OS package updates',\n                type: 'array',\n                read: true,\n                write: false,\n                desc: 'The output of the \"update\" command from the package manager like apt or yum',\n                role: 'state',\n            },\n            native: {},\n        });\n    }\n\n    objs.push({\n        _id: `${id}.instancesAsProcess`,\n        type: 'state',\n        common: {\n            name: 'Controller - number of instance processes',\n            type: 'number',\n            read: true,\n            write: false,\n            min: 0,\n            role: 'value',\n            unit: 'processes',\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.instancesAsCompact`,\n        type: 'state',\n        common: {\n            name: 'Controller - number of instances started in this host process',\n            type: 'number',\n            read: true,\n            write: false,\n            min: 0,\n            role: 'value',\n            unit: 'instances',\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.cpu`,\n        type: 'state',\n        common: {\n            name: 'Controller - cpu usage in % of one core',\n            type: 'number',\n            read: true,\n            write: false,\n            min: 0,\n            role: 'value',\n            unit: '% of one core',\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.cputime`,\n        type: 'state',\n        common: {\n            name: 'Controller - accumulated cputime in seconds',\n            type: 'number',\n            read: true,\n            write: false,\n            min: 0,\n            role: 'value',\n            unit: 'seconds',\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.mem`,\n        type: 'state',\n        common: {\n            type: 'number',\n            role: 'value',\n            name: `${hostname} - memory usage in %`,\n            unit: '%',\n            read: true,\n            write: false,\n            min: 0,\n            max: 100,\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.memHeapUsed`,\n        type: 'state',\n        common: {\n            type: 'number',\n            role: 'value',\n            name: 'Controller - heap memory used in MB',\n            read: true,\n            write: false,\n            min: 0,\n            unit: 'MB',\n        },\n        native: {},\n    });\n\n    if (fs.existsSync('/proc/meminfo')) {\n        objs.push({\n            _id: `${id}.memAvailable`,\n            type: 'state',\n            common: {\n                type: 'number',\n                role: 'value',\n                name: `${hostname} - available memory from /proc/meminfo in MB`,\n                read: true,\n                write: false,\n                min: 0,\n                unit: 'MB',\n            },\n            native: {},\n        });\n    }\n\n    objs.push({\n        _id: `${id}.memHeapTotal`,\n        type: 'state',\n        common: {\n            type: 'number',\n            role: 'value',\n            name: 'Controller - heap memory reserved in MB',\n            read: true,\n            write: false,\n            min: 0,\n            unit: 'MB',\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.memRss`,\n        type: 'state',\n        common: {\n            type: 'number',\n            role: 'value',\n            name: 'Controller - resident set size memory in MB',\n            desc: \"RSS is the resident set size, the portion of the process's memory held in RAM\",\n            read: true,\n            write: false,\n            min: 0,\n            unit: 'MB',\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.uptime`,\n        type: 'state',\n        common: {\n            type: 'number',\n            role: 'value',\n            name: 'Controller - uptime in seconds',\n            read: true,\n            write: false,\n            min: 0,\n            unit: 'seconds',\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.load`,\n        type: 'state',\n        common: {\n            unit: '',\n            type: 'number',\n            role: 'value',\n            read: true,\n            write: false,\n            name: `${hostname} - load average 1min`,\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.alive`,\n        type: 'state',\n        common: {\n            name: `${hostname} - alive status`,\n            read: true,\n            write: false,\n            type: 'boolean',\n            role: 'indicator',\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.freemem`,\n        type: 'state',\n        common: {\n            name: `${hostname} - available RAM in MB`,\n            unit: 'MB',\n            read: true,\n            write: false,\n            type: 'number',\n            role: 'value',\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.inputCount`,\n        type: 'state',\n        common: {\n            name: 'Controller - input level in events/15 seconds',\n            desc: \"State's inputs in 15 seconds\",\n            type: 'number',\n            read: true,\n            write: false,\n            role: 'value',\n            unit: 'events/15 seconds',\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.outputCount`,\n        type: 'state',\n        common: {\n            name: 'Controller - output level in events/15 seconds',\n            desc: \"State's outputs in 15 seconds\",\n            type: 'number',\n            read: true,\n            write: false,\n            role: 'value',\n            unit: 'events/15 seconds',\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.eventLoopLag`,\n        type: 'state',\n        common: {\n            name: 'Controller - The Node.js event loop lag in ms, averaged over 15 seconds',\n            desc: 'Average Node.js event loop lag in ms',\n            type: 'number',\n            read: true,\n            write: false,\n            role: 'value',\n            unit: 'ms',\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.logLevel`,\n        type: 'state',\n        common: {\n            name: 'Controller - Loglevel',\n            type: 'string',\n            read: true,\n            write: true,\n            desc: 'Loglevel of the host process. Will be set on start with defined value but can be overridden during runtime',\n            role: 'state',\n        },\n        native: {},\n    });\n\n    objs.push({\n        _id: `${id}.pid`,\n        type: 'state',\n        common: {\n            name: 'Controller - Process ID',\n            type: 'number',\n            read: true,\n            write: false,\n            role: 'value',\n        },\n        native: {},\n        state: {\n            val: process.pid,\n            ack: true,\n        },\n    });\n\n    if (config.system.checkDiskInterval) {\n        objs.push({\n            _id: `${id}.diskSize`,\n            type: 'state',\n            common: {\n                name: `${hostname} - disk total size`,\n                desc: 'Disk size of logical volume where the server is installed in MiB',\n                type: 'number',\n                read: true,\n                write: false,\n                role: 'value',\n                unit: 'MiB',\n            },\n            native: {},\n        });\n\n        objs.push({\n            _id: `${id}.diskFree`,\n            type: 'state',\n            common: {\n                name: `${hostname} - disk free size`,\n                desc: 'Free disk size of the logical volume where the server is installed in MiB',\n                type: 'number',\n                read: true,\n                write: false,\n                role: 'value',\n                unit: 'MiB',\n            },\n            native: {},\n        });\n\n        objs.push({\n            _id: `${id}.diskWarning`,\n            type: 'state',\n            common: {\n                name: `${hostname} - disk warning level`,\n                desc: 'Generate a warning if the free disk space is below this value',\n                type: 'number',\n                read: true,\n                write: true,\n                def: DEFAULT_DISK_WARNING_LEVEL,\n                role: 'level',\n                unit: '%',\n            },\n            native: {},\n        });\n    }\n\n    if (tools.getDockerInformation().isOfficial) {\n        objs.push({\n            _id: `${id}.availableDockerBuild`,\n            type: 'state',\n            common: {\n                name: 'Last update of the Docker Image',\n                desc: 'The timestamp of the last update of the Docker Image',\n                type: 'string',\n                read: true,\n                write: false,\n                role: 'date',\n            },\n            native: {},\n        });\n    }\n\n    return objs;\n}\n"],
  "mappings": "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",
  "names": ["fs"]
}
