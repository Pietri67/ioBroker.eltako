{
  "version": 3,
  "sources": ["../../../src/lib/multihostServer.js"],
  "sourcesContent": ["/**\n *      Multihost server\n *\n *      Master multihost functionality\n *\n *      Copyright 2014-2024 bluefox <dogafox@gmail.com>,\n *      MIT License\n *\n */\n\nimport dgram from 'node:dgram';\nimport { tools as dbTools } from '@iobroker/js-controller-common-db';\nconst PORT = 50005;\nconst MULTICAST_ADDR = '239.255.255.250';\n\n/**\n * The Multihost Server allows connection from other ioBroker hosts\n *\n * @param hostname\n * @param logger\n * @param config\n * @param info\n * @param ips\n * @param secret\n */\nexport function MHServer(hostname, logger, config, info, ips, secret) {\n    const count = 0;\n    const buffer = {};\n    const lastFrame = {};\n    const authList = {};\n\n    let server = null;\n    let initTimer = null;\n    let stopped = false;\n    let crypto;\n\n    config = Object.assign({}, config); // make a copy\n\n    if (config.objects) {\n        config.objects = {\n            type: config.objects.type,\n            host: config.objects.host,\n            port: config.objects.port,\n            user: config.objects.user,\n            pass: config.objects.pass,\n            options: config.objects.options,\n            maxQueue: config.objects.maxQueue,\n        };\n    }\n\n    if (config.states) {\n        config.states = {\n            type: config.states.type,\n            host: config.states.host,\n            port: config.states.port,\n            user: config.states.user,\n            pass: config.states.pass,\n            options: config.states.options,\n            maxQueue: config.states.maxQueue,\n        };\n    }\n\n    function send(msg, rinfo) {\n        if (server) {\n            setImmediate(() => {\n                const text = JSON.stringify(msg);\n                try {\n                    server.send(text, 0, text.length, rinfo.port, rinfo.address);\n                } catch (e) {\n                    logger.warn(\n                        `host.${hostname} Multi-host discovery server: cannot send answer to ${rinfo.address}:${rinfo.port}: ${e}`,\n                    );\n                }\n            });\n        }\n    }\n\n    // delete all old connections\n    function checkAuthList(ts) {\n        ts = ts || new Date().getTime();\n        for (const id of Object.keys(authList)) {\n            if (!authList[id]) {\n                delete authList[id];\n            } else if (ts - authList[id].ts > 31000) {\n                delete authList[id];\n            }\n        }\n    }\n\n    async function sha(secret, salt, callback) {\n        // calculate sha256\n        crypto = crypto || (await import('node:crypto'));\n        const hash = crypto.createHash('sha256');\n\n        hash.on('readable', () => {\n            const data = hash.read();\n            if (data) {\n                callback(data.toString('hex'));\n            }\n        });\n\n        hash.write(secret + salt);\n        hash.end();\n    }\n\n    // hello => auth => browse\n    function process(msg, rinfo) {\n        if (!msg) {\n            return;\n        }\n\n        const ts = new Date().getTime();\n        checkAuthList(ts);\n\n        const id = `${rinfo.address}:${rinfo.port}`;\n\n        switch (msg.cmd) {\n            case 'browse':\n                if (secret && msg.password && authList[id]) {\n                    return sha(secret, authList[id].salt, shaText => {\n                        if (shaText !== msg.password) {\n                            send(\n                                {\n                                    auth: config.multihostService.secure,\n                                    cmd: msg.cmd,\n                                    id: msg.id,\n                                    result: 'invalid password',\n                                },\n                                rinfo,\n                            );\n                        } else {\n                            authList[id].auth = true;\n                            send(\n                                {\n                                    auth: config.multihostService.secure,\n                                    cmd: msg.cmd,\n                                    id: msg.id,\n                                    objects: config.objects,\n                                    states: config.states,\n                                    info: info,\n                                    hostname: hostname,\n                                    slave: !dbTools.isLocalObjectsDbServer(config.objects.type, config.objects.host),\n                                    result: 'ok',\n                                },\n                                rinfo,\n                            );\n                        }\n                    });\n                }\n\n                if (!config.multihostService.secure || (authList[id] && authList[id].auth)) {\n                    send(\n                        {\n                            auth: config.multihostService.secure,\n                            cmd: msg.cmd,\n                            id: msg.id,\n                            objects: config.objects,\n                            states: config.states,\n                            info: info,\n                            hostname: hostname,\n                            slave: !dbTools.isLocalObjectsDbServer(config.objects.type, config.objects.host),\n                            result: 'ok',\n                        },\n                        rinfo,\n                    );\n                } else {\n                    authList[id] = {\n                        time: ts,\n                        salt: (Math.random() * 1000000 + ts).toString().substring(0, 16),\n                        auth: false,\n                    };\n                    // padding\n                    if (authList[id].salt.length < 16) {\n                        authList[id].salt += new Array(16 - authList[id].salt.length).join('_');\n                    }\n                    send(\n                        {\n                            auth: config.multihostService.secure,\n                            cmd: msg.cmd,\n                            id: msg.id,\n                            result: 'not authenticated',\n                            salt: authList[id].salt,\n                        },\n                        rinfo,\n                    );\n                }\n                break;\n\n            default:\n                send(\n                    {\n                        cmd: msg.cmd,\n                        id: msg.id,\n                        result: 'unknown command',\n                    },\n                    rinfo,\n                );\n                break;\n        }\n    }\n\n    this.init = function () {\n        stopped = false;\n        if (initTimer) {\n            clearTimeout(initTimer);\n            initTimer = null;\n        }\n\n        if (count > 10) {\n            return logger.warn(\n                `host.${hostname} Multi-host discovery server: Port ${PORT} is occupied. Service stopped.`,\n            );\n        }\n\n        server = dgram.createSocket({ type: 'udp4', reuseAddr: true });\n\n        server.on('error', err => {\n            logger.error(`host.${hostname} Multi-host discovery server: error: ${err.stack}`);\n            server.close();\n            server = null;\n\n            initTimer =\n                initTimer ||\n                setTimeout(() => {\n                    initTimer = null;\n                    this.init();\n                }, 5000);\n        });\n\n        server.on('close', () => {\n            server = null;\n\n            if (!initTimer && !stopped) {\n                initTimer = setTimeout(() => {\n                    initTimer = null;\n                    this.init();\n                }, 5000);\n            }\n        });\n\n        server.on('message', (msg, rinfo) => {\n            // following messages are allowed\n            const text = msg.toString();\n            const now = new Date().getTime();\n            const id = `${rinfo.address}:${rinfo.port}`;\n\n            for (const ids in buffer) {\n                if (!lastFrame[ids]) {\n                    delete buffer[ids];\n                } else if (now - lastFrame[ids] > 1000) {\n                    delete buffer[ids];\n                    delete lastFrame[ids];\n                }\n            }\n\n            if (lastFrame[id] && now - lastFrame[id] > 1000) {\n                buffer[id] = '';\n            }\n\n            lastFrame[id] = now;\n\n            if (!buffer[id] && text[0] !== '{') {\n                // ignore message\n                logger.debug(\n                    `host.${hostname} Multi-host discovery server: Message from ${rinfo.address} ignored: ${text}`,\n                );\n            } else {\n                buffer[id] = (buffer[id] || '') + msg.toString();\n                if (buffer[id] && buffer[id][buffer[id].length - 1] === '}') {\n                    try {\n                        const data = JSON.parse(buffer[id]);\n                        buffer[id] = '';\n                        if (data) {\n                            process(data, rinfo);\n                        }\n                    } catch {\n                        // may be not yet complete.\n                    }\n                }\n            }\n        });\n\n        server.on('listening', () => {\n            try {\n                server.addMembership(MULTICAST_ADDR);\n            } catch {\n                logger.warn(`host.${hostname} Multi-host discovery server: Multicast membership could not be added.`);\n            }\n            const address = server.address();\n            logger.info(\n                `host.${hostname} Multi-host discovery server: service started on ${address.address}:${address.port}`,\n            );\n        });\n\n        server.bind(PORT);\n    };\n\n    this.close = function (callback) {\n        stopped = true;\n        if (initTimer) {\n            clearTimeout(initTimer);\n            initTimer = null;\n        }\n        if (server) {\n            try {\n                server.close(callback);\n                server = null;\n            } catch {\n                server = null;\n                if (callback) {\n                    callback();\n                }\n            }\n        } else if (callback) {\n            callback();\n        }\n    };\n\n    this.init();\n\n    return this;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAUA,wBAAkB;AAClB,qCAAiC;AACjC,MAAM,OAAO;AACb,MAAM,iBAAiB;AAYjB,SAAU,SAAS,UAAU,QAAQ,QAAQ,MAAM,KAAK,QAAM;AAChE,QAAM,QAAQ;AACd,QAAM,SAAS,CAAA;AACf,QAAM,YAAY,CAAA;AAClB,QAAM,WAAW,CAAA;AAEjB,MAAI,SAAS;AACb,MAAI,YAAY;AAChB,MAAI,UAAU;AACd,MAAI;AAEJ,WAAS,OAAO,OAAO,CAAA,GAAI,MAAM;AAEjC,MAAI,OAAO,SAAS;AAChB,WAAO,UAAU;MACb,MAAM,OAAO,QAAQ;MACrB,MAAM,OAAO,QAAQ;MACrB,MAAM,OAAO,QAAQ;MACrB,MAAM,OAAO,QAAQ;MACrB,MAAM,OAAO,QAAQ;MACrB,SAAS,OAAO,QAAQ;MACxB,UAAU,OAAO,QAAQ;;EAEjC;AAEA,MAAI,OAAO,QAAQ;AACf,WAAO,SAAS;MACZ,MAAM,OAAO,OAAO;MACpB,MAAM,OAAO,OAAO;MACpB,MAAM,OAAO,OAAO;MACpB,MAAM,OAAO,OAAO;MACpB,MAAM,OAAO,OAAO;MACpB,SAAS,OAAO,OAAO;MACvB,UAAU,OAAO,OAAO;;EAEhC;AAEA,WAAS,KAAK,KAAK,OAAK;AACpB,QAAI,QAAQ;AACR,mBAAa,MAAK;AACd,cAAM,OAAO,KAAK,UAAU,GAAG;AAC/B,YAAI;AACA,iBAAO,KAAK,MAAM,GAAG,KAAK,QAAQ,MAAM,MAAM,MAAM,OAAO;QAC/D,SAAS,GAAG;AACR,iBAAO,KACH,QAAQ,QAAQ,uDAAuD,MAAM,OAAO,IAAI,MAAM,IAAI,KAAK,CAAC,EAAE;QAElH;MACJ,CAAC;IACL;EACJ;AAGA,WAAS,cAAc,IAAE;AACrB,SAAK,OAAM,oBAAI,KAAI,GAAG,QAAO;AAC7B,eAAW,MAAM,OAAO,KAAK,QAAQ,GAAG;AACpC,UAAI,CAAC,SAAS,EAAE,GAAG;AACf,eAAO,SAAS,EAAE;MACtB,WAAW,KAAK,SAAS,EAAE,EAAE,KAAK,MAAO;AACrC,eAAO,SAAS,EAAE;MACtB;IACJ;EACJ;AAEA,iBAAe,IAAIA,SAAQ,MAAM,UAAQ;AAErC,aAAS,UAAW,MAAM,OAAO,aAAa;AAC9C,UAAM,OAAO,OAAO,WAAW,QAAQ;AAEvC,SAAK,GAAG,YAAY,MAAK;AACrB,YAAM,OAAO,KAAK,KAAI;AACtB,UAAI,MAAM;AACN,iBAAS,KAAK,SAAS,KAAK,CAAC;MACjC;IACJ,CAAC;AAED,SAAK,MAAMA,UAAS,IAAI;AACxB,SAAK,IAAG;EACZ;AAGA,WAAS,QAAQ,KAAK,OAAK;AACvB,QAAI,CAAC,KAAK;AACN;IACJ;AAEA,UAAM,MAAK,oBAAI,KAAI,GAAG,QAAO;AAC7B,kBAAc,EAAE;AAEhB,UAAM,KAAK,GAAG,MAAM,OAAO,IAAI,MAAM,IAAI;AAEzC,YAAQ,IAAI,KAAK;MACb,KAAK;AACD,YAAI,UAAU,IAAI,YAAY,SAAS,EAAE,GAAG;AACxC,iBAAO,IAAI,QAAQ,SAAS,EAAE,EAAE,MAAM,aAAU;AAC5C,gBAAI,YAAY,IAAI,UAAU;AAC1B,mBACI;gBACI,MAAM,OAAO,iBAAiB;gBAC9B,KAAK,IAAI;gBACT,IAAI,IAAI;gBACR,QAAQ;iBAEZ,KAAK;YAEb,OAAO;AACH,uBAAS,EAAE,EAAE,OAAO;AACpB,mBACI;gBACI,MAAM,OAAO,iBAAiB;gBAC9B,KAAK,IAAI;gBACT,IAAI,IAAI;gBACR,SAAS,OAAO;gBAChB,QAAQ,OAAO;gBACf;gBACA;gBACA,OAAO,CAAC,+BAAAC,MAAQ,uBAAuB,OAAO,QAAQ,MAAM,OAAO,QAAQ,IAAI;gBAC/E,QAAQ;iBAEZ,KAAK;YAEb;UACJ,CAAC;QACL;AAEA,YAAI,CAAC,OAAO,iBAAiB,UAAW,SAAS,EAAE,KAAK,SAAS,EAAE,EAAE,MAAO;AACxE,eACI;YACI,MAAM,OAAO,iBAAiB;YAC9B,KAAK,IAAI;YACT,IAAI,IAAI;YACR,SAAS,OAAO;YAChB,QAAQ,OAAO;YACf;YACA;YACA,OAAO,CAAC,+BAAAA,MAAQ,uBAAuB,OAAO,QAAQ,MAAM,OAAO,QAAQ,IAAI;YAC/E,QAAQ;aAEZ,KAAK;QAEb,OAAO;AACH,mBAAS,EAAE,IAAI;YACX,MAAM;YACN,OAAO,KAAK,OAAM,IAAK,MAAU,IAAI,SAAQ,EAAG,UAAU,GAAG,EAAE;YAC/D,MAAM;;AAGV,cAAI,SAAS,EAAE,EAAE,KAAK,SAAS,IAAI;AAC/B,qBAAS,EAAE,EAAE,QAAQ,IAAI,MAAM,KAAK,SAAS,EAAE,EAAE,KAAK,MAAM,EAAE,KAAK,GAAG;UAC1E;AACA,eACI;YACI,MAAM,OAAO,iBAAiB;YAC9B,KAAK,IAAI;YACT,IAAI,IAAI;YACR,QAAQ;YACR,MAAM,SAAS,EAAE,EAAE;aAEvB,KAAK;QAEb;AACA;MAEJ;AACI,aACI;UACI,KAAK,IAAI;UACT,IAAI,IAAI;UACR,QAAQ;WAEZ,KAAK;AAET;IACR;EACJ;AAEA,OAAK,OAAO,WAAA;AACR,cAAU;AACV,QAAI,WAAW;AACX,mBAAa,SAAS;AACtB,kBAAY;IAChB;AAEA,QAAI,QAAQ,IAAI;AACZ,aAAO,OAAO,KACV,QAAQ,QAAQ,sCAAsC,IAAI,gCAAgC;IAElG;AAEA,aAAS,kBAAAC,QAAM,aAAa,EAAE,MAAM,QAAQ,WAAW,KAAI,CAAE;AAE7D,WAAO,GAAG,SAAS,SAAM;AACrB,aAAO,MAAM,QAAQ,QAAQ,wCAAwC,IAAI,KAAK,EAAE;AAChF,aAAO,MAAK;AACZ,eAAS;AAET,kBACI,aACA,WAAW,MAAK;AACZ,oBAAY;AACZ,aAAK,KAAI;MACb,GAAG,GAAI;IACf,CAAC;AAED,WAAO,GAAG,SAAS,MAAK;AACpB,eAAS;AAET,UAAI,CAAC,aAAa,CAAC,SAAS;AACxB,oBAAY,WAAW,MAAK;AACxB,sBAAY;AACZ,eAAK,KAAI;QACb,GAAG,GAAI;MACX;IACJ,CAAC;AAED,WAAO,GAAG,WAAW,CAAC,KAAK,UAAS;AAEhC,YAAM,OAAO,IAAI,SAAQ;AACzB,YAAM,OAAM,oBAAI,KAAI,GAAG,QAAO;AAC9B,YAAM,KAAK,GAAG,MAAM,OAAO,IAAI,MAAM,IAAI;AAEzC,iBAAW,OAAO,QAAQ;AACtB,YAAI,CAAC,UAAU,GAAG,GAAG;AACjB,iBAAO,OAAO,GAAG;QACrB,WAAW,MAAM,UAAU,GAAG,IAAI,KAAM;AACpC,iBAAO,OAAO,GAAG;AACjB,iBAAO,UAAU,GAAG;QACxB;MACJ;AAEA,UAAI,UAAU,EAAE,KAAK,MAAM,UAAU,EAAE,IAAI,KAAM;AAC7C,eAAO,EAAE,IAAI;MACjB;AAEA,gBAAU,EAAE,IAAI;AAEhB,UAAI,CAAC,OAAO,EAAE,KAAK,KAAK,CAAC,MAAM,KAAK;AAEhC,eAAO,MACH,QAAQ,QAAQ,8CAA8C,MAAM,OAAO,aAAa,IAAI,EAAE;MAEtG,OAAO;AACH,eAAO,EAAE,KAAK,OAAO,EAAE,KAAK,MAAM,IAAI,SAAQ;AAC9C,YAAI,OAAO,EAAE,KAAK,OAAO,EAAE,EAAE,OAAO,EAAE,EAAE,SAAS,CAAC,MAAM,KAAK;AACzD,cAAI;AACA,kBAAM,OAAO,KAAK,MAAM,OAAO,EAAE,CAAC;AAClC,mBAAO,EAAE,IAAI;AACb,gBAAI,MAAM;AACN,sBAAQ,MAAM,KAAK;YACvB;UACJ,QAAQ;UAER;QACJ;MACJ;IACJ,CAAC;AAED,WAAO,GAAG,aAAa,MAAK;AACxB,UAAI;AACA,eAAO,cAAc,cAAc;MACvC,QAAQ;AACJ,eAAO,KAAK,QAAQ,QAAQ,wEAAwE;MACxG;AACA,YAAM,UAAU,OAAO,QAAO;AAC9B,aAAO,KACH,QAAQ,QAAQ,oDAAoD,QAAQ,OAAO,IAAI,QAAQ,IAAI,EAAE;IAE7G,CAAC;AAED,WAAO,KAAK,IAAI;EACpB;AAEA,OAAK,QAAQ,SAAU,UAAQ;AAC3B,cAAU;AACV,QAAI,WAAW;AACX,mBAAa,SAAS;AACtB,kBAAY;IAChB;AACA,QAAI,QAAQ;AACR,UAAI;AACA,eAAO,MAAM,QAAQ;AACrB,iBAAS;MACb,QAAQ;AACJ,iBAAS;AACT,YAAI,UAAU;AACV,mBAAQ;QACZ;MACJ;IACJ,WAAW,UAAU;AACjB,eAAQ;IACZ;EACJ;AAEA,OAAK,KAAI;AAET,SAAO;AACX;",
  "names": ["secret", "dbTools", "dgram"]
}
