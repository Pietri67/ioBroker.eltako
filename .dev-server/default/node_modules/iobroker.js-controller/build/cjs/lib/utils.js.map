{
  "version": 3,
  "sources": ["../../../src/lib/utils.ts"],
  "sourcesContent": ["/**\n * Get disk warning level from state\n *\n * @param state disk warning state, normally with value of type number in %\n * @returns The new disk warning level in %\n */\nexport function getDiskWarningLevel(state: ioBroker.State): number {\n    let warningLevel = 0;\n    if (typeof state.val === 'number' && state.val <= 100 && state.val >= 0) {\n        warningLevel = state.val;\n    }\n\n    return warningLevel;\n}\n\n/** Default value for disk warning level */\nexport const DEFAULT_DISK_WARNING_LEVEL = 5;\n\ninterface GetCronExpressionOptions {\n    /** The cron expression in the schedule */\n    cronExpression: string;\n    /** The connection type of the instance */\n    connectionType?: ioBroker.ConnectionType;\n}\n\n/** Max time in seconds to delay an instance start if no seconds specified, has to be below 60 */\nconst MAX_SCHEDULE_DELAY = 59;\n\n/**\n * Delay the instance start if the expression has no seconds, and it is a cloud connection\n *\n * @param options information about the cron expression and connection type\n */\nexport function getCronExpression(options: GetCronExpressionOptions): string {\n    const { cronExpression, connectionType } = options;\n    const cronHasSeconds = cronExpression.split(' ').length > 5;\n\n    if (cronHasSeconds || connectionType !== 'cloud') {\n        return cronExpression;\n    }\n\n    const randomSeconds = Math.round(Math.random() * MAX_SCHEDULE_DELAY);\n    return `${randomSeconds} ${cronExpression}`;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;;;;;;;AAMM,SAAU,oBAAoB,OAAqB;AACrD,MAAI,eAAe;AACnB,MAAI,OAAO,MAAM,QAAQ,YAAY,MAAM,OAAO,OAAO,MAAM,OAAO,GAAG;AACrE,mBAAe,MAAM;EACzB;AAEA,SAAO;AACX;AAGO,MAAM,6BAA6B;AAU1C,MAAM,qBAAqB;AAOrB,SAAU,kBAAkB,SAAiC;AAC/D,QAAM,EAAE,gBAAgB,eAAc,IAAK;AAC3C,QAAM,iBAAiB,eAAe,MAAM,GAAG,EAAE,SAAS;AAE1D,MAAI,kBAAkB,mBAAmB,SAAS;AAC9C,WAAO;EACX;AAEA,QAAM,gBAAgB,KAAK,MAAM,KAAK,OAAM,IAAK,kBAAkB;AACnE,SAAO,GAAG,aAAa,IAAI,cAAc;AAC7C;",
  "names": []
}
