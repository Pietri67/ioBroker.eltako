{
  "version": 3,
  "sources": ["../../../src/lib/adapterAutoUpgradeManager.ts"],
  "sourcesContent": ["import type { Client as ObjectsClient } from '@iobroker/db-objects-redis';\nimport type { Client as StatesClient } from '@iobroker/db-states-redis';\nimport type { logger } from '@iobroker/js-controller-common';\nimport { Upgrade } from '@iobroker/js-controller-cli';\nimport semver from 'semver';\n\ninterface AdapterAutoUpgradeOptions {\n    /** The objects DB client */\n    objects: ObjectsClient;\n    /** The states DB client */\n    states: StatesClient;\n    /** Logger which needs to be prefixed */\n    logger: ReturnType<typeof logger>;\n    /** Prefix for log messages */\n    logPrefix: string;\n}\n\ninterface UpgradeAdapterOptions extends ioBroker.RepositoryJsonAdapterContent {\n    /** Current active repository */\n    repoName: string;\n}\n\ninterface UpgradedAdapter {\n    /** Name of the adapter */\n    name: string;\n    /** Version before upgrade */\n    oldVersion: string;\n    /** Newly installed version */\n    newVersion: string;\n}\n\ninterface UpgradeAdaptersResult {\n    /** Adapters which were successfully upgraded */\n    upgradedAdapters: UpgradedAdapter[];\n    /** Adapters which were failed to upgrade */\n    failedAdapters: UpgradedAdapter[];\n}\n\ninterface AdapterUpgradeConfiguration {\n    /** Name of the adapter */\n    name: string;\n    /** Current installed version */\n    version: string;\n    /** Configured upgrade policy */\n    upgradePolicy: ioBroker.AutoUpgradePolicy;\n}\n\nexport class AdapterAutoUpgradeManager {\n    private readonly objects: ObjectsClient;\n    private readonly states: StatesClient;\n    /** Mapping from semver range to range identifier */\n    private SEMVER_RANGE_MAPPING = {\n        none: '',\n        patch: '~',\n        minor: '^',\n        major: '>',\n    } as const;\n    /** Prefix for log messages */\n    private readonly logPrefix: string;\n    /** Logger which needs to be prefixed */\n    private logger: ReturnType<typeof logger>;\n\n    constructor(options: AdapterAutoUpgradeOptions) {\n        this.objects = options.objects;\n        this.states = options.states;\n        this.logger = options.logger;\n        this.logPrefix = options.logPrefix;\n    }\n\n    /**\n     * Checks if auto upgrade is enabled for the current configured repository\n     */\n    async isAutoUpgradeEnabled(): Promise<boolean> {\n        let sysConf: ioBroker.SystemConfigObject | null | undefined;\n\n        try {\n            sysConf = await this.objects.getObjectAsync('system.config');\n        } catch {\n            // ignore\n        }\n\n        if (!sysConf?.common.activeRepo?.length || !sysConf.common.adapterAutoUpgrade) {\n            return false;\n        }\n\n        const activeRepo = sysConf.common.activeRepo[0];\n\n        return sysConf.common.adapterAutoUpgrade.repositories[activeRepo];\n    }\n\n    /**\n     * Checks the current `system.repositories` object and checks if one needs to be performed according to the adapter configuration\n     */\n    async upgradeAdapters(): Promise<UpgradeAdaptersResult> {\n        this.logger.info(`${this.logPrefix} Check for available automatic adapter upgrades`);\n        const upgradedAdapters: UpgradedAdapter[] = [];\n        const failedAdapters: UpgradedAdapter[] = [];\n        const repoName = await this.getConfiguredRepositoryName();\n        const repoInformation = await this.getRepository(repoName);\n\n        const installedAdaptersConfig = await this.getAutoUpdateConfiguration();\n\n        for (const adapterConfig of installedAdaptersConfig) {\n            const repoAdapterInfo = repoInformation[adapterConfig.name];\n            if (!repoAdapterInfo) {\n                continue;\n            }\n\n            if (semver.gte(adapterConfig.version, repoAdapterInfo.version)) {\n                continue;\n            }\n\n            if (\n                semver.satisfies(\n                    repoAdapterInfo.version,\n                    `${this.SEMVER_RANGE_MAPPING[adapterConfig.upgradePolicy]}${adapterConfig.version}`,\n                    { includePrerelease: true },\n                )\n            ) {\n                try {\n                    await this.upgradeAdapter({ ...repoAdapterInfo, repoName });\n                    upgradedAdapters.push({\n                        name: repoAdapterInfo.name,\n                        newVersion: repoAdapterInfo.version,\n                        oldVersion: adapterConfig.version,\n                    });\n                    this.logger.info(\n                        `${this.logPrefix} Successfully upgraded adapter \"${repoAdapterInfo.name}\" to ${repoAdapterInfo.version}`,\n                    );\n                } catch (e) {\n                    this.logger.error(\n                        `${this.logPrefix} Could not upgrade adapter \"${repoAdapterInfo.name}\" to ${repoAdapterInfo.version}: ${e.message}`,\n                    );\n                    failedAdapters.push({\n                        name: repoAdapterInfo.name,\n                        newVersion: repoAdapterInfo.version,\n                        oldVersion: adapterConfig.version,\n                    });\n                }\n            }\n        }\n\n        return { upgradedAdapters, failedAdapters };\n    }\n\n    /**\n     * Upgrade specified adapter to given version\n     *\n     * @param options information of the adapter to install, e.g. version and name, sa well as active repo\n     */\n    private async upgradeAdapter(options: UpgradeAdapterOptions): Promise<void> {\n        const { repoName, name, version } = options;\n\n        this.logger.info(`${this.logPrefix} Upgrade adapter \"${name}\" to ${version}`);\n\n        const upgrade = new Upgrade({\n            objects: this.objects,\n            states: this.states,\n            params: {},\n            processExit: () => undefined,\n        });\n\n        await upgrade.upgradeAdapter(repoName, `${name}@${version}`, false, true, false);\n    }\n\n    /**\n     * Get the current active repository name\n     */\n    private async getConfiguredRepositoryName(): Promise<string> {\n        const obj = await this.objects.getObjectAsync('system.config');\n\n        if (!obj?.common?.activeRepo?.length) {\n            throw new Error('Could not find an active repository');\n        }\n\n        return obj.common.activeRepo[0];\n    }\n\n    /**\n     * Get the repository information for the given repository\n     *\n     * @param name Name of the repository\n     */\n    private async getRepository(name: string): Promise<Record<string, ioBroker.RepositoryJsonAdapterContent>> {\n        const obj = await this.objects.getObjectAsync('system.repositories');\n\n        const jsonContent:\n            | (ioBroker.RepositoryJson & {\n                  _repoInfo?: any;\n              })\n            | null\n            | undefined = obj?.native?.repositories?.[name]?.json;\n\n        if (!jsonContent) {\n            throw new Error(`Could not get repository information for \"${name}\"`);\n        }\n\n        delete jsonContent._repoInfo;\n        return jsonContent as Record<string, ioBroker.RepositoryJsonAdapterContent>;\n    }\n\n    /**\n     * Get the auto upgrade configuration of all adapters\n     */\n    private async getAutoUpdateConfiguration(): Promise<AdapterUpgradeConfiguration[]> {\n        const res = await this.objects.getObjectViewAsync('system', 'adapter', {\n            startkey: 'system.adapter.',\n            endkey: 'system.adapter.\\u9999',\n        });\n\n        if (!res) {\n            throw new Error('Did not get information about installed adapters');\n        }\n\n        const defaultPolicy = await this.getDefaultUpgradePolicy();\n\n        return res.rows\n            .filter(\n                row =>\n                    (defaultPolicy && defaultPolicy !== 'none') ||\n                    (row.value?.common.automaticUpgrade && row.value.common.automaticUpgrade !== 'none'),\n            )\n            .map(row => {\n                return {\n                    // ts can not infer, that we filtered out falsy row.value entries\n                    name: row.value.common.name,\n                    version: row.value.common.version,\n                    upgradePolicy: row.value.common.automaticUpgrade! || defaultPolicy,\n                };\n            });\n    }\n\n    /**\n     * Get the default upgrade policy from the system config\n     */\n    private async getDefaultUpgradePolicy(): Promise<ioBroker.AutoUpgradePolicy | undefined> {\n        let sysConf: ioBroker.SystemConfigObject | null | undefined;\n\n        try {\n            sysConf = await this.objects.getObjectAsync('system.config');\n        } catch {\n            // ignore\n        }\n\n        return sysConf?.common.adapterAutoUpgrade?.defaultPolicy;\n    }\n}\n"],
  "mappings": "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",
  "names": ["semver"]
}
