"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkPublicIP = checkPublicIP;
const node_http_1 = __importDefault(require("node:http"));
const node_https_1 = __importDefault(require("node:https"));
const node_url_1 = require("node:url");
function _getPublicIP() {
    return new Promise((resolve, reject) => {
        node_https_1.default
            .get('https://ip.iobroker.in', res => {
            const data = [];
            res.on('data', chunk => data.push(chunk));
            res.on('end', () => resolve(Buffer.concat(data).toString()));
        })
            .on('error', err => reject(new Error(err.message)));
    });
}
function _checkURL(url, pattern, fullCompare) {
    return new Promise((resolve, reject) => {
        const oldState = process.env.NODE_TLS_REJECT_UNAUTHORIZED;
        const urlParsed = new node_url_1.URL(url);
        const options = {
            host: urlParsed.hostname, // server uses this
            port: urlParsed.port, // server uses this
            method: 'GET', // client uses this
            path: urlParsed.pathname, // client uses this
            timeout: 2000, // timeout in 2 seconds if the server does not respond in time
        };
        const req = (url.startsWith('https') ? node_https_1.default : node_http_1.default).get(options, res => {
            const data = [];
            res.on('data', (chunk) => data.push(chunk));
            res.on('end', () => {
                process.env.NODE_TLS_REJECT_UNAUTHORIZED = oldState;
                if (res.statusCode === 200) {
                    if (pattern) {
                        const file = Buffer.concat(data).toString();
                        if ((fullCompare && file === pattern) || file.includes(pattern)) {
                            return reject(new Error(`The URL "${url}" is reachable from internet without any protection!`));
                        }
                        else {
                            resolve(null);
                        }
                    }
                    reject(new Error(`The URL "${url}" is reachable from internet without any protection!`));
                }
                else {
                    resolve(null);
                }
            });
        });
        req.on('timeout', () => {
            req.destroy();
            resolve(null);
        });
        req.on('error', () => {
            process.env.NODE_TLS_REJECT_UNAUTHORIZED = oldState;
            resolve(null);
        });
    });
}
/**
 * Checks public IP address of the server and tries to connect to it.
 * Throws error if connection is possible.
 */
async function checkPublicIP(port, pattern, customPath) {
    if (typeof port === 'string') {
        port = parseInt(port, 10);
    }
    let publicIP;
    // we check the public ip address of the server
    try {
        publicIP = await _getPublicIP();
    }
    catch (_a) {
        // Ignore. We just don't know the public IP
    }
    if (customPath && customPath[0] !== '/') {
        customPath = `/${customPath}`;
    }
    if (publicIP) {
        // check http://publicIP:port
        await _checkURL(`http://${publicIP}:${port}${customPath}`, pattern, !!customPath);
        // check https://publicIP:port
        await _checkURL(`https://${publicIP}:${port}${customPath}`, pattern, !!customPath);
        // check http://publicIP:80
        if (port !== 80) {
            await _checkURL(`http://${publicIP}:80${customPath}`, pattern, !!customPath);
        }
        if (port !== 443) {
            await _checkURL(`https://${publicIP}:443${customPath}`, pattern, !!customPath);
        }
    }
}
//# sourceMappingURL=securityChecker.js.map