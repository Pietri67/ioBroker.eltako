{
  "version": 3,
  "sources": ["../../../../src/lib/states/statesInMemServerClass.js"],
  "sourcesContent": ["/**\n *      States DB in memory - Server with Redis protocol\n *\n *      Copyright 2013-2024 bluefox <dogafox@gmail.com>\n *\n *      MIT License\n *\n */\n\nimport { Client as StatesInRedisClient } from '@iobroker/db-states-redis';\nimport { StatesInMemoryServer } from './statesInMemServerRedis.js';\n\nexport class StatesInMemoryServerClass extends StatesInRedisClient {\n    constructor(settings) {\n        settings.autoConnect = false; // delay Client connection to when we need it\n        super(settings);\n\n        const serverSettings = {\n            namespace: settings.namespace ? `${settings.namespace}-Server` : 'Server',\n            connection: settings.connection,\n            logger: settings.logger,\n            hostname: settings.hostname,\n            connected: () => {\n                this.connectDb(); // now that server is connected also connect client\n            },\n        };\n        this.statesServer = new StatesInMemoryServer(serverSettings);\n    }\n\n    async destroy() {\n        await super.destroy(); // destroy client first\n        await this.statesServer.destroy(); // server afterwards too\n    }\n\n    getStatus() {\n        return this.statesServer.getStatus(); // return Status as Server\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;;;;;AASA,6BAA8C;AAC9C,oCAAqC;AAE/B,MAAO,kCAAkC,uBAAAA,OAAmB;EAC9D,YAAY,UAAQ;AAChB,aAAS,cAAc;AACvB,UAAM,QAAQ;AAEd,UAAM,iBAAiB;MACnB,WAAW,SAAS,YAAY,GAAG,SAAS,SAAS,YAAY;MACjE,YAAY,SAAS;MACrB,QAAQ,SAAS;MACjB,UAAU,SAAS;MACnB,WAAW,MAAK;AACZ,aAAK,UAAS;MAClB;;AAEJ,SAAK,eAAe,IAAI,mDAAqB,cAAc;EAC/D;EAEA,MAAM,UAAO;AACT,UAAM,MAAM,QAAO;AACnB,UAAM,KAAK,aAAa,QAAO;EACnC;EAEA,YAAS;AACL,WAAO,KAAK,aAAa,UAAS;EACtC;;",
  "names": ["StatesInRedisClient"]
}
