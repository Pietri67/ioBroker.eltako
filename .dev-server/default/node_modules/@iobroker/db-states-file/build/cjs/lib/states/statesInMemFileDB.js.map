{
  "version": 3,
  "sources": ["../../../../src/lib/states/statesInMemFileDB.js"],
  "sourcesContent": ["/**\n *      States DB in memory - Server\n *\n *      Copyright 2013-2024 bluefox <dogafox@gmail.com>\n *\n *      MIT License\n *\n */\n\nimport { InMemoryFileDB } from '@iobroker/db-base';\nimport { tools } from '@iobroker/db-base';\n\n// settings = {\n//    change:    function (id, state) {},\n//    connected: function (nameOfServer) {},\n//    logger: {\n//           silly: function (msg) {},\n//           debug: function (msg) {},\n//           info:  function (msg) {},\n//           warn:  function (msg) {},\n//           error: function (msg) {}\n//    },\n//    connection: {\n//           dataDir: 'relative path'\n//    },\n//    auth: null, //unused\n//    secure: true/false,\n//    certificates: as required by createServer\n//    port: 9000,\n//    host: localhost\n// };\n//\n\n/**\n * This class inherits InMemoryFileDB class and adds all relevant logic for states\n * including the available methods for use by js-controller directly\n */\nexport class StatesInMemoryFileDB extends InMemoryFileDB {\n    constructor(settings) {\n        settings = settings || {};\n        settings.fileDB = settings.fileDB || {\n            fileName: 'states.json',\n            backupDirName: 'backup-objects',\n        };\n        super(settings);\n\n        this.META_ID = '**META**';\n        this.logs = {};\n        this.session = {};\n        this.globalMessageId = Math.round(Math.random() * 100_000_000);\n        this.globalLogId = Math.round(Math.random() * 100_000_000);\n\n        this.stateExpires = {};\n        this.sessionExpires = {};\n        this.ONE_DAY_IN_SECS = 24 * 60 * 60 * 1_000;\n        this.writeFileInterval =\n            this.settings.connection && typeof this.settings.connection.writeFileInterval === 'number'\n                ? parseInt(this.settings.connection.writeFileInterval)\n                : 30_000;\n        if (settings.jsonlDB) {\n            this.log.silly(`${this.namespace} States DB uses file write interval of ${this.writeFileInterval} ms`);\n        }\n\n        //this.settings.connection.maxQueue = this.settings.connection.maxQueue || 1000;\n\n        // Reset expires, that are still in DB\n        this._expireAll();\n    }\n\n    // internal functionality\n    _expireAll() {\n        Object.keys(this.stateExpires).forEach(id => {\n            clearTimeout(this.stateExpires[id]);\n            this._expireState(id);\n        });\n        // Set as expire all states that could expire\n        Object.entries(this.dataset).forEach(([id, obj]) => {\n            if (obj && obj.expire) {\n                this._expireState(id, true);\n            }\n        });\n\n        if (!this.stateTimer) {\n            this.stateTimer = setTimeout(() => this.saveState(), this.writeFileInterval);\n        }\n    }\n\n    // internal functionality\n    _expireState(id, dontPublish) {\n        if (this.stateExpires[id] !== undefined) {\n            delete this.stateExpires[id];\n        }\n\n        if (this.dataset[id] !== undefined) {\n            delete this.dataset[id];\n            !dontPublish && setImmediate(() => this.publishAll('state', id, null));\n        }\n\n        if (!this.stateTimer) {\n            this.stateTimer = setTimeout(() => this.saveState(), this.writeFileInterval);\n        }\n    }\n\n    // internal functionality\n    _expireSession(id) {\n        if (this.sessionExpires[id] && this.sessionExpires[id].timeout) {\n            clearTimeout(this.sessionExpires[id].timeout);\n            delete this.sessionExpires[id];\n        }\n\n        if (this.session[id] !== undefined) {\n            delete this.session[id];\n        }\n    }\n\n    // Destructor of the class. Called by shutting down.\n    // internal functionality\n    async destroy() {\n        this._expireAll();\n\n        await super.destroy();\n\n        if (this.stateTimer) {\n            clearTimeout(this.stateTimer);\n            this.stateTimer = null;\n        }\n    }\n\n    // needed by Server\n    _getStates(keys) {\n        if (!keys || !Array.isArray(keys)) {\n            throw new Error('no keys');\n        }\n        return keys.map(el => {\n            const obj = this.dataset[el];\n            return obj !== undefined ? obj : null;\n        });\n    }\n\n    // needed by Server\n    _getState(id) {\n        return this.dataset[id];\n    }\n\n    _ensureMetaDict() {\n        let meta = this.dataset[this.META_ID];\n        if (!meta) {\n            meta = {};\n            this.dataset[this.META_ID] = meta;\n        }\n        return meta;\n    }\n\n    /**\n     * Get value of given meta id\n     *\n     * @param id\n     * @returns\n     */\n    getMeta(id) {\n        const meta = this._ensureMetaDict();\n        return meta[id];\n    }\n\n    /**\n     * Sets given value to id in metaNamespace\n     *\n     * @param id\n     * @param value\n     */\n    setMeta(id, value) {\n        const meta = this._ensureMetaDict();\n        meta[id] = value;\n        // Make sure the object gets re-written, especially when using an external DB\n        this.dataset[this.META_ID] = meta;\n\n        setImmediate(() => {\n            // publish event in states\n            this.log.silly(`${this.namespace} memory publish meta ${id} ${value}`);\n            this.publishAll('meta', id, value);\n        });\n\n        if (!this.stateTimer) {\n            this.stateTimer = setTimeout(() => this.saveState(), this.writeFileInterval);\n        }\n    }\n\n    // needed by Server\n    _setStateDirect(id, obj, expire) {\n        if (this.stateExpires[id]) {\n            clearTimeout(this.stateExpires[id]);\n            delete this.stateExpires[id];\n        }\n\n        if (expire) {\n            this.stateExpires[id] = setTimeout(() => this._expireState(id), expire * 1000);\n\n            obj.expire = true;\n        }\n        this.dataset[id] = obj;\n\n        // If val === undefined, the state was just created and not filled with value\n        if (obj.val !== undefined) {\n            setImmediate(() => {\n                // publish event in states\n                this.log.silly(`${this.namespace} memory publish ${id} ${JSON.stringify(obj)}`);\n                this.publishAll('state', id, obj);\n            });\n        }\n\n        if (!this.stateTimer) {\n            this.stateTimer = setTimeout(() => this.saveState(), this.writeFileInterval);\n        }\n    }\n\n    // needed by Server\n    _delState(id) {\n        if (this.stateExpires[id]) {\n            clearTimeout(this.stateExpires[id]);\n            delete this.stateExpires[id];\n        }\n\n        const state = this.dataset[id];\n        if (state) {\n            delete this.dataset[id];\n            setImmediate(() => this.publishAll('state', id, null));\n        }\n\n        if (!this.stateTimer) {\n            this.stateTimer = setTimeout(() => this.saveState(), this.writeFileInterval);\n        }\n    }\n\n    // needed by Server\n    _getKeys(pattern) {\n        const r = new RegExp(tools.pattern2RegEx(pattern));\n        return Object.keys(this.dataset).filter(id => r.test(id) && id !== this.META_ID);\n    }\n\n    // needed by Server\n    _subscribeForClient(client, pattern) {\n        this.handleSubscribe(client, 'state', pattern);\n    }\n\n    _subscribeMeta(client, pattern) {\n        this.handleSubscribe(client, 'meta', pattern);\n    }\n\n    // needed by Server\n    _unsubscribeForClient(client, pattern) {\n        this.handleUnsubscribe(client, 'state', pattern);\n    }\n\n    // needed by Server\n    _subscribeMessageForClient(client, id) {\n        this.handleSubscribe(client, 'messagebox', `messagebox.${id}`);\n    }\n\n    // needed by Server\n    _unsubscribeMessageForClient(client, id) {\n        this.handleUnsubscribe(client, 'messagebox', `messagebox.${id}`);\n    }\n\n    // needed by Server\n    _subscribeLogForClient(client, id) {\n        this.handleSubscribe(client, 'log', `log.${id}`);\n    }\n\n    // needed by Server\n    _unsubscribeLogForClient(client, id) {\n        this.handleUnsubscribe(client, 'log', `log.${id}`);\n    }\n\n    // needed by Server\n    _getSession(id) {\n        return this.session[id];\n    }\n\n    // internal functionality\n    _handleSessionExpire(id, expireDate) {\n        if (this.sessionExpires[id] && this.sessionExpires[id].timeout) {\n            clearTimeout(this.sessionExpires[id].timeout);\n            delete this.sessionExpires[id];\n        }\n        const expireDelay = expireDate - Date.now();\n        if (expireDelay <= 0) {\n            this._expireSession(id);\n        } else if (expireDate <= this.ONE_DAY_IN_SECS) {\n            this.sessionExpires[id] = {\n                sessionEnd: expireDate,\n                timeout: setTimeout(() => {\n                    this.sessionExpires[id].timeout = null;\n                    this._expireSession(id);\n                }, expireDate),\n            };\n        } else {\n            this.sessionExpires[id] = {\n                sessionEnd: expireDate,\n                timeout: setTimeout(() => {\n                    this.sessionExpires[id].timeout = null;\n                    this._handleSessionExpire(id, expireDate);\n                }, this.ONE_DAY_IN_SECS),\n            };\n        }\n    }\n\n    // needed by Server\n    _setSession(id, expire, obj) {\n        this.session[id] = obj || {};\n\n        if (this.sessionExpires[id] && this.sessionExpires[id].timeout) {\n            clearTimeout(this.sessionExpires[id].timeout);\n            delete this.sessionExpires[id];\n        }\n\n        this._handleSessionExpire(id, Date.now() + expire * 1000);\n        this.session[id]._expire = true;\n    }\n\n    // needed by Server\n    _destroySession(id) {\n        if (this.session[id]) {\n            delete this.session[id];\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["import_db_base"]
}
