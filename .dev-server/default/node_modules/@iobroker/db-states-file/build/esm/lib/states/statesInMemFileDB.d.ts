/**
 * This class inherits InMemoryFileDB class and adds all relevant logic for states
 * including the available methods for use by js-controller directly
 */
export class StatesInMemoryFileDB extends InMemoryFileDB {
    constructor(settings: any);
    META_ID: string;
    logs: {};
    session: {};
    globalMessageId: number;
    globalLogId: number;
    stateExpires: {};
    sessionExpires: {};
    ONE_DAY_IN_SECS: number;
    writeFileInterval: number;
    _expireAll(): void;
    _expireState(id: any, dontPublish: any): void;
    _expireSession(id: any): void;
    _getStates(keys: any): any[];
    _getState(id: any): any;
    _ensureMetaDict(): any;
    /**
     * Get value of given meta id
     *
     * @param id
     * @returns
     */
    getMeta(id: any): any;
    /**
     * Sets given value to id in metaNamespace
     *
     * @param id
     * @param value
     */
    setMeta(id: any, value: any): void;
    _setStateDirect(id: any, obj: any, expire: any): void;
    _delState(id: any): void;
    _getKeys(pattern: any): string[];
    _subscribeForClient(client: any, pattern: any): void;
    _subscribeMeta(client: any, pattern: any): void;
    _unsubscribeForClient(client: any, pattern: any): void;
    _subscribeMessageForClient(client: any, id: any): void;
    _unsubscribeMessageForClient(client: any, id: any): void;
    _subscribeLogForClient(client: any, id: any): void;
    _unsubscribeLogForClient(client: any, id: any): void;
    _getSession(id: any): any;
    _handleSessionExpire(id: any, expireDate: any): void;
    _setSession(id: any, expire: any, obj: any): void;
    _destroySession(id: any): void;
}
import { InMemoryFileDB } from '@iobroker/db-base';
//# sourceMappingURL=statesInMemFileDB.d.ts.map