{
  "version": 3,
  "sources": ["../../../../src/lib/states/statesInMemServerRedis.js"],
  "sourcesContent": ["/**\n *      States DB in memory - Server with Redis protocol\n *\n *      Copyright 2013-2024 bluefox <dogafox@gmail.com>\n *\n *      MIT License\n *\n */\n\nimport net from 'node:net';\nimport { inspect } from 'node:util';\n\nimport { RedisHandler } from '@iobroker/db-base';\nimport { StatesInMemoryJsonlDB } from './statesInMemJsonlDB.js';\nimport { getLocalAddress } from '@iobroker/js-controller-common-db/tools';\nimport { EXIT_CODES } from '@iobroker/js-controller-common-db';\n\n// settings = {\n//    change:    function (id, state) {},\n//    connected: function (nameOfServer) {},\n//    logger: {\n//           silly: function (msg) {},\n//           debug: function (msg) {},\n//           info:  function (msg) {},\n//           warn:  function (msg) {},\n//           error: function (msg) {}\n//    },\n//    connection: {\n//           dataDir: 'relative path'\n//    },\n//    auth: null, //unused\n//    secure: true/false,\n//    certificates: as required by createServer\n//    port: 9000,\n//    host: localhost\n// };\n//\n\n/**\n * This class inherits statesInMemoryFileDB class and adds socket.io communication layer\n * to access the methods via socket.io\n */\nexport class StatesInMemoryServer extends StatesInMemoryJsonlDB {\n    /**\n     * Constructor\n     *\n     * @param settings State and InMem-DB settings\n     */\n    constructor(settings) {\n        super(settings);\n\n        this.serverConnections = {};\n        this.namespaceStates = `${this.settings.redisNamespace || 'io'}.`;\n        this.namespaceMsg = `${this.settings.namespaceMsg || 'messagebox'}.`;\n        this.namespaceLog = `${this.settings.namespaceLog || 'log'}.`;\n        this.namespaceSession = `${this.settings.namespaceSession || 'session'}.`;\n        //this.namespaceStatesLen  = this.namespaceStates.length;\n        this.namespaceMsgLen = this.namespaceMsg.length;\n        this.namespaceLogLen = this.namespaceLog.length;\n        //this.namespaceSessionlen = this.namespaceSession.length;\n        this.metaNamespace = `${this.settings.metaNamespace || 'meta'}.`;\n        this.metaNamespaceLen = this.metaNamespace.length;\n\n        this.open()\n            .then(() => {\n                return this._initRedisServer(this.settings.connection);\n            })\n            .then(() => {\n                this.log.debug(\n                    `${this.namespace} ${settings.secure ? 'Secure ' : ''} Redis inMem-states listening on port ${\n                        this.settings.port || 9000\n                    }`,\n                );\n\n                if (typeof this.settings.connected === 'function') {\n                    setImmediate(() => this.settings.connected());\n                }\n            })\n            .catch(e => {\n                this.log.error(\n                    `${this.namespace} Cannot start inMem-states on port ${this.settings.port || 9000}: ${e.message}`,\n                );\n                process.exit(EXIT_CODES.NO_CONNECTION_TO_STATES_DB);\n            });\n    }\n\n    /**\n     * Separate Namespace from ID and return both\n     *\n     * @param idWithNamespace ID or Array of IDs containing a redis namespace and the real ID\n     * @returns Object with namespace and the\n     *                                                      ID/Array of IDs without the namespace\n     */\n    _normalizeId(idWithNamespace) {\n        let ns = this.namespaceStates;\n        let id;\n        if (Array.isArray(idWithNamespace)) {\n            const ids = [];\n            idWithNamespace.forEach(el => {\n                const { id, namespace } = this._normalizeId(el);\n                ids.push(id);\n                ns = namespace; // we ignore the pot. case from arrays with different namespaces\n            });\n            id = ids;\n        } else {\n            id = idWithNamespace;\n            const pointIdx = idWithNamespace.indexOf('.');\n            if (pointIdx !== -1) {\n                ns = idWithNamespace.substr(0, pointIdx + 1);\n                if (ns === this.namespaceStates || ns === this.metaNamespace) {\n                    id = idWithNamespace.substr(pointIdx + 1);\n                }\n            }\n        }\n        return { id: id, namespace: ns };\n    }\n\n    /**\n     * Publish a subscribed value to one of the redis connections in redis format\n     *\n     * @param client Instance of RedisHandler\n     * @param type Type of subscribed key\n     * @param id Subscribed ID\n     * @param obj Object to publish\n     * @returns Publish counter 0 or 1 depending if send out or not\n     */\n    publishToClients(client, type, id, obj) {\n        if (!client._subscribe || !client._subscribe[type]) {\n            return 0;\n        }\n        const s = client._subscribe[type];\n\n        const found = s.find(sub => sub.regex.test(id));\n\n        if (found) {\n            if (type === 'meta') {\n                this.log.silly(`${this.namespace} Redis Publish Meta ${id}=${obj}`);\n                const sendPattern = this.metaNamespace + found.pattern;\n                const sendId = this.metaNamespace + id;\n                client.sendArray(null, ['pmessage', sendPattern, sendId, obj]);\n            } else {\n                let objString;\n                try {\n                    objString = JSON.stringify(obj);\n                } catch (e) {\n                    // mainly catch circular structures - thus log object with inspect\n                    this.log.error(`${this.namespace} Error on publishing state: ${id}=${inspect(obj)}: ${e.message}`);\n                    return 0;\n                }\n\n                this.log.silly(`${this.namespace} Redis Publish State ${id}=${objString}`);\n                const sendPattern = (type === 'state' ? '' : this.namespaceStates) + found.pattern;\n                const sendId = (type === 'state' ? '' : this.namespaceStates) + id;\n                client.sendArray(null, ['pmessage', sendPattern, sendId, objString]);\n            }\n            return 1;\n        }\n        return 0;\n    }\n\n    /**\n     * Register all event listeners for Handler and implement the relevant logic\n     *\n     * @param handler RedisHandler instance\n     */\n    _socketEvents(handler) {\n        let connectionName = null;\n        let namespaceLog = this.namespace;\n\n        // Handle Redis \"INFO\" request\n        handler.on('info', (_data, responseId) => {\n            let infoString = '# Server\\r\\n';\n            infoString += 'redis_version:3.0.0-iobroker\\r\\n';\n            infoString += '# Clients\\r\\n';\n            infoString += '# Memory\\r\\n';\n            infoString += '# Persistence\\r\\n';\n            infoString += '# Stats\\r\\n';\n            infoString += '# Replication\\r\\n';\n            infoString += '# CPU\\r\\n';\n            infoString += '# Cluster\\r\\n';\n            infoString += '# Keyspace\\r\\n';\n            infoString += `db0:keys=${Object.keys(this.dataset).length},expires=${\n                Object.keys(this.stateExpires).length + Object.keys(this.sessionExpires).length\n            },avg_ttl=98633637897`;\n            handler.sendBulk(responseId, infoString);\n        });\n\n        // Handle Redis \"QUIT\" request\n        handler.on('quit', (_data, responseId) => {\n            this.log.silly(`${namespaceLog} Redis QUIT received, close connection`);\n            handler.sendString(responseId, 'OK');\n            handler.close();\n        });\n\n        // Handle Redis \"PUBLISH\" request\n        handler.on('publish', (data, responseId) => {\n            const { id, namespace } = this._normalizeId(data[0]);\n            if (namespace === this.namespaceStates || namespace === this.metaNamespace) {\n                // a \"set\" always comes afterwards, so do not publish\n                return void handler.sendInteger(responseId, 0); // do not publish for now\n            }\n            const publishCount = this.publishAll(namespace.substr(0, namespace.length - 1), id, JSON.parse(data[1]));\n            handler.sendInteger(responseId, publishCount);\n        });\n\n        // Handle Redis \"MGET\" request for state namespace\n        handler.on('mget', (data, responseId) => {\n            if (!data || !data[0]) {\n                return void handler.sendArray(responseId, []);\n            }\n            const { id, namespace } = this._normalizeId(data);\n\n            if (namespace === this.namespaceStates) {\n                try {\n                    const states = this._getStates(id);\n                    const result = states.map(el => (el ? JSON.stringify(el) : null));\n                    handler.sendArray(responseId, result);\n                } catch (err) {\n                    handler.sendError(responseId, new Error(`ERROR _getStates: ${err.message}`));\n                }\n            } else {\n                handler.sendError(\n                    responseId,\n                    new Error(`MGET-UNSUPPORTED for namespace ${namespace}: Data=${JSON.stringify(data)}`),\n                );\n            }\n        });\n\n        // Handle Redis \"GET\" request for state and session namespace\n        handler.on('get', (data, responseId) => {\n            const { id, namespace } = this._normalizeId(data[0]);\n            if (namespace === this.namespaceStates) {\n                const result = this._getState(id);\n                if (!result) {\n                    handler.sendNull(responseId);\n                } else {\n                    if (Buffer.isBuffer(result)) {\n                        handler.sendBufBulk(responseId, result);\n                    } else {\n                        handler.sendBulk(responseId, JSON.stringify(result));\n                    }\n                }\n            } else if (namespace === this.namespaceSession) {\n                const result = this._getSession(id);\n                if (result === undefined || result === null) {\n                    handler.sendNull(responseId);\n                } else {\n                    handler.sendBulk(responseId, JSON.stringify(result));\n                }\n            } else if (namespace === this.metaNamespace) {\n                const result = this.getMeta(id);\n                if (result === undefined || result === null) {\n                    handler.sendNull(responseId);\n                } else {\n                    handler.sendBulk(responseId, result);\n                }\n            } else {\n                handler.sendError(\n                    responseId,\n                    new Error(`GET-UNSUPPORTED for namespace ${namespace}: Data=${JSON.stringify(data)}`),\n                );\n            }\n        });\n\n        // Handle Redis \"SET\" request for state namespace\n        handler.on('set', (data, responseId) => {\n            const { id, namespace } = this._normalizeId(data[0]);\n            if (namespace === this.namespaceStates) {\n                try {\n                    const state = JSON.parse(data[1].toString('utf-8'));\n                    this._setStateDirect(id, state);\n                    handler.sendString(responseId, 'OK');\n                } catch (err) {\n                    handler.sendError(responseId, new Error(`ERROR setState id=${id}: ${err.message}`));\n                }\n            } else if (namespace === this.metaNamespace) {\n                this.setMeta(id, data[1].toString('utf-8'));\n                handler.sendString(responseId, 'OK');\n            } else {\n                handler.sendError(\n                    responseId,\n                    new Error(`SET-UNSUPPORTED for namespace ${namespace}: Data=${JSON.stringify(data)}`),\n                );\n            }\n        });\n\n        // Handle Redis \"SETEX\" request for state and session namespace\n        handler.on('setex', (data, responseId) => {\n            const { id, namespace } = this._normalizeId(data[0]);\n            if (namespace === this.namespaceStates) {\n                try {\n                    const state = JSON.parse(data[2].toString('utf-8'));\n\n                    const expire = parseInt(data[1].toString('utf-8'), 10);\n                    if (isNaN(expire)) {\n                        return void handler.sendError(\n                            responseId,\n                            new Error(`ERROR parsing expire value ${data[1].toString('utf-8')}`),\n                        );\n                    }\n                    this._setStateDirect(id, state, expire);\n                    handler.sendString(responseId, 'OK');\n                } catch (err) {\n                    handler.sendError(responseId, new Error(`ERROR setStateEx id=${id}: ${err.message}`));\n                }\n            } else if (namespace === this.namespaceSession) {\n                try {\n                    const state = JSON.parse(data[2].toString('utf-8'));\n                    const expire = parseInt(data[1].toString('utf-8'), 10);\n                    if (isNaN(expire)) {\n                        return void handler.sendError(\n                            responseId,\n                            new Error(`ERROR parsing expire value ${data[1].toString('utf-8')}`),\n                        );\n                    }\n                    this._setSession(id, expire, state);\n                    handler.sendString(responseId, 'OK');\n                } catch (err) {\n                    handler.sendError(responseId, new Error(`ERROR _setSession ${id}: ${err.message}`));\n                }\n            } else {\n                handler.sendError(\n                    responseId,\n                    new Error(`SETEX-UNSUPPORTED for namespace ${namespace}: Data=${JSON.stringify(data)}`),\n                );\n            }\n        });\n\n        // Handle Redis \"DEL\" request for state and session namespace\n        handler.on('del', (data, responseId) => {\n            const { id, namespace } = this._normalizeId(data[0]);\n            if (namespace === this.namespaceStates) {\n                this._delState(id);\n                handler.sendInteger(responseId, 1);\n            } else if (namespace === this.namespaceSession) {\n                this._destroySession(id);\n                handler.sendInteger(responseId, 1);\n            } else {\n                handler.sendError(\n                    responseId,\n                    new Error(`DEL-UNSUPPORTED for namespace ${namespace}: Data=${JSON.stringify(data)}`),\n                );\n            }\n        });\n\n        // Handle Redis \"KEYS\" request for state namespace\n        handler.on('keys', (data, responseId) => {\n            if (!data || !data.length) {\n                return void handler.sendArray(responseId, []);\n            }\n            const { id, namespace } = this._normalizeId(data[0]);\n            if (namespace === this.namespaceStates) {\n                // special case because of simulation of redis\n                let pattern = id;\n                if (pattern.substring(0, 3) === this.namespaceStates) {\n                    pattern = pattern.substring(this.namespaceStates.length);\n                }\n                const keys = this._getKeys(pattern);\n                const result = keys.map(id => this.namespaceStates + id);\n                handler.sendArray(responseId, result);\n            } else {\n                handler.sendError(\n                    responseId,\n                    new Error(`KEYS-UNSUPPORTED for namespace ${namespace}: Data=${JSON.stringify(data)}`),\n                );\n            }\n        });\n\n        // Handle Redis \"PSUBSCRIBE\" request for state, log and session namespace\n        handler.on('psubscribe', (data, responseId) => {\n            const { id, namespace } = this._normalizeId(data[0]);\n            if (namespace === this.namespaceMsg) {\n                this._subscribeMessageForClient(handler, id.substr(this.namespaceMsgLen));\n                handler.sendArray(responseId, ['psubscribe', data[0], 1]);\n            } else if (namespace === this.namespaceLog) {\n                this._subscribeLogForClient(handler, id.substr(this.namespaceLogLen));\n                handler.sendArray(responseId, ['psubscribe', data[0], 1]);\n            } else if (namespace === this.namespaceStates) {\n                try {\n                    this._subscribeForClient(handler, id);\n                    handler.sendArray(responseId, ['psubscribe', data[0], 1]);\n                } catch (e) {\n                    handler.sendError(responseId, e);\n                }\n            } else if (namespace === this.metaNamespace) {\n                this._subscribeMeta(handler, id);\n                handler.sendArray(responseId, ['psubscribe', data[0], 1]);\n            } else {\n                handler.sendError(\n                    responseId,\n                    new Error(`PSUBSCRIBE-UNSUPPORTED for namespace ${namespace}: Data=${JSON.stringify(data)}`),\n                );\n            }\n        });\n\n        // Handle Redis \"UNSUBSCRIBE\" request for state, log and session namespace\n        handler.on('punsubscribe', (data, responseId) => {\n            const { id, namespace } = this._normalizeId(data[0]);\n            if (namespace === this.namespaceMsg) {\n                this._unsubscribeMessageForClient(handler, id.substr(this.namespaceMsgLen));\n                handler.sendArray(responseId, ['punsubscribe', data[0], 1]);\n            } else if (namespace === this.namespaceLog) {\n                this._unsubscribeLogForClient(handler, id.substr(this.namespaceLogLen));\n                handler.sendArray(responseId, ['punsubscribe', data[0], 1]);\n            } else if (namespace === this.namespaceStates) {\n                this._unsubscribeForClient(handler, id);\n                handler.sendArray(responseId, ['punsubscribe', data[0], 1]);\n            } else {\n                handler.sendError(\n                    responseId,\n                    new Error(`PUNSUBSCRIBE-UNSUPPORTED for namespace ${namespace}: Data=${JSON.stringify(data)}`),\n                );\n            }\n        });\n\n        // Handle Redis \"SUBSCRIBE\" ... currently mainly ignored\n        handler.on('subscribe', (data, responseId) => {\n            if (data[0].startsWith('__keyevent@')) {\n                // we ignore these type of events because we publish expires anyway directly\n                handler.sendArray(responseId, ['subscribe', data[0], 1]);\n            } else {\n                handler.sendError(responseId, new Error(`SUBSCRIBE-UNSUPPORTED for ${data[0]}`));\n            }\n        });\n\n        // Handle Redis \"CONFIG\" ... currently mainly ignored\n        handler.on('config', (data, responseId) => {\n            if (\n                typeof data[0] === 'string' &&\n                data[0].toLowerCase() === 'set' &&\n                data[1] === 'notify-keyspace-events'\n            ) {\n                // we ignore these type of commands for now, should only be to subscribe to keyspace events\n                handler.sendString(responseId, 'OK');\n            } else {\n                handler.sendError(responseId, new Error(`CONFIG-UNSUPPORTED for ${JSON.stringify(data)}`));\n            }\n        });\n\n        // handle client SETNAME/GETNAME\n        handler.on('client', (data, responseId) => {\n            if (data[0] === 'setname' && typeof data[1] === 'string') {\n                connectionName = data[1];\n                namespaceLog = connectionName;\n                handler.sendString(responseId, 'OK');\n            } else if (data[0] === 'getname') {\n                if (connectionName && typeof connectionName === 'string') {\n                    handler.sendString(responseId, connectionName);\n                } else {\n                    // redis sends null if no name defined\n                    handler.sendNull(responseId);\n                }\n            } else {\n                handler.sendError(responseId, new Error(`CLIENT-UNSUPPORTED for ${JSON.stringify(data)}`));\n            }\n        });\n\n        handler.on('error', err => this.log.warn(`${namespaceLog} Redis states: ${err}`));\n    }\n\n    /**\n     * Return connected RedisHandlers/Connections\n     *\n     * @returns\n     */\n    getClients() {\n        return this.serverConnections;\n    }\n\n    /**\n     * Destructor of the class. Called by shutting down.\n     */\n    async destroy() {\n        if (this.server) {\n            for (const s of Object.keys(this.serverConnections)) {\n                this.serverConnections[s].close();\n                delete this.serverConnections[s];\n            }\n\n            await new Promise(resolve => {\n                if (!this.server) {\n                    return void resolve();\n                }\n                try {\n                    this.server.close(() => resolve());\n                } catch (e) {\n                    console.log(e.message);\n                    resolve();\n                }\n            });\n        }\n        await super.destroy();\n    }\n\n    /**\n     * Initialize RedisHandler for a new network connection\n     *\n     * @param socket Network socket\n     */\n    _initSocket(socket) {\n        this.settings.connection.enhancedLogging &&\n            this.log.silly(`${this.namespace} Handling new Redis States connection`);\n\n        const options = {\n            log: this.log,\n            logScope: `${this.namespace} States`,\n            handleAsBuffers: true,\n            enhancedLogging: this.settings.connection.enhancedLogging,\n        };\n        const handler = new RedisHandler(socket, options);\n        this._socketEvents(handler);\n\n        this.serverConnections[`${socket.remoteAddress}:${socket.remotePort}`] = handler;\n\n        socket.on('close', () => {\n            if (this.serverConnections[`${socket.remoteAddress}:${socket.remotePort}`]) {\n                delete this.serverConnections[`${socket.remoteAddress}:${socket.remotePort}`];\n            }\n        });\n    }\n\n    /**\n     * Initialize Redis Server\n     *\n     * @param settings Settings object\n     * @returns\n     */\n    _initRedisServer(settings) {\n        return new Promise((resolve, reject) => {\n            if (settings.secure) {\n                reject(new Error('Secure Redis unsupported for File-DB'));\n            }\n            try {\n                this.server = net.createServer();\n                this.server.on('error', err =>\n                    this.log.info(\n                        `${this.namespace} ${settings.secure ? 'Secure ' : ''} Error inMem-objects listening on port ${\n                            settings.port || 9001\n                        }: ${err}`,\n                    ),\n                );\n                this.server.on('connection', socket => this._initSocket(socket));\n\n                this.server.listen(\n                    settings.port || 9000,\n                    settings.host === 'localhost' ? getLocalAddress() : settings.host ? settings.host : undefined,\n                    () => resolve(),\n                );\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AASA,sBAAgB;AAChB,uBAAwB;AAExB,qBAA6B;AAC7B,gCAAsC;AACtC,mBAAgC;AAChC,qCAA2B;AA2BrB,MAAO,6BAA6B,gDAAqB;;;;;;EAM3D,YAAY,UAAQ;AAChB,UAAM,QAAQ;AAEd,SAAK,oBAAoB,CAAA;AACzB,SAAK,kBAAkB,GAAG,KAAK,SAAS,kBAAkB,IAAI;AAC9D,SAAK,eAAe,GAAG,KAAK,SAAS,gBAAgB,YAAY;AACjE,SAAK,eAAe,GAAG,KAAK,SAAS,gBAAgB,KAAK;AAC1D,SAAK,mBAAmB,GAAG,KAAK,SAAS,oBAAoB,SAAS;AAEtE,SAAK,kBAAkB,KAAK,aAAa;AACzC,SAAK,kBAAkB,KAAK,aAAa;AAEzC,SAAK,gBAAgB,GAAG,KAAK,SAAS,iBAAiB,MAAM;AAC7D,SAAK,mBAAmB,KAAK,cAAc;AAE3C,SAAK,KAAI,EACJ,KAAK,MAAK;AACP,aAAO,KAAK,iBAAiB,KAAK,SAAS,UAAU;IACzD,CAAC,EACA,KAAK,MAAK;AACP,WAAK,IAAI,MACL,GAAG,KAAK,SAAS,IAAI,SAAS,SAAS,YAAY,EAAE,yCACjD,KAAK,SAAS,QAAQ,GAC1B,EAAE;AAGN,UAAI,OAAO,KAAK,SAAS,cAAc,YAAY;AAC/C,qBAAa,MAAM,KAAK,SAAS,UAAS,CAAE;MAChD;IACJ,CAAC,EACA,MAAM,OAAI;AACP,WAAK,IAAI,MACL,GAAG,KAAK,SAAS,sCAAsC,KAAK,SAAS,QAAQ,GAAI,KAAK,EAAE,OAAO,EAAE;AAErG,cAAQ,KAAK,0CAAW,0BAA0B;IACtD,CAAC;EACT;;;;;;;;EASA,aAAa,iBAAe;AACxB,QAAI,KAAK,KAAK;AACd,QAAI;AACJ,QAAI,MAAM,QAAQ,eAAe,GAAG;AAChC,YAAM,MAAM,CAAA;AACZ,sBAAgB,QAAQ,QAAK;AACzB,cAAM,EAAE,IAAAA,KAAI,UAAS,IAAK,KAAK,aAAa,EAAE;AAC9C,YAAI,KAAKA,GAAE;AACX,aAAK;MACT,CAAC;AACD,WAAK;IACT,OAAO;AACH,WAAK;AACL,YAAM,WAAW,gBAAgB,QAAQ,GAAG;AAC5C,UAAI,aAAa,IAAI;AACjB,aAAK,gBAAgB,OAAO,GAAG,WAAW,CAAC;AAC3C,YAAI,OAAO,KAAK,mBAAmB,OAAO,KAAK,eAAe;AAC1D,eAAK,gBAAgB,OAAO,WAAW,CAAC;QAC5C;MACJ;IACJ;AACA,WAAO,EAAE,IAAQ,WAAW,GAAE;EAClC;;;;;;;;;;EAWA,iBAAiB,QAAQ,MAAM,IAAI,KAAG;AAClC,QAAI,CAAC,OAAO,cAAc,CAAC,OAAO,WAAW,IAAI,GAAG;AAChD,aAAO;IACX;AACA,UAAM,IAAI,OAAO,WAAW,IAAI;AAEhC,UAAM,QAAQ,EAAE,KAAK,SAAO,IAAI,MAAM,KAAK,EAAE,CAAC;AAE9C,QAAI,OAAO;AACP,UAAI,SAAS,QAAQ;AACjB,aAAK,IAAI,MAAM,GAAG,KAAK,SAAS,uBAAuB,EAAE,IAAI,GAAG,EAAE;AAClE,cAAM,cAAc,KAAK,gBAAgB,MAAM;AAC/C,cAAM,SAAS,KAAK,gBAAgB;AACpC,eAAO,UAAU,MAAM,CAAC,YAAY,aAAa,QAAQ,GAAG,CAAC;MACjE,OAAO;AACH,YAAI;AACJ,YAAI;AACA,sBAAY,KAAK,UAAU,GAAG;QAClC,SAAS,GAAG;AAER,eAAK,IAAI,MAAM,GAAG,KAAK,SAAS,+BAA+B,EAAE,QAAI,0BAAQ,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE;AACjG,iBAAO;QACX;AAEA,aAAK,IAAI,MAAM,GAAG,KAAK,SAAS,wBAAwB,EAAE,IAAI,SAAS,EAAE;AACzE,cAAM,eAAe,SAAS,UAAU,KAAK,KAAK,mBAAmB,MAAM;AAC3E,cAAM,UAAU,SAAS,UAAU,KAAK,KAAK,mBAAmB;AAChE,eAAO,UAAU,MAAM,CAAC,YAAY,aAAa,QAAQ,SAAS,CAAC;MACvE;AACA,aAAO;IACX;AACA,WAAO;EACX;;;;;;EAOA,cAAc,SAAO;AACjB,QAAI,iBAAiB;AACrB,QAAI,eAAe,KAAK;AAGxB,YAAQ,GAAG,QAAQ,CAAC,OAAO,eAAc;AACrC,UAAI,aAAa;AACjB,oBAAc;AACd,oBAAc;AACd,oBAAc;AACd,oBAAc;AACd,oBAAc;AACd,oBAAc;AACd,oBAAc;AACd,oBAAc;AACd,oBAAc;AACd,oBAAc,YAAY,OAAO,KAAK,KAAK,OAAO,EAAE,MAAM,YACtD,OAAO,KAAK,KAAK,YAAY,EAAE,SAAS,OAAO,KAAK,KAAK,cAAc,EAAE,MAC7E;AACA,cAAQ,SAAS,YAAY,UAAU;IAC3C,CAAC;AAGD,YAAQ,GAAG,QAAQ,CAAC,OAAO,eAAc;AACrC,WAAK,IAAI,MAAM,GAAG,YAAY,wCAAwC;AACtE,cAAQ,WAAW,YAAY,IAAI;AACnC,cAAQ,MAAK;IACjB,CAAC;AAGD,YAAQ,GAAG,WAAW,CAAC,MAAM,eAAc;AACvC,YAAM,EAAE,IAAI,UAAS,IAAK,KAAK,aAAa,KAAK,CAAC,CAAC;AACnD,UAAI,cAAc,KAAK,mBAAmB,cAAc,KAAK,eAAe;AAExE,eAAO,KAAK,QAAQ,YAAY,YAAY,CAAC;MACjD;AACA,YAAM,eAAe,KAAK,WAAW,UAAU,OAAO,GAAG,UAAU,SAAS,CAAC,GAAG,IAAI,KAAK,MAAM,KAAK,CAAC,CAAC,CAAC;AACvG,cAAQ,YAAY,YAAY,YAAY;IAChD,CAAC;AAGD,YAAQ,GAAG,QAAQ,CAAC,MAAM,eAAc;AACpC,UAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG;AACnB,eAAO,KAAK,QAAQ,UAAU,YAAY,CAAA,CAAE;MAChD;AACA,YAAM,EAAE,IAAI,UAAS,IAAK,KAAK,aAAa,IAAI;AAEhD,UAAI,cAAc,KAAK,iBAAiB;AACpC,YAAI;AACA,gBAAM,SAAS,KAAK,WAAW,EAAE;AACjC,gBAAM,SAAS,OAAO,IAAI,QAAO,KAAK,KAAK,UAAU,EAAE,IAAI,IAAK;AAChE,kBAAQ,UAAU,YAAY,MAAM;QACxC,SAAS,KAAK;AACV,kBAAQ,UAAU,YAAY,IAAI,MAAM,qBAAqB,IAAI,OAAO,EAAE,CAAC;QAC/E;MACJ,OAAO;AACH,gBAAQ,UACJ,YACA,IAAI,MAAM,kCAAkC,SAAS,UAAU,KAAK,UAAU,IAAI,CAAC,EAAE,CAAC;MAE9F;IACJ,CAAC;AAGD,YAAQ,GAAG,OAAO,CAAC,MAAM,eAAc;AACnC,YAAM,EAAE,IAAI,UAAS,IAAK,KAAK,aAAa,KAAK,CAAC,CAAC;AACnD,UAAI,cAAc,KAAK,iBAAiB;AACpC,cAAM,SAAS,KAAK,UAAU,EAAE;AAChC,YAAI,CAAC,QAAQ;AACT,kBAAQ,SAAS,UAAU;QAC/B,OAAO;AACH,cAAI,OAAO,SAAS,MAAM,GAAG;AACzB,oBAAQ,YAAY,YAAY,MAAM;UAC1C,OAAO;AACH,oBAAQ,SAAS,YAAY,KAAK,UAAU,MAAM,CAAC;UACvD;QACJ;MACJ,WAAW,cAAc,KAAK,kBAAkB;AAC5C,cAAM,SAAS,KAAK,YAAY,EAAE;AAClC,YAAI,WAAW,UAAa,WAAW,MAAM;AACzC,kBAAQ,SAAS,UAAU;QAC/B,OAAO;AACH,kBAAQ,SAAS,YAAY,KAAK,UAAU,MAAM,CAAC;QACvD;MACJ,WAAW,cAAc,KAAK,eAAe;AACzC,cAAM,SAAS,KAAK,QAAQ,EAAE;AAC9B,YAAI,WAAW,UAAa,WAAW,MAAM;AACzC,kBAAQ,SAAS,UAAU;QAC/B,OAAO;AACH,kBAAQ,SAAS,YAAY,MAAM;QACvC;MACJ,OAAO;AACH,gBAAQ,UACJ,YACA,IAAI,MAAM,iCAAiC,SAAS,UAAU,KAAK,UAAU,IAAI,CAAC,EAAE,CAAC;MAE7F;IACJ,CAAC;AAGD,YAAQ,GAAG,OAAO,CAAC,MAAM,eAAc;AACnC,YAAM,EAAE,IAAI,UAAS,IAAK,KAAK,aAAa,KAAK,CAAC,CAAC;AACnD,UAAI,cAAc,KAAK,iBAAiB;AACpC,YAAI;AACA,gBAAM,QAAQ,KAAK,MAAM,KAAK,CAAC,EAAE,SAAS,OAAO,CAAC;AAClD,eAAK,gBAAgB,IAAI,KAAK;AAC9B,kBAAQ,WAAW,YAAY,IAAI;QACvC,SAAS,KAAK;AACV,kBAAQ,UAAU,YAAY,IAAI,MAAM,qBAAqB,EAAE,KAAK,IAAI,OAAO,EAAE,CAAC;QACtF;MACJ,WAAW,cAAc,KAAK,eAAe;AACzC,aAAK,QAAQ,IAAI,KAAK,CAAC,EAAE,SAAS,OAAO,CAAC;AAC1C,gBAAQ,WAAW,YAAY,IAAI;MACvC,OAAO;AACH,gBAAQ,UACJ,YACA,IAAI,MAAM,iCAAiC,SAAS,UAAU,KAAK,UAAU,IAAI,CAAC,EAAE,CAAC;MAE7F;IACJ,CAAC;AAGD,YAAQ,GAAG,SAAS,CAAC,MAAM,eAAc;AACrC,YAAM,EAAE,IAAI,UAAS,IAAK,KAAK,aAAa,KAAK,CAAC,CAAC;AACnD,UAAI,cAAc,KAAK,iBAAiB;AACpC,YAAI;AACA,gBAAM,QAAQ,KAAK,MAAM,KAAK,CAAC,EAAE,SAAS,OAAO,CAAC;AAElD,gBAAM,SAAS,SAAS,KAAK,CAAC,EAAE,SAAS,OAAO,GAAG,EAAE;AACrD,cAAI,MAAM,MAAM,GAAG;AACf,mBAAO,KAAK,QAAQ,UAChB,YACA,IAAI,MAAM,8BAA8B,KAAK,CAAC,EAAE,SAAS,OAAO,CAAC,EAAE,CAAC;UAE5E;AACA,eAAK,gBAAgB,IAAI,OAAO,MAAM;AACtC,kBAAQ,WAAW,YAAY,IAAI;QACvC,SAAS,KAAK;AACV,kBAAQ,UAAU,YAAY,IAAI,MAAM,uBAAuB,EAAE,KAAK,IAAI,OAAO,EAAE,CAAC;QACxF;MACJ,WAAW,cAAc,KAAK,kBAAkB;AAC5C,YAAI;AACA,gBAAM,QAAQ,KAAK,MAAM,KAAK,CAAC,EAAE,SAAS,OAAO,CAAC;AAClD,gBAAM,SAAS,SAAS,KAAK,CAAC,EAAE,SAAS,OAAO,GAAG,EAAE;AACrD,cAAI,MAAM,MAAM,GAAG;AACf,mBAAO,KAAK,QAAQ,UAChB,YACA,IAAI,MAAM,8BAA8B,KAAK,CAAC,EAAE,SAAS,OAAO,CAAC,EAAE,CAAC;UAE5E;AACA,eAAK,YAAY,IAAI,QAAQ,KAAK;AAClC,kBAAQ,WAAW,YAAY,IAAI;QACvC,SAAS,KAAK;AACV,kBAAQ,UAAU,YAAY,IAAI,MAAM,qBAAqB,EAAE,KAAK,IAAI,OAAO,EAAE,CAAC;QACtF;MACJ,OAAO;AACH,gBAAQ,UACJ,YACA,IAAI,MAAM,mCAAmC,SAAS,UAAU,KAAK,UAAU,IAAI,CAAC,EAAE,CAAC;MAE/F;IACJ,CAAC;AAGD,YAAQ,GAAG,OAAO,CAAC,MAAM,eAAc;AACnC,YAAM,EAAE,IAAI,UAAS,IAAK,KAAK,aAAa,KAAK,CAAC,CAAC;AACnD,UAAI,cAAc,KAAK,iBAAiB;AACpC,aAAK,UAAU,EAAE;AACjB,gBAAQ,YAAY,YAAY,CAAC;MACrC,WAAW,cAAc,KAAK,kBAAkB;AAC5C,aAAK,gBAAgB,EAAE;AACvB,gBAAQ,YAAY,YAAY,CAAC;MACrC,OAAO;AACH,gBAAQ,UACJ,YACA,IAAI,MAAM,iCAAiC,SAAS,UAAU,KAAK,UAAU,IAAI,CAAC,EAAE,CAAC;MAE7F;IACJ,CAAC;AAGD,YAAQ,GAAG,QAAQ,CAAC,MAAM,eAAc;AACpC,UAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ;AACvB,eAAO,KAAK,QAAQ,UAAU,YAAY,CAAA,CAAE;MAChD;AACA,YAAM,EAAE,IAAI,UAAS,IAAK,KAAK,aAAa,KAAK,CAAC,CAAC;AACnD,UAAI,cAAc,KAAK,iBAAiB;AAEpC,YAAI,UAAU;AACd,YAAI,QAAQ,UAAU,GAAG,CAAC,MAAM,KAAK,iBAAiB;AAClD,oBAAU,QAAQ,UAAU,KAAK,gBAAgB,MAAM;QAC3D;AACA,cAAM,OAAO,KAAK,SAAS,OAAO;AAClC,cAAM,SAAS,KAAK,IAAI,CAAAA,QAAM,KAAK,kBAAkBA,GAAE;AACvD,gBAAQ,UAAU,YAAY,MAAM;MACxC,OAAO;AACH,gBAAQ,UACJ,YACA,IAAI,MAAM,kCAAkC,SAAS,UAAU,KAAK,UAAU,IAAI,CAAC,EAAE,CAAC;MAE9F;IACJ,CAAC;AAGD,YAAQ,GAAG,cAAc,CAAC,MAAM,eAAc;AAC1C,YAAM,EAAE,IAAI,UAAS,IAAK,KAAK,aAAa,KAAK,CAAC,CAAC;AACnD,UAAI,cAAc,KAAK,cAAc;AACjC,aAAK,2BAA2B,SAAS,GAAG,OAAO,KAAK,eAAe,CAAC;AACxE,gBAAQ,UAAU,YAAY,CAAC,cAAc,KAAK,CAAC,GAAG,CAAC,CAAC;MAC5D,WAAW,cAAc,KAAK,cAAc;AACxC,aAAK,uBAAuB,SAAS,GAAG,OAAO,KAAK,eAAe,CAAC;AACpE,gBAAQ,UAAU,YAAY,CAAC,cAAc,KAAK,CAAC,GAAG,CAAC,CAAC;MAC5D,WAAW,cAAc,KAAK,iBAAiB;AAC3C,YAAI;AACA,eAAK,oBAAoB,SAAS,EAAE;AACpC,kBAAQ,UAAU,YAAY,CAAC,cAAc,KAAK,CAAC,GAAG,CAAC,CAAC;QAC5D,SAAS,GAAG;AACR,kBAAQ,UAAU,YAAY,CAAC;QACnC;MACJ,WAAW,cAAc,KAAK,eAAe;AACzC,aAAK,eAAe,SAAS,EAAE;AAC/B,gBAAQ,UAAU,YAAY,CAAC,cAAc,KAAK,CAAC,GAAG,CAAC,CAAC;MAC5D,OAAO;AACH,gBAAQ,UACJ,YACA,IAAI,MAAM,wCAAwC,SAAS,UAAU,KAAK,UAAU,IAAI,CAAC,EAAE,CAAC;MAEpG;IACJ,CAAC;AAGD,YAAQ,GAAG,gBAAgB,CAAC,MAAM,eAAc;AAC5C,YAAM,EAAE,IAAI,UAAS,IAAK,KAAK,aAAa,KAAK,CAAC,CAAC;AACnD,UAAI,cAAc,KAAK,cAAc;AACjC,aAAK,6BAA6B,SAAS,GAAG,OAAO,KAAK,eAAe,CAAC;AAC1E,gBAAQ,UAAU,YAAY,CAAC,gBAAgB,KAAK,CAAC,GAAG,CAAC,CAAC;MAC9D,WAAW,cAAc,KAAK,cAAc;AACxC,aAAK,yBAAyB,SAAS,GAAG,OAAO,KAAK,eAAe,CAAC;AACtE,gBAAQ,UAAU,YAAY,CAAC,gBAAgB,KAAK,CAAC,GAAG,CAAC,CAAC;MAC9D,WAAW,cAAc,KAAK,iBAAiB;AAC3C,aAAK,sBAAsB,SAAS,EAAE;AACtC,gBAAQ,UAAU,YAAY,CAAC,gBAAgB,KAAK,CAAC,GAAG,CAAC,CAAC;MAC9D,OAAO;AACH,gBAAQ,UACJ,YACA,IAAI,MAAM,0CAA0C,SAAS,UAAU,KAAK,UAAU,IAAI,CAAC,EAAE,CAAC;MAEtG;IACJ,CAAC;AAGD,YAAQ,GAAG,aAAa,CAAC,MAAM,eAAc;AACzC,UAAI,KAAK,CAAC,EAAE,WAAW,aAAa,GAAG;AAEnC,gBAAQ,UAAU,YAAY,CAAC,aAAa,KAAK,CAAC,GAAG,CAAC,CAAC;MAC3D,OAAO;AACH,gBAAQ,UAAU,YAAY,IAAI,MAAM,6BAA6B,KAAK,CAAC,CAAC,EAAE,CAAC;MACnF;IACJ,CAAC;AAGD,YAAQ,GAAG,UAAU,CAAC,MAAM,eAAc;AACtC,UACI,OAAO,KAAK,CAAC,MAAM,YACnB,KAAK,CAAC,EAAE,YAAW,MAAO,SAC1B,KAAK,CAAC,MAAM,0BACd;AAEE,gBAAQ,WAAW,YAAY,IAAI;MACvC,OAAO;AACH,gBAAQ,UAAU,YAAY,IAAI,MAAM,0BAA0B,KAAK,UAAU,IAAI,CAAC,EAAE,CAAC;MAC7F;IACJ,CAAC;AAGD,YAAQ,GAAG,UAAU,CAAC,MAAM,eAAc;AACtC,UAAI,KAAK,CAAC,MAAM,aAAa,OAAO,KAAK,CAAC,MAAM,UAAU;AACtD,yBAAiB,KAAK,CAAC;AACvB,uBAAe;AACf,gBAAQ,WAAW,YAAY,IAAI;MACvC,WAAW,KAAK,CAAC,MAAM,WAAW;AAC9B,YAAI,kBAAkB,OAAO,mBAAmB,UAAU;AACtD,kBAAQ,WAAW,YAAY,cAAc;QACjD,OAAO;AAEH,kBAAQ,SAAS,UAAU;QAC/B;MACJ,OAAO;AACH,gBAAQ,UAAU,YAAY,IAAI,MAAM,0BAA0B,KAAK,UAAU,IAAI,CAAC,EAAE,CAAC;MAC7F;IACJ,CAAC;AAED,YAAQ,GAAG,SAAS,SAAO,KAAK,IAAI,KAAK,GAAG,YAAY,kBAAkB,GAAG,EAAE,CAAC;EACpF;;;;;;EAOA,aAAU;AACN,WAAO,KAAK;EAChB;;;;EAKA,MAAM,UAAO;AACT,QAAI,KAAK,QAAQ;AACb,iBAAW,KAAK,OAAO,KAAK,KAAK,iBAAiB,GAAG;AACjD,aAAK,kBAAkB,CAAC,EAAE,MAAK;AAC/B,eAAO,KAAK,kBAAkB,CAAC;MACnC;AAEA,YAAM,IAAI,QAAQ,aAAU;AACxB,YAAI,CAAC,KAAK,QAAQ;AACd,iBAAO,KAAK,QAAO;QACvB;AACA,YAAI;AACA,eAAK,OAAO,MAAM,MAAM,QAAO,CAAE;QACrC,SAAS,GAAG;AACR,kBAAQ,IAAI,EAAE,OAAO;AACrB,kBAAO;QACX;MACJ,CAAC;IACL;AACA,UAAM,MAAM,QAAO;EACvB;;;;;;EAOA,YAAY,QAAM;AACd,SAAK,SAAS,WAAW,mBACrB,KAAK,IAAI,MAAM,GAAG,KAAK,SAAS,uCAAuC;AAE3E,UAAM,UAAU;MACZ,KAAK,KAAK;MACV,UAAU,GAAG,KAAK,SAAS;MAC3B,iBAAiB;MACjB,iBAAiB,KAAK,SAAS,WAAW;;AAE9C,UAAM,UAAU,IAAI,4BAAa,QAAQ,OAAO;AAChD,SAAK,cAAc,OAAO;AAE1B,SAAK,kBAAkB,GAAG,OAAO,aAAa,IAAI,OAAO,UAAU,EAAE,IAAI;AAEzE,WAAO,GAAG,SAAS,MAAK;AACpB,UAAI,KAAK,kBAAkB,GAAG,OAAO,aAAa,IAAI,OAAO,UAAU,EAAE,GAAG;AACxE,eAAO,KAAK,kBAAkB,GAAG,OAAO,aAAa,IAAI,OAAO,UAAU,EAAE;MAChF;IACJ,CAAC;EACL;;;;;;;EAQA,iBAAiB,UAAQ;AACrB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAU;AACnC,UAAI,SAAS,QAAQ;AACjB,eAAO,IAAI,MAAM,sCAAsC,CAAC;MAC5D;AACA,UAAI;AACA,aAAK,SAAS,gBAAAC,QAAI,aAAY;AAC9B,aAAK,OAAO,GAAG,SAAS,SACpB,KAAK,IAAI,KACL,GAAG,KAAK,SAAS,IAAI,SAAS,SAAS,YAAY,EAAE,0CACjD,SAAS,QAAQ,IACrB,KAAK,GAAG,EAAE,CACb;AAEL,aAAK,OAAO,GAAG,cAAc,YAAU,KAAK,YAAY,MAAM,CAAC;AAE/D,aAAK,OAAO,OACR,SAAS,QAAQ,KACjB,SAAS,SAAS,kBAAc,8BAAe,IAAK,SAAS,OAAO,SAAS,OAAO,QACpF,MAAM,QAAO,CAAE;MAEvB,SAAS,KAAK;AACV,eAAO,GAAG;MACd;IACJ,CAAC;EACL;;",
  "names": ["id", "net"]
}
