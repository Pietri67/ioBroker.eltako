{
  "version": 3,
  "sources": ["../../../../src/lib/states/statesInMemJsonlDB.js"],
  "sourcesContent": ["/**\n *      States DB in memory - Server\n *\n *      Copyright 2013-2024 bluefox <dogafox@gmail.com>\n *\n *      MIT License\n *\n */\n\nimport { StatesInMemoryFileDB } from '@iobroker/db-states-file';\nimport { JsonlDB } from '@alcalzone/jsonl-db';\nimport path from 'node:path';\nimport fs from 'node:fs';\nimport os from 'node:os';\nimport { tools } from '@iobroker/js-controller-common-db';\n\n// settings = {\n//    change:    function (id, state) {},\n//    connected: function (nameOfServer) {},\n//    logger: {\n//           silly: function (msg) {},\n//           debug: function (msg) {},\n//           info:  function (msg) {},\n//           warn:  function (msg) {},\n//           error: function (msg) {}\n//    },\n//    connection: {\n//           dataDir: 'relative path'\n//    },\n//    auth: null, //unused\n//    secure: true/false,\n//    certificates: as required by createServer\n//    port: 9000,\n//    host: localhost\n// };\n//\n\n/**\n * Normalizes options for the JsonlDB\n *\n * @param conf The jsonlOptions options from iobroker.json\n * @returns\n */\nfunction normalizeJsonlOptions(conf = {}) {\n    const ret = {\n        autoCompress: {\n            // Compress when the number of uncompressed entries has grown a lot\n            sizeFactor: 10,\n            sizeFactorMinimumSize: 50000,\n            // Compress at least daily to avoid a huge file when DBs have few objects\n            // but big binary states are updated regularly\n            intervalMs: 1000 * 60 * 60 * 23,\n        },\n        ignoreReadErrors: true,\n        throttleFS: {\n            intervalMs: 60000,\n            maxBufferedCommands: 2000,\n        },\n        lockfile: {\n            // 5 retries starting at 250ms add up to just above 2s,\n            // so the DB has 3 more seconds to load all data if it wants to stay within the 5s connectionTimeout\n            retries: 5,\n            retryMinTimeoutMs: 250,\n            // This makes sure the DB stays locked for maximum 2s even if the process crashes\n            staleMs: 2000,\n        },\n    };\n\n    // Be really careful what we allow here. Incorrect settings may cause problems in production.\n    if (tools.isObject(conf.autoCompress)) {\n        const ac = conf.autoCompress;\n        // Letting the DB grow more than 100x is risky\n        if (typeof ac.sizeFactor === 'number' && ac.sizeFactor >= 2 && ac.sizeFactor <= 100) {\n            ret.autoCompress.sizeFactor = ac.sizeFactor;\n        }\n        // Also we should definitely compress once the DB has reached 200k lines or it might grow too big\n        if (\n            typeof ac.sizeFactorMinimumSize === 'number' &&\n            ac.sizeFactorMinimumSize >= 0 &&\n            ac.sizeFactorMinimumSize <= 200000\n        ) {\n            ret.autoCompress.sizeFactorMinimumSize = ac.sizeFactorMinimumSize;\n        }\n    }\n    if (tools.isObject(conf.throttleFS)) {\n        const thr = conf.throttleFS;\n        // Don't write more often than every second and write at least once every hour\n        if (typeof thr.intervalMs === 'number' && thr.intervalMs >= 1000 && thr.intervalMs <= 3600000) {\n            ret.throttleFS.intervalMs = thr.intervalMs;\n        }\n        // Don't keep too much in memory - 100k changes are more than enough\n        if (\n            typeof thr.maxBufferedCommands === 'number' &&\n            thr.maxBufferedCommands >= 0 &&\n            thr.maxBufferedCommands <= 100000\n        ) {\n            ret.throttleFS.maxBufferedCommands = thr.maxBufferedCommands;\n        }\n    }\n\n    return ret;\n}\n\n/**\n * This class inherits InMemoryFileDB class and adds all relevant logic for states\n * including the available methods for use by js-controller directly\n */\nexport class StatesInMemoryJsonlDB extends StatesInMemoryFileDB {\n    constructor(settings) {\n        settings = settings || {};\n        // Not really used\n        settings.fileDB = {\n            fileName: 'states.json',\n            backupDirName: 'backup-objects',\n        };\n\n        const jsonlOptions = normalizeJsonlOptions(settings.connection.jsonlOptions);\n        settings.jsonlDB = {\n            fileName: 'states.jsonl',\n        };\n        super(settings);\n\n        this._db = new JsonlDB(path.join(this.dataDir, settings.jsonlDB.fileName), jsonlOptions);\n    }\n\n    async open() {\n        if (!(await this._maybeMigrateFileDB())) {\n            await this._db.open();\n        }\n\n        // Create an object-like wrapper around the internal Map\n        this.dataset = new Proxy(this._db, {\n            /**\n             * @param target\n             * @param prop\n             */\n            get(target, prop) {\n                return target.get(prop);\n            },\n            /**\n             * @param target\n             * @param prop\n             */\n            has(target, prop) {\n                return target.has(prop);\n            },\n            /**\n             * @param target\n             * @param prop\n             * @param value\n             */\n            set(target, prop, value) {\n                target.set(prop, value);\n                return true;\n            },\n            /**\n             * @param target\n             * @param prop\n             */\n            deleteProperty(target, prop) {\n                return target.delete(prop);\n            },\n            ownKeys(target) {\n                return [...target.keys()];\n            },\n            /**\n             * @param target\n             * @param prop\n             */\n            getOwnPropertyDescriptor(target, prop) {\n                if (!target.has(prop)) {\n                    return undefined;\n                }\n                return {\n                    configurable: true,\n                    enumerable: true,\n                    writable: true,\n                    value: target.get(prop),\n                };\n            },\n        });\n\n        if (this.settings.backup && this.settings.backup.period && !this.settings.backup.disabled) {\n            this._backupInterval = setInterval(() => {\n                this.saveBackup();\n            }, this.settings.backup.period);\n        }\n    }\n\n    /**\n     * Checks if an existing file DB should be migrated to JSONL\n     *\n     * @returns true if the file DB was migrated. false if not.\n     * If this returns true, the jsonl DB was opened and doesn't need to be opened again.\n     */\n    async _maybeMigrateFileDB() {\n        const jsonlFileName = path.join(this.dataDir, this.settings.jsonlDB.fileName);\n        const jsonFileName = path.join(this.dataDir, this.settings.fileDB.fileName);\n        const bakFileName = path.join(this.dataDir, `${this.settings.fileDB.fileName}.bak`);\n\n        // Check the timestamps of each file, defaulting to 0 if they don't exist\n        let jsonlTimeStamp = 0;\n        let jsonTimeStamp = 0;\n        let bakTimeStamp = 0;\n        try {\n            const stat = fs.statSync(jsonlFileName);\n            if (stat.isFile()) {\n                jsonlTimeStamp = stat.mtime;\n            }\n        } catch {\n            // ignore\n        }\n        try {\n            const stat = fs.statSync(jsonFileName);\n            if (stat.isFile()) {\n                jsonTimeStamp = stat.mtime;\n            }\n        } catch {\n            // ignore\n        }\n        try {\n            const stat = fs.statSync(bakFileName);\n            if (stat.isFile()) {\n                bakTimeStamp = stat.mtime;\n            }\n        } catch {\n            // ignore\n        }\n\n        // Figure out which file needs to be imported\n        let importFilename;\n        if (jsonTimeStamp > 0 && jsonTimeStamp >= bakTimeStamp && jsonTimeStamp >= jsonlTimeStamp) {\n            importFilename = jsonFileName;\n        } else if (bakTimeStamp > 0 && bakTimeStamp >= jsonTimeStamp && bakTimeStamp >= jsonlTimeStamp) {\n            importFilename = bakFileName;\n        } else {\n            // None of the File DB files are newer than the JSONL file\n            // There is nothing to restore, we're done\n            return false;\n        }\n\n        await this._db.open();\n        this._db.clear();\n        await this._db.importJson(importFilename);\n\n        // And rename the existing files to avoid redoing the work next time\n        if (fs.existsSync(jsonFileName)) {\n            try {\n                fs.renameSync(jsonFileName, `${jsonFileName}.migrated`);\n            } catch {\n                // ignore\n            }\n        }\n        if (fs.existsSync(bakFileName)) {\n            try {\n                fs.renameSync(bakFileName, `${bakFileName}.migrated`);\n            } catch {\n                // ignore\n            }\n        }\n\n        // Signal to the caller that the DB is already open\n        return true;\n    }\n\n    async saveState() {\n        // Nothing to do, the DB saves behind the scenes\n    }\n\n    // Is regularly called and stores a compressed backup of the DB\n    async saveBackup() {\n        const now = Date.now();\n        const tmpBackupFileName = path.join(os.tmpdir(), `${this.getTimeStr(now)}_${this.settings.jsonlDB.fileName}`);\n        const backupFileName = path.join(\n            this.backupDir,\n            `${this.getTimeStr(now)}_${this.settings.jsonlDB.fileName}.gz`,\n        );\n\n        if (!this._db.isOpen) {\n            this.log.warn(`${this.namespace} Cannot save backup ${backupFileName}: DB is closed`);\n            return;\n        }\n\n        try {\n            if (fs.existsSync(backupFileName)) {\n                return;\n            }\n\n            // Create a DB dump\n            await this._db.dump(tmpBackupFileName);\n            // and zip it\n            await tools.compressFileGZip(tmpBackupFileName, backupFileName, { deleteInput: true });\n            // figure out if older files need to be deleted\n            this.deleteOldBackupFiles(this.settings.jsonlDB.fileName);\n        } catch (e) {\n            this.log.error(`${this.namespace} Cannot save backup ${backupFileName}: ${e.message}`);\n        }\n    }\n\n    async destroy() {\n        await super.destroy();\n\n        if (this._backupInterval) {\n            clearInterval(this._backupInterval);\n        }\n        if (this._db) {\n            await this._db.close();\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["path", "fs", "os"]
}
