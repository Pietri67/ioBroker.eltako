/**
 *      List different objects for CLI
 *
 *      Copyright 2013-2024 bluefox <dogafox@gmail.com>
 *
 *      MIT License
 *
 */
import type { Client as StatesRedisClient } from '@iobroker/db-states-redis';
import type { Client as ObjectsRedisClient } from '@iobroker/db-objects-redis';
interface File {
    adapter: string;
    path: string;
    file: ioBroker.ReadDirResult;
}
interface FlagObject {
    alive?: boolean;
    enabled?: boolean;
    disabled?: boolean;
    port?: number;
    ssl?: boolean;
    ip?: string;
}
interface CLIListOptions {
    states: StatesRedisClient;
    objects: ObjectsRedisClient;
    processExit: (exitCode?: number) => void;
}
export type ListType = 'objects' | 'o' | 'states' | 's' | 'adapters' | 'a' | 'instances' | 'i' | 'users' | 'u' | 'groups' | 'g' | 'hosts' | 'h' | 'enums' | 'e' | 'files' | 'f';
export declare class List {
    private config;
    private objects;
    private states;
    private readonly processExit;
    constructor(options: CLIListOptions);
    private static _perm2str;
    showFileHeader(adapter?: string): void;
    showFile(adapter: string, path: string, file: ioBroker.ReadDirResult): void;
    showObjectHeader(): void;
    showObject(obj: ioBroker.AnyObject): void;
    listDirectory(adapter: string, path: string | null | undefined, allFiles?: File[] | ((allFiles: File[]) => void), callback?: (allFiles: File[]) => void): void;
    sortFiles(a: File, b: File): number;
    listAdaptersFiles(adapters: string[], filter?: null | string, callback?: () => void): void | Promise<void>;
    private _readOnlineState;
    list(type: ListType, filter: string, flags: FlagObject): void;
}
export {};
//# sourceMappingURL=setupList.d.ts.map