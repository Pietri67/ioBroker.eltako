import { EXIT_CODES } from '@iobroker/js-controller-common';
import type { Client as StatesRedisClient } from '@iobroker/db-states-redis';
import type { Client as ObjectsRedisClient } from '@iobroker/db-objects-redis';
import type { CleanDatabaseHandler, ProcessExitCallback, RestartController } from '../_Types.js';
export interface CLIBackupRestoreOptions {
    dbMigration?: boolean;
    states: StatesRedisClient;
    objects: ObjectsRedisClient;
    processExit: ProcessExitCallback;
    cleanDatabase: CleanDatabaseHandler;
    restartController: RestartController;
}
export interface RestoreBackupReturnValue {
    /** Exit code of the process */
    exitCode: EXIT_CODES;
    /** The new states db connection after restore */
    states: StatesRedisClient;
    /** The new objects db connection after restore */
    objects: ObjectsRedisClient;
}
export interface RestoreBackupOptions {
    /** backup name, absolute path or index */
    name: string | number;
    /** if force flag is set, js-controller is allowed to have a different version */
    force: boolean;
    /** skip adapter deletion, e.g. for setup custom db migration */
    dontDeleteAdapters: boolean;
}
export declare class BackupRestore {
    private readonly hostname;
    private readonly tmpDir;
    private readonly bkpDir;
    private objects;
    private states;
    private readonly processExit;
    private readonly restartController;
    private readonly cleanDatabase;
    private readonly dbMigration;
    /** these adapters will be reinstalled during restore, while others will be installed after next controller start */
    private readonly PRESERVE_ADAPTERS;
    private upload;
    private configParts;
    private readonly configDir;
    /** Placeholder inserted during backup creation if no custom hostname defined */
    private readonly HOSTNAME_PLACEHOLDER;
    /** Same as HOSTNAME_PLACEHOLDER but used in replace method */
    private readonly HOSTNAME_PLACEHOLDER_REPLACE;
    /** Regex to replace all occurrences of the HOSTNAME_PLACEHOLDER */
    private readonly HOSTNAME_PLACEHOLDER_REGEX;
    /** Postfix for backup name */
    private readonly BACKUP_POSTFIX;
    constructor(options: CLIBackupRestoreOptions);
    private _copyFile;
    copyDir(id: string, srcPath: string, destPath: string): Promise<void>;
    /**
     * Get the directory where backups should be stored
     */
    static getBackupDir(): string;
    copyFileSync(source: string, target: string): void;
    copyFolderRecursiveSync(source: string, target: string): void;
    /**
     * Removes the temporary backup directory, never throws
     */
    private removeTempBackupDir;
    /**
     * Pack and compress the backup
     *
     * @param name - backup name
     */
    private _packBackup;
    /**
     * Creates backup and stores with given name
     *
     * @param name - name of the backup
     * @param noConfig - do not store configs (used by setup custom migration)
     */
    createBackup(name: string, noConfig?: boolean): Promise<string>;
    /**
     * Helper to restore raw state
     *
     * @param stateId - state ID
     * @param stateObject - the corresponding state object
     */
    private _setStateHelper;
    /**
     * Sets all objects to the db and disables all adapters
     *
     * @param object - object to be set
     */
    private _setObjHelper;
    /**
     * Creates all provided object if non-existing
     *
     * @param objectList - list of objects to be created
     */
    private _reloadAdapterObject;
    private _reloadAdaptersObjects;
    private _uploadUserFiles;
    /**
     * Preprocess object before storing it in the backup file
     *
     * @param options object and host information
     */
    private _preprocessObject;
    private _copyBackupedFiles;
    /**
     * Restore JSONL backup after controller has been stopped
     *
     * @param options The restore options
     */
    private _restoreJsonlBackup;
    /**
     * Restore after controller has been stopped
     *
     * @param options The restore options
     */
    private _restoreAfterStop;
    /**
     * Connects to the database which is configured in `iobroker.json`
     * Meant to be used after the configuration file has been overwritten
     *
     * @param config The new config, needed for logging purposes
     */
    private connectToNewDatabase;
    /**
     * Removes all adapters
     */
    private _removeAllAdapters;
    /**
     * Ensure that installed controller version matches version in backup
     *
     * @param controllerDir - directory of js-controller
     * @param backupHostname - hostname in backup file
     * @param backupObjects - the objects contained in the backup
     * @param force - if force is true, only log
     */
    private _ensureCompatibility;
    /**
     * Returns all backups as array
     */
    listBackups(): string[];
    /**
     * Validates a JSONL-style backup and all json files inside the backup (in temporary directory)
     *
     * @param noConfig if the backup does not contain a `config.json` (used by setup custom migration)
     */
    private _validateTempDirectory;
    /**
     * Validate that the created JSONL files in the temporary directories are parseable
     */
    private _validateDatabaseFiles;
    /**
     * Validates the given backup.json and all json files in the backup, calls processExit afterwards
     *
     * @param _name - index or name of the backup
     */
    validateBackup(_name: string | number): Promise<void>;
    /**
     * Validate an unpacked legacy backup in the temporary directory
     */
    private _validateLegacyTempDir;
    /**
     * Checks a directory for json files and validates them, steps down recursive in subdirectories
     *
     * @param path - path to the directory
     * @param verbose - if logging should be verbose
     */
    private _checkDirectory;
    /**
     * Restores a backup
     *
     * @param options Restore options
     */
    restoreBackup(options: RestoreBackupOptions): Promise<RestoreBackupReturnValue>;
    /**
     * This method checks if adapter of PRESERVE_ADAPTERS exists, and re-installs them if this is the case
     */
    private _restorePreservedAdapters;
}
//# sourceMappingURL=setupBackup.d.ts.map