import { CLICommand, type CLICommandOptions } from './cliCommand.js';
import type { Client as ObjectsClient } from '@iobroker/db-objects-redis';
import type { Client as StatesClient } from '@iobroker/db-states-redis';
/** Command iobroker object ... */
export declare class CLIObjects extends CLICommand {
    constructor(options: CLICommandOptions);
    /**
     * Executes a command
     *
     * @param args
     */
    execute(args: any[]): void;
    /**
     * Activates the usage of Redis Sets
     */
    activateSets(): void;
    /**
     * Deactivates the usage of Redis Sets
     */
    deactivateSets(): void;
    /**
     * Get the protocol version
     */
    getDBVersion(): void;
    /**
     * Set protocol version
     */
    setDBVersion(): void;
    /**
     * Changes access rights for all objects matching the pattern
     *
     * @param args
     */
    chmod(args: any[]): void;
    /**
     * Changes owner for all objects matching the pattern
     *
     * @param args
     */
    chown(args: any[]): void;
    /**
     * Lists all objects matching a pattern and their access rights
     *
     * @param args
     */
    list(args: any[]): void;
    /**
     * Retrieves an object or its property from the DB and prints it
     *
     * @param args
     */
    get(args: any[]): void;
    /**
     * Updates an object or its property with the given value
     *
     * @param args
     */
    set(args: any[]): void;
    /**
     * Encrypts all newly set properties of encryptedNative - currently customized for propPath
     *
     * @param objects - objects db instance
     * @param res - object which will be adapted
     * @param propPath - path of the changed property
     * @param value - value which has been newly set to the property
     */
    private _autoEncrypt;
    /**
     * Extends an object with the given value
     *
     * @param args
     */
    extend(args: any[]): void;
    /**
     * Collects all object for specific path
     *
     * @param objects class
     * @param params parameters for getObjectView
     */
    _collectObjects(objects: ObjectsClient, params: ioBroker.GetObjectViewParams): Promise<ioBroker.AnyObject[]>;
    /**
     * Delete all object from list sequentially
     *
     * @param objects class
     * @param ids IDs
     * @param callback
     */
    _deleteObjects(objects: ObjectsClient, ids: string[], callback: (exitCode: number) => void): Promise<void>;
    /**
     * Deletes an object
     *
     * @param args
     */
    delete(args: any[]): void;
    /**
     * Prints a list of objects and its access properties
     *
     * @param objects objects db
     * @param states states db
     * @param err An error (if one occurred)
     * @param objList The object list to print
     */
    printObjectList(objects: ObjectsClient, states: StatesClient, err: string | undefined, objList?: ioBroker.AnyObject[]): Promise<void>;
}
//# sourceMappingURL=cliObjects.d.ts.map