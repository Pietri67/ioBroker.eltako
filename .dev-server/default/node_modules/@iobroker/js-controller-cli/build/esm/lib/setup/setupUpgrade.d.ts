import type { Client as ObjectsInRedisClient } from '@iobroker/db-objects-redis';
import type { Client as StatesInRedisClient } from '@iobroker/db-states-redis';
import type { ProcessExitCallback } from '../../lib/_Types.js';
interface CLIUpgradeOptions {
    processExit: ProcessExitCallback;
    objects: ObjectsInRedisClient;
    states: StatesInRedisClient;
    params: Record<string, any>;
}
export declare class Upgrade {
    private readonly hostname;
    private readonly upload;
    private readonly install;
    private readonly objects;
    private readonly processExit;
    constructor(options: CLIUpgradeOptions);
    /**
     * Sorts the adapters by their dependencies and then upgrades multiple adapters from the given repository url
     *
     * @param repo the repository content
     * @param list list of adapters to upgrade
     * @param forceDowngrade flag to force downgrade
     * @param autoConfirm automatically confirm the tty questions (bypass)
     */
    upgradeAdapterHelper(repo: Record<string, any>, list: string[], forceDowngrade: boolean, autoConfirm: boolean): Promise<void>;
    /**
     * Checks that local and global deps are fulfilled else rejects promise
     *
     * @param deps local dependencies - required on this host
     * @param globalDeps global dependencies - required on one of the hosts
     */
    private _checkDependencies;
    /**
     * Try to async upgrade adapter from a given source with some checks
     *
     * @param repoUrlOrObject url of the selected repository or parsed repo, if undefined, use current active repository
     * @param adapter name of the adapter (can also include version like web@3.0.0)
     * @param forceDowngrade flag to force downgrade
     * @param autoConfirm automatically confirm the tty questions (bypass)
     * @param upgradeAll if true, this is an upgrade all call, we don't do major upgrades if no tty
     */
    upgradeAdapter(repoUrlOrObject: string | Record<string, any> | undefined, adapter: string, forceDowngrade: boolean, autoConfirm: boolean, upgradeAll: boolean): Promise<void>;
    /**
     * Upgrade the js-controller
     *
     * @param repoUrl the repo or url
     * @param forceDowngrade if downgrades are allowed
     * @param controllerRunning if controller is currently running
     */
    upgradeController(repoUrl: string, forceDowngrade: boolean, controllerRunning: boolean): Promise<void>;
}
export {};
//# sourceMappingURL=setupUpgrade.d.ts.map