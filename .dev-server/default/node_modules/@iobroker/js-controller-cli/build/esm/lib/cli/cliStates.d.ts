import { CLICommand, type CLICommandOptions } from './cliCommand.js';
type ResultTransform = (input: ioBroker.State) => string;
/** Command iobroker state ... */
export declare class CLIStates extends CLICommand {
    constructor(options: CLICommandOptions);
    /**
     * Executes a command
     *
     * @param args parsed cli args
     */
    execute(args: any[]): void;
    /**
     * Get the protocol version
     */
    getDBVersion(): void;
    /**
     * Set protocol version
     */
    setDBVersion(): void;
    /**
     * Checks if state is a binary state
     *
     * @param id id of the state
     * @param objects the objects db
     * @param _obj cached object
     */
    private _isBinary;
    /**
     * Returns the value of a state
     *
     * @param args parsed cli arguments
     * @param resultTransform transform function for result
     */
    get_(args: any[], resultTransform: ResultTransform): void;
    /**
     * Set state in database
     *
     * @param args parsed cli arguments
     */
    set_(args: any[]): void;
    /**
     * Deletes a state
     *
     * @param args parsed cli arguments
     */
    delete(args: any[]): void;
}
export {};
//# sourceMappingURL=cliStates.d.ts.map