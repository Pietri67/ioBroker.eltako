import type { Client as ObjectsRedisClient } from '@iobroker/db-objects-redis';
import { MHClient, type BrowseResultEntry } from './multihostClient.js';
interface MHParams {
    secure?: boolean;
    persist?: boolean;
    debug?: boolean;
}
export interface CLIMultihostOptions {
    objects: ObjectsRedisClient;
    params?: MHParams;
}
export declare class Multihost {
    private readonly configName;
    private params;
    private objects;
    constructor(options: CLIMultihostOptions);
    /**
     * Retrieve config (iobroker.json content)
     */
    getConfig(): ioBroker.IoBrokerJson;
    /**
     * Show hosts on CLI
     *
     * @param list list of hosts
     */
    showHosts(list: BrowseResultEntry[]): void;
    /**
     * Start MH browsing
     */
    browse(): Promise<BrowseResultEntry[]>;
    /**
     * Show MH state on CLI
     *
     * @param config iob config
     * @param changed if config has changed
     */
    private showMHState;
    /**
     * Enables or disables the multihost discovery server in the config json
     *
     * @param isEnable - if the server should be activated or deactivated
     * @param callback - callback function to be executed
     */
    enable(isEnable: boolean, callback: (err?: Error) => void): void;
    /**
     * Show the MH status
     */
    status(): void;
    /**
     * Read password from cli
     */
    readPassword(): string;
    /**
     * Connect to given MH server
     *
     * @param mhClient mhclient used for connection
     * @param ip ip address of server
     * @param pass password
     * @param callback
     */
    connectHelper(mhClient: MHClient, ip: string, pass: string, callback: (err?: Error) => void): void;
    /**
     * Connect to MH Server
     *
     * @param index index of host to connect to
     * @param pass password
     * @param callback
     */
    connect(index: number | null, pass: string | null, callback: (err?: Error, list?: BrowseResultEntry[]) => void): Promise<void>;
}
export {};
//# sourceMappingURL=setupMultihost.d.ts.map