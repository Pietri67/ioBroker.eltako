declare const errorMessages: Readonly<{
    stateNotFound: (stateID: string, error?: string) => string;
    stateNotBinary: (stateId: string) => string;
    stateBinaryGetUnsupported: (stateId: string) => string;
    stateBinarySetUnsupported: (stateId: string) => string;
    objectNotFound: (objectID: string, error?: string) => string;
    cannotUpdateObject: (objectID: string, error?: string) => string;
    cannotDeleteObject: (objectID: string, error?: string) => string;
    cannotDeleteObjectFromEnums: (objectID: string, error?: string) => string;
    cannotChangeObject: (objectID: string, error?: string) => string;
    objectPropertyNotFound: (objectID: string, propPath: string) => string;
    invalidPropertyOrValue: () => "The property path or value is not valid. Please make sure the value is valid JSON.";
    invalidJSONValue: () => "The given value is not valid JSON.";
    unknownCommand: (prefix: string, command: string) => string;
    requiredArgumentMissing: (argName: string, exampleCommand?: string) => string;
    noInstancesFound: (adapter: string) => string;
    invalidInstance: (instance: string) => string;
    specifyInstance: (adapter: string, adapterInstances: string[]) => string;
    adapterDirNotFound: (adapter: string) => string;
    mainFileNotFound: (adapter: string) => string;
    cannotLoadIoPackage: (adapter: string) => string;
    wrongCommandPrefix: (wrongPrefix: string, command: string, correctPrefix?: string) => string;
    unknown: (err: string) => string;
    cannotChangeRunningSystem: () => string;
    noHostThisInMultihost: () => "Cannot use this command in multihost!";
    hostAlreadyExists: (hostname: string) => string;
    hostDoesNotExist: (hostname: string) => string;
    dontRemoveCurrentHost: (hostname: string) => string;
    pluginNotDefined: (pluginName: string, host: string, instance: string) => string;
    cert: (certName: string) => string;
    instanceAlreadyRunning: (instance: string) => string;
}>;
declare const successMessages: Readonly<{
    objectUpdated: (objectID: string) => string;
    objectDeleted: (objectID: string) => string;
    stateUpdated: (stateID: string, value: any, ack?: boolean) => string;
    stateDeleted: (stateID: string) => string;
    adapterStarted: (adapter: string) => string;
    adapterStopped: (adapter: string) => string;
    adapterRestarted: (adapter: string) => string;
    systemStatus: (isRunning: boolean) => string;
    controllerStatus: (isRunning: boolean) => string;
    messageSent: (adapter: string, command: string, message: string) => string;
    hostRenamed: (from: string, to: string) => string;
    instanceHostChanged: (instance: string, from: string, to: string) => string;
    hostDeleted: (hostname: string) => string;
    pluginEnabledOrDisabled: (pluginName: string, host: string, instance: string, status: boolean) => string;
    pluginStatus: (pluginName: string, host: string, instance: string, status: boolean) => string;
}>;
declare const warnings: Readonly<{
    noInstancesFoundOnHost: (hostname?: string) => string;
}>;
/** Prints predefined success messages on the CLI */
export declare const success: typeof successMessages;
export declare const warn: typeof warnings;
/** Prints predefined error messages on the CLI */
export declare const error: typeof errorMessages;
export {};
//# sourceMappingURL=messages.d.ts.map