import type { DbConnectAsyncReturn, DbConnectCallback } from '../_Types.js';
interface DbConnectParams {
    /** DB connect timeout, default is 10_000 */
    timeout?: number;
}
export declare function dbConnect(callback: DbConnectCallback): void;
export declare function dbConnect(params: Record<string, any>, callback: DbConnectCallback): void;
export declare function dbConnect(onlyCheck: boolean, params: Record<string, any>, callback: DbConnectCallback): void;
/**
 * Connects to the DB or tests the connection.
 *
 * @param onlyCheck if only connection check should be performed
 * @param params options used by dbConnect
 */
export declare function dbConnectAsync(onlyCheck: boolean, params?: DbConnectParams): Promise<DbConnectAsyncReturn>;
/**
 * Disconnect the database
 */
export declare function resetDbConnect(): Promise<void>;
/**
 * Exits the process and saves objects before exit - never resolves
 *
 * @param  exitCode code passed to process.exit
 */
export declare function exitApplicationSave(exitCode?: number): Promise<never>;
export {};
//# sourceMappingURL=dbConnection.d.ts.map