import type { ProcessExitCallback } from '../_Types.js';
import type { Client as ObjectsRedisClient } from '@iobroker/db-objects-redis';
export interface CLIUsersOptions {
    processExit: ProcessExitCallback;
    objects: ObjectsRedisClient;
}
export declare class Users {
    private readonly objects;
    private readonly processExit;
    constructor(options: CLIUsersOptions);
    /**
     * Adds new user to system
     *
     * @param username name of the user which will be added
     * @param pw password
     * @param callback
     */
    addUser(username: string, pw: string, callback: ioBroker.ErrorCallback): void;
    /**
     * Checks if user exists
     *
     * @param username name of the user to check existence of
     */
    isUser(username: string): Promise<boolean>;
    /**
     * Set password for specific user
     *
     * @param username name of the user to set password for
     * @param pw password
     * @param callback
     */
    setPassword(username: string, pw: string, callback: ioBroker.ErrorCallback): void;
    /**
     * Checks if password is correct for given user
     *
     * @param username name of the user to check password
     * @param pw password
     * @param callback
     */
    checkPassword(username: string, pw: string, callback: (err?: Error | null, isOk?: boolean) => void): void;
    /**
     * Deletes user from system
     *
     * @param username name of the user to delete
     * @param callback
     */
    delUser(username: string, callback: ioBroker.ErrorCallback): void;
    /**
     * Adds user to given group
     *
     * @param username user which will be added to the group
     * @param groupName name of the group where the user will be added to
     * @param callback
     */
    addUserToGroup(username: string, groupName: string, callback: ioBroker.ErrorCallback): void;
    /**
     * Add user via CLI prompt
     *
     * @param username user which sohuld be created
     * @param groupName default group for the new user
     * @param password user password
     * @param callback
     */
    addUserPrompt(username: string, groupName: string, password: string, callback: ioBroker.ErrorCallback): void;
    /**
     * Set password of user
     *
     * @param username name of the user to set password for
     * @param password password of user
     * @param callback
     */
    setUserPassword(username: string, password: string, callback: ioBroker.ErrorCallback): Promise<void>;
    /**
     * Enable user
     *
     * @param username name of the user which will be activated
     * @param enable true if it should be enabled else false
     * @param callback
     */
    enableUser(username: string, enable: boolean, callback: ioBroker.ErrorCallback): void;
    /**
     * Check if user password is valid
     *
     * @param username name of the user to check password for
     * @param password password to check
     * @param callback
     */
    checkUserPassword(username: string, password: string, callback: ioBroker.ErrorCallback): void;
    /**
     * Get user object
     *
     * @param username name of the user to get object of
     * @param callback
     */
    getUser(username: string, callback: (err?: Error | null, enabled?: boolean) => void): void;
    /**
     * Get group object
     *
     * @param group groupname
     * @param callback
     */
    getGroup(group: string, callback: (err?: Error | null, enabled?: boolean, members?: string[]) => void): void;
    /**
     * Enable or disable group by name
     *
     * @param group groupname
     * @param enable if enable or disable
     * @param callback
     */
    enableGroup(group: string, enable: boolean, callback: ioBroker.ErrorCallback): void;
    /**
     * Add new group
     *
     * @param group groupname
     */
    addGroup(group: string): Promise<void>;
    /**
     * Remove group
     *
     * @param group groupname
     * @param callback
     */
    delGroup(group: string, callback: ioBroker.ErrorCallback): void;
    /**
     * Remove user from given group
     *
     * @param username name of the user which will be removed from group
     * @param groupName name of the group user will be removed from
     * @param callback
     */
    removeUserFromGroup(username: string, groupName: string, callback: ioBroker.ErrorCallback): void;
}
//# sourceMappingURL=setupUsers.d.ts.map