"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cliCert_exports = {};
__export(cliCert_exports, {
  CLICert: () => CLICert
});
module.exports = __toCommonJS(cliCert_exports);
var import_cliCommand = require("./cliCommand.js");
var import_cliObjects = require("./cliObjects.js");
var messages = __toESM(require("./messages.js"), 1);
var import_js_controller_common = require("@iobroker/js-controller-common");
class CLICert extends import_cliCommand.CLICommand {
  constructor(options) {
    super(options);
  }
  /**
   * Executes a command
   *
   * @param args
   */
  execute(args) {
    const { callback, showHelp } = this.options;
    const command = args[0];
    switch (command) {
      case "renew":
      case "create":
        return this.create();
      case "view":
        return this.view(args);
      default:
        messages.error.unknownCommand("cert", command);
        showHelp();
        return void callback(3);
    }
  }
  /**
   * Create new private certificate
   */
  async create() {
    const id = "system.certificates";
    const certPropPath = "native.certificates";
    const certificates = import_js_controller_common.tools.generateDefaultCertificates();
    if (certificates) {
      console.log(JSON.stringify(certificates, null, 2));
      for (const [certName, cert] of Object.entries(certificates)) {
        console.log(`Update certificate ${certName}`);
        const objectsCommandArgs = ["set", id, `${certPropPath}.${certName}=${cert}`];
        await new Promise((resolve) => {
          const objectsCommand = new import_cliObjects.CLIObjects({ ...this.options, callback: resolve });
          objectsCommand.execute(objectsCommandArgs);
        });
      }
    }
    this.options.callback(import_js_controller_common.EXIT_CODES.NO_ERROR);
  }
  /**
   * View the certificates on CLI
   *
   * @param _args
   */
  view(_args) {
    let certName = _args[1];
    if (certName === void 0) {
      certName = "defaultPublic";
    }
    const { callback, dbConnect } = this.options;
    dbConnect((params) => {
      const { objects } = params;
      objects.getObject("system.certificates", (err, certs) => {
        if (!err && certs?.native?.certificates?.[certName]) {
          const certInfo = import_js_controller_common.tools.getCertificateInfo(certs.native.certificates[certName]);
          if (certInfo) {
            console.log(JSON.stringify(certInfo, null, 2));
            return void callback(import_js_controller_common.EXIT_CODES.NO_ERROR);
          }
          messages.error.cert(certName);
          return void callback(3);
        }
        messages.error.cert(certName);
        return void callback(3);
      });
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CLICert
});
//# sourceMappingURL=cliCert.js.map
