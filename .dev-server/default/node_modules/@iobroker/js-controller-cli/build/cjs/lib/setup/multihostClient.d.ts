interface ReceivedMessage {
    cmd: string;
    id: number;
    result: string;
    ip?: string;
    hostname?: string;
    info?: string;
    slave?: boolean;
    auth?: string;
    salt?: string;
    /** The states config of ioBroker.json  */
    states?: ioBroker.StatesDatabaseOptions;
    /** The objects config of ioBroker.json */
    objects?: ioBroker.ObjectsDatabaseOptions;
}
export type BrowseResultEntry = Partial<ReceivedMessage>;
export declare class MHClient {
    private id;
    private timer;
    private server;
    /**
     * Stops the MH server
     */
    private stopServer;
    /**
     * Calculate the SHA
     *
     * @param secret the MH secret
     * @param salt the MH salt
     * @param callback
     */
    private sha;
    /**
     * Starts the MH server
     *
     * @param isBroadcast if server should receive broadcast
     * @param timeout timeout after which MH server will be closed
     * @param onReady ready handler
     * @param onMessage message handler, if return true here, server will be stopped
     * @param onFinished finished handler
     */
    private startServer;
    /**
     * Start MH browsing for server
     *
     * @param timeout timeout to stop browsing
     * @param isDebug debug will also show local addresses
     */
    browse(timeout: number, isDebug: boolean): Promise<BrowseResultEntry[]>;
    /**
     * Connect to server
     *
     * @param ip ip address of server
     * @param password password for authentication
     * @param callback
     */
    connect(ip: string, password: string, callback: (err: Error | undefined, objectsConfig?: ioBroker.ObjectsDatabaseOptions, statesConfig?: ioBroker.StatesDatabaseOptions, address?: string) => void): void;
}
export {};
//# sourceMappingURL=multihostClient.d.ts.map