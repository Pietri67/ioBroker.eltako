{
  "version": 3,
  "sources": ["../../../../src/lib/setup/utils.ts"],
  "sourcesContent": ["import { EXIT_CODES } from '@iobroker/js-controller-common';\nimport { tools } from '@iobroker/js-controller-common';\nimport type { Client as ObjectsClient } from '@iobroker/db-objects-redis';\nimport semver from 'semver';\nimport { IoBrokerError } from '@/lib/setup/customError.js';\n\ninterface GetRepositoryOptions {\n    /** The objects DB client */\n    objects: ObjectsClient;\n    /** Name of the repository */\n    repoName?: string;\n}\n\n/**\n * Get JSON of the given repository\n *\n * @param options Repository specific options\n */\nexport async function getRepository(\n    options: GetRepositoryOptions,\n): Promise<Record<string, ioBroker.RepositoryJsonAdapterContent>> {\n    const { objects } = options;\n    const { repoName } = options;\n\n    let repoNameOrArray: string | string[] | undefined = repoName;\n    if (!repoName || repoName === 'auto') {\n        const systemConfig = await objects.getObject('system.config');\n        repoNameOrArray = systemConfig!.common.activeRepo;\n    }\n\n    const repoArr = !Array.isArray(repoNameOrArray) ? [repoNameOrArray!] : repoNameOrArray;\n\n    const systemRepos = (await objects.getObject('system.repositories'))!;\n\n    const allSources: Record<string, ioBroker.RepositoryJsonAdapterContent> = {};\n    let changed = false;\n    let anyFound = false;\n    for (const repoUrl of repoArr) {\n        const repo = systemRepos.native.repositories[repoUrl];\n        if (repo) {\n            if (typeof repo === 'string') {\n                systemRepos.native.repositories[repo] = {\n                    link: repo,\n                    json: null,\n                };\n                changed = true;\n            }\n\n            // If repo is not yet loaded\n            if (!systemRepos.native.repositories[repoUrl].json) {\n                console.log(`Update repository \"${repoUrl}\" under \"${systemRepos.native.repositories[repoUrl].link}\"`);\n                const data = await tools.getRepositoryFileAsync(systemRepos.native.repositories[repoUrl].link);\n                systemRepos.native.repositories[repoUrl].json = data.json;\n                systemRepos.native.repositories[repoUrl].hash = data.hash;\n                systemRepos.from = `system.host.${tools.getHostName()}.cli`;\n                systemRepos.ts = new Date().getTime();\n                changed = true;\n            }\n\n            if (systemRepos.native.repositories[repoUrl].json) {\n                Object.assign(allSources, systemRepos.native.repositories[repoUrl].json);\n                anyFound = true;\n            }\n        }\n\n        if (changed) {\n            await objects.setObject('system.repositories', systemRepos);\n        }\n    }\n\n    if (!anyFound) {\n        let message: string;\n        if (repoArr.length) {\n            message = `ERROR: No repositories defined matching \"${repoArr.join(\n                ' | ',\n            )}\". Please use one of ${Object.keys(systemRepos.native.repositories)\n                .map(repo => `\"${repo}\"`)\n                .join(', ')}.`;\n        } else {\n            message = `ERROR: No repositories defined. Please define one repository as active: \"iob repo set <${Object.keys(\n                systemRepos.native.repositories,\n            ).join(' | ')}>\"`;\n        }\n\n        throw new IoBrokerError({ message, code: EXIT_CODES.INVALID_REPO });\n    } else {\n        return allSources;\n    }\n}\n\ninterface VersionOptions {\n    /** The adapter name to check the version for */\n    adapterName: string;\n    /** The objects DB instance */\n    objects: ObjectsClient;\n}\n\ninterface IgnoreVersionOptions extends VersionOptions {\n    /** The version which will be checked */\n    version: string;\n}\n\n/**\n * Get info if a specific version should be ignored of this adapter\n *\n * @param options name and target version of the adapter\n */\nexport async function isVersionIgnored(options: IgnoreVersionOptions): Promise<boolean> {\n    const { adapterName, version, objects } = options;\n    const obj = await objects.getObject(`system.host.${tools.getHostName()}.adapter.${adapterName}`);\n\n    if (obj?.common.ignoreVersion === undefined) {\n        return false;\n    }\n\n    return semver.satisfies(version, obj?.common.ignoreVersion);\n}\n\n/**\n * Ignore a specific version of an adapter\n *\n * @param options name and target version of the adapter\n */\nexport async function ignoreVersion(options: IgnoreVersionOptions): Promise<void> {\n    const { adapterName, version, objects } = options;\n    const id = `system.host.${tools.getHostName()}.adapter.${adapterName}`;\n    const obj = await objects.getObject(id);\n\n    if (!obj) {\n        throw new IoBrokerError({ code: EXIT_CODES.CANNOT_SET_OBJECT, message: `Object \"${id}\" does not exist` });\n    }\n\n    obj.common.ignoreVersion = version;\n\n    await objects.setObject(id, obj);\n}\n\n/**\n * Recognize all updates of adapter again\n *\n * @param options name of the adapter\n */\nexport async function recognizeVersion(options: VersionOptions): Promise<void> {\n    const { adapterName, objects } = options;\n    const id = `system.host.${tools.getHostName()}.adapter.${adapterName}`;\n    const obj = await objects.getObject(id);\n\n    if (!obj) {\n        throw new IoBrokerError({ code: EXIT_CODES.CANNOT_SET_OBJECT, message: `Object \"${id}\" does not exist` });\n    }\n\n    delete obj.common.ignoreVersion;\n\n    await objects.setObject(id, obj);\n}\n"],
  "mappings": "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",
  "names": ["import_js_controller_common", "semver"]
}
