"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var setupLicense_exports = {};
__export(setupLicense_exports, {
  License: () => License
});
module.exports = __toCommonJS(setupLicense_exports);
var import_js_controller_common = require("@iobroker/js-controller-common");
var import_fs_extra = __toESM(require("fs-extra"), 1);
var import_jsonwebtoken = __toESM(require("jsonwebtoken"), 1);
class License {
  objects;
  constructor(options) {
    this.objects = options.objects;
  }
  /**
   * Read info from  '/etc/iob_vendor.json' and executes instructions stored there
   *
   * @param file path of license file
   */
  async setLicense(file) {
    if (import_fs_extra.default.existsSync(file)) {
      file = import_fs_extra.default.readFileSync(file, "utf8");
    }
    const license = import_jsonwebtoken.default.decode(file);
    if (!license) {
      throw new Error("License cannot be decoded");
    }
    if (!import_js_controller_common.tools.isObject(license) || !license.name) {
      throw new Error("Name not found in the license");
    }
    const adapter = license.name.split(".")[1];
    if (!adapter) {
      throw new Error(`Invalid license name ${license.name}`);
    }
    const arr = await this.objects.getObjectListAsync({
      startkey: `system.adapter.${adapter}.`,
      endkey: `system.adapter.${adapter}.\u9999`
    }, { checked: true });
    let updated = 0;
    if (arr.rows.length) {
      for (let g = 0; g < arr.rows.length; g++) {
        const obj = arr.rows[g].value;
        if (obj && obj.type === "instance") {
          obj.native = obj.native || {};
          obj.native.license = file;
          updated++;
          try {
            await this.objects.setObjectAsync(obj._id, obj);
            console.log(`Instance "${obj._id}" updated`);
          } catch (err) {
            console.error(`Cannot update "${obj._id}": ${err}`);
          }
        }
      }
    }
    if (!updated) {
      console.warn(`no instances of ${adapter} found`);
      if (arr.rows.length) {
        for (let g = 0; g < arr.rows.length; g++) {
          const obj = arr.rows[g].value;
          if (obj && obj.type === "adapter") {
            obj.native = obj.native || {};
            obj.native.license = file;
            updated++;
            try {
              await this.objects.setObjectAsync(obj._id, obj);
              console.log(`Adapter "${obj._id}" updated`);
            } catch (err) {
              console.error(`Cannot update "${obj._id}": ${err}`);
            }
          }
        }
      }
    }
    if (!updated) {
      console.error(`no installations of ${adapter} found`);
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  License
});
//# sourceMappingURL=setupLicense.js.map
