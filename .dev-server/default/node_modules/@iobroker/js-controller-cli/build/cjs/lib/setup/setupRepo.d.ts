import type { Client as ObjectsRedisClient } from '@iobroker/db-objects-redis';
import type { Client as StatesRedisClient } from '@iobroker/db-states-redis';
export interface CLIRepoOptions {
    objects: ObjectsRedisClient;
    states: StatesRedisClient;
}
export interface RepoFlags {
    /** Also list not installed adapters */
    a?: boolean;
    all?: boolean;
    /** Only list updatable adapters */
    u?: boolean;
    updatable?: boolean;
    /** Force update even if hash hasn't changed */
    f?: boolean;
    force?: boolean;
}
export declare class Repo {
    private readonly defaultSystemRepo;
    private readonly objects;
    private readonly states;
    private readonly controllerVersion;
    constructor(options: CLIRepoOptions);
    /**
     * Update the given repository and returns new repo content
     *
     * @param repoName name of the repository
     * @param force force update even if same hash
     * @param systemConfig content of system.config object
     * @param systemRepos content of system.repositories object
     */
    private updateRepo;
    /**
     * Show repo on CLI
     *
     * @param repoUrl url of the repository
     * @param flags CLI flags
     */
    showRepo(repoUrl: string | string[], flags: RepoFlags): Promise<void>;
    /**
     * Show the repo result on CLI
     *
     * @param sources Repo json sources
     * @param flags CLI flags
     */
    private showRepoResult;
    /**
     * Update Admin info states with number of updates
     *
     * @param sources the repository object
     */
    private updateInfo;
    /**
     * Show current status of Repo on CLI
     */
    showRepoStatus(): Promise<number>;
    /**
     * Add new repo
     *
     * @param repoName name of new repo
     * @param repoUrl url of new repo
     */
    add(repoName: string, repoUrl: string): Promise<void>;
    /**
     * Remove repository from sources
     *
     * @param repoName name of repository to remove
     */
    del(repoName: string): Promise<void>;
    /**
     * Set specific repo as active one
     *
     * @param repoName name of the respository to activate
     */
    setActive(repoName: string): Promise<void>;
    /**
     * Set given repo as inactive
     *
     * @param repoName name of the repository
     */
    setInactive(repoName: string): Promise<void>;
    /**
     * Renames existing repository if old name and link matches, renaming will not be performed if an repo with the new name already exists
     *
     * @param oldName - name of the current repository
     * @param newName - target name
     * @param repoUrl - hyperlink of the repository
     */
    rename(oldName: string, newName: string, repoUrl: string): Promise<void>;
}
//# sourceMappingURL=setupRepo.d.ts.map