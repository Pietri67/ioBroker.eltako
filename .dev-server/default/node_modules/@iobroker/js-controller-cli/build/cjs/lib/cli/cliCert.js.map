{
  "version": 3,
  "sources": ["../../../../src/lib/cli/cliCert.ts"],
  "sourcesContent": ["import { CLICommand, type CLICommandOptions } from './cliCommand.js';\nimport { CLIObjects } from './cliObjects.js';\nimport * as messages from './messages.js';\nimport { tools, EXIT_CODES } from '@iobroker/js-controller-common';\n\n/** Command ioBroker cert ... */\nexport class CLICert extends CLICommand {\n    constructor(options: CLICommandOptions) {\n        super(options);\n    }\n\n    /**\n     * Executes a command\n     *\n     * @param args\n     */\n    execute(args: any[]): void | Promise<void> {\n        const { callback, showHelp } = this.options;\n        const command = args[0];\n\n        switch (command) {\n            case 'renew':\n            case 'create':\n                return this.create();\n            case 'view':\n                return this.view(args);\n            default:\n                messages.error.unknownCommand('cert', command);\n                showHelp();\n                return void callback(3);\n        }\n    }\n\n    /**\n     * Create new private certificate\n     */\n    async create(): Promise<void> {\n        const id = 'system.certificates';\n        const certPropPath = 'native.certificates';\n\n        const certificates = tools.generateDefaultCertificates();\n        if (certificates) {\n            console.log(JSON.stringify(certificates, null, 2));\n            for (const [certName, cert] of Object.entries(certificates)) {\n                // use the command `iobroker object set ...` to update the certificate\n                console.log(`Update certificate ${certName}`);\n\n                const objectsCommandArgs = ['set', id, `${certPropPath}.${certName}=${cert as string}`];\n                await new Promise(resolve => {\n                    const objectsCommand = new CLIObjects({ ...this.options, callback: resolve });\n                    objectsCommand.execute(objectsCommandArgs);\n                });\n            }\n        }\n\n        this.options.callback(EXIT_CODES.NO_ERROR);\n    }\n\n    /**\n     * View the certificates on CLI\n     *\n     * @param _args\n     */\n    view(_args: any[]): void {\n        let certName = _args[1];\n        if (certName === undefined) {\n            certName = 'defaultPublic';\n        }\n        const { callback, dbConnect } = this.options;\n        dbConnect(params => {\n            const { objects } = params;\n\n            objects.getObject('system.certificates', (err, certs) => {\n                if (!err && certs?.native?.certificates?.[certName]) {\n                    const certInfo = tools.getCertificateInfo(certs.native.certificates[certName]);\n                    if (certInfo) {\n                        console.log(JSON.stringify(certInfo, null, 2));\n                        return void callback(EXIT_CODES.NO_ERROR);\n                    }\n                    messages.error.cert(certName);\n                    return void callback(3);\n                }\n                messages.error.cert(certName);\n                return void callback(3);\n            });\n        });\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA,wBAAmD;AACnD,wBAA2B;AAC3B,eAA0B;AAC1B,kCAAkC;AAG5B,MAAO,gBAAgB,6BAAU;EACnC,YAAY,SAA0B;AAClC,UAAM,OAAO;EACjB;;;;;;EAOA,QAAQ,MAAW;AACf,UAAM,EAAE,UAAU,SAAQ,IAAK,KAAK;AACpC,UAAM,UAAU,KAAK,CAAC;AAEtB,YAAQ,SAAS;MACb,KAAK;MACL,KAAK;AACD,eAAO,KAAK,OAAM;MACtB,KAAK;AACD,eAAO,KAAK,KAAK,IAAI;MACzB;AACI,iBAAS,MAAM,eAAe,QAAQ,OAAO;AAC7C,iBAAQ;AACR,eAAO,KAAK,SAAS,CAAC;IAC9B;EACJ;;;;EAKA,MAAM,SAAM;AACR,UAAM,KAAK;AACX,UAAM,eAAe;AAErB,UAAM,eAAe,kCAAM,4BAA2B;AACtD,QAAI,cAAc;AACd,cAAQ,IAAI,KAAK,UAAU,cAAc,MAAM,CAAC,CAAC;AACjD,iBAAW,CAAC,UAAU,IAAI,KAAK,OAAO,QAAQ,YAAY,GAAG;AAEzD,gBAAQ,IAAI,sBAAsB,QAAQ,EAAE;AAE5C,cAAM,qBAAqB,CAAC,OAAO,IAAI,GAAG,YAAY,IAAI,QAAQ,IAAI,IAAc,EAAE;AACtF,cAAM,IAAI,QAAQ,aAAU;AACxB,gBAAM,iBAAiB,IAAI,6BAAW,EAAE,GAAG,KAAK,SAAS,UAAU,QAAO,CAAE;AAC5E,yBAAe,QAAQ,kBAAkB;QAC7C,CAAC;MACL;IACJ;AAEA,SAAK,QAAQ,SAAS,uCAAW,QAAQ;EAC7C;;;;;;EAOA,KAAK,OAAY;AACb,QAAI,WAAW,MAAM,CAAC;AACtB,QAAI,aAAa,QAAW;AACxB,iBAAW;IACf;AACA,UAAM,EAAE,UAAU,UAAS,IAAK,KAAK;AACrC,cAAU,YAAS;AACf,YAAM,EAAE,QAAO,IAAK;AAEpB,cAAQ,UAAU,uBAAuB,CAAC,KAAK,UAAS;AACpD,YAAI,CAAC,OAAO,OAAO,QAAQ,eAAe,QAAQ,GAAG;AACjD,gBAAM,WAAW,kCAAM,mBAAmB,MAAM,OAAO,aAAa,QAAQ,CAAC;AAC7E,cAAI,UAAU;AACV,oBAAQ,IAAI,KAAK,UAAU,UAAU,MAAM,CAAC,CAAC;AAC7C,mBAAO,KAAK,SAAS,uCAAW,QAAQ;UAC5C;AACA,mBAAS,MAAM,KAAK,QAAQ;AAC5B,iBAAO,KAAK,SAAS,CAAC;QAC1B;AACA,iBAAS,MAAM,KAAK,QAAQ;AAC5B,eAAO,KAAK,SAAS,CAAC;MAC1B,CAAC;IACL,CAAC;EACL;;",
  "names": []
}
