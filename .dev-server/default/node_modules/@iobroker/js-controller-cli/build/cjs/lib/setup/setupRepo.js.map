{
  "version": 3,
  "sources": ["../../../../src/lib/setup/setupRepo.ts"],
  "sourcesContent": ["import { tools, EXIT_CODES } from '@iobroker/js-controller-common';\nimport axios from 'axios';\nimport fs from 'fs-extra';\nimport type { Client as ObjectsRedisClient } from '@iobroker/db-objects-redis';\nimport type { Client as StatesRedisClient } from '@iobroker/db-states-redis';\nimport { isVersionIgnored } from '@/lib/setup/utils.js';\nimport path from 'node:path';\n\nexport interface CLIRepoOptions {\n    objects: ObjectsRedisClient;\n    states: StatesRedisClient;\n}\n\nexport interface RepoFlags {\n    /** Also list not installed adapters */\n    a?: boolean;\n    all?: boolean;\n    /** Only list updatable adapters */\n    u?: boolean;\n    updatable?: boolean;\n    /** Force update even if hash hasn't changed */\n    f?: boolean;\n    force?: boolean;\n}\n\nexport class Repo {\n    private readonly defaultSystemRepo: ioBroker.RepositoryObject;\n    private readonly objects: ObjectsRedisClient;\n    private readonly states: StatesRedisClient;\n    private readonly controllerVersion: string;\n\n    constructor(options: CLIRepoOptions) {\n        if (!options?.objects) {\n            throw new Error('Invalid arguments: objects is missing');\n        }\n        if (!options?.states) {\n            throw new Error('Invalid arguments: states is missing');\n        }\n\n        const ioPackage = fs.readJSONSync(path.join(tools.getControllerDir(), 'io-package.json'));\n        this.controllerVersion = ioPackage.common.version;\n\n        this.objects = options.objects;\n        this.states = options.states;\n\n        this.defaultSystemRepo = {\n            common: {\n                name: 'System repositories',\n                dontDelete: true,\n            },\n            native: {\n                repositories: {\n                    stable: {\n                        link: 'http://download.iobroker.net/sources-dist.json',\n                        json: null,\n                    },\n                    beta: {\n                        link: 'http://download.iobroker.net/sources-dist-latest.json',\n                        json: null,\n                    },\n                },\n            },\n            _id: 'system.repositories',\n            type: 'config',\n        };\n    }\n\n    /**\n     * Update the given repository and returns new repo content\n     *\n     * @param repoName name of the repository\n     * @param force force update even if same hash\n     * @param systemConfig content of system.config object\n     * @param systemRepos content of system.repositories object\n     */\n    private async updateRepo(\n        repoName: string,\n        force: boolean | undefined,\n        systemConfig?: ioBroker.OtherObject,\n        systemRepos?: ioBroker.RepositoryObject,\n    ): Promise<null | ioBroker.RepositoryJson> {\n        if (!repoName) {\n            const sysConfig = systemConfig || (await this.objects.getObject('system.config'));\n            repoName = sysConfig!.common.activeRepo;\n        }\n\n        const oldRepos = systemRepos || (await this.objects.getObject('system.repositories'));\n        if (!oldRepos?.native.repositories?.[repoName]) {\n            console.log(`Error: repository \"${repoName}\" not found in the \"system.repositories`);\n            return null;\n        }\n\n        const urlOrPath = oldRepos.native.repositories[repoName].link;\n        const hashUrl = urlOrPath.replace(/\\.json$/, '-hash.json');\n        let hash;\n\n        if (\n            !force &&\n            oldRepos.native.repositories[repoName].hash &&\n            oldRepos.native.repositories[repoName].json &&\n            (urlOrPath.startsWith('http://') || urlOrPath.startsWith('https://'))\n        ) {\n            try {\n                hash = await axios({ url: hashUrl, timeout: 10_000 });\n            } catch (e) {\n                console.error(`Cannot download repository hash file from \"${hashUrl}\": ${e.message}`);\n            }\n            if (hash?.data && oldRepos.native.repositories[repoName].hash === hash.data.hash) {\n                return oldRepos.native.repositories[repoName].json;\n            }\n        }\n\n        let data;\n\n        if (urlOrPath.startsWith('http://') || urlOrPath.startsWith('https://')) {\n            if (!hash) {\n                try {\n                    hash = await axios({ url: hashUrl, timeout: 10000 });\n                } catch (e) {\n                    console.error(`Cannot download repository hash file from \"${hashUrl}\": ${e.message}`);\n                }\n            }\n\n            const agent = `${tools.appName}, RND: CLI, Node:${process.version}, V:${this.controllerVersion}`;\n            try {\n                data = await axios({\n                    url: urlOrPath,\n                    timeout: 10_000,\n                    headers: { 'User-Agent': agent },\n                });\n                if (data.data) {\n                    data = data.data;\n                } else {\n                    data = null;\n                }\n            } catch (e) {\n                console.error(`Cannot download repository file from \"${urlOrPath}\": ${e.message}`);\n                data = null;\n            }\n        } else {\n            if (fs.existsSync(urlOrPath)) {\n                try {\n                    data = JSON.parse(fs.readFileSync(urlOrPath).toString('utf8'));\n                } catch (err) {\n                    console.error(`Error: Cannot read or parse file \"${urlOrPath}\": ${err.message}`);\n                }\n            } else {\n                console.error(`Error: Cannot find file \"${urlOrPath}\"`);\n            }\n        }\n\n        let changed;\n        if (data) {\n            oldRepos.native.repositories[repoName].json = data;\n            changed = true;\n        }\n        if (hash?.data) {\n            oldRepos.native.repositories[repoName].hash = hash.data.hash;\n            changed = true;\n        }\n        if (changed) {\n            oldRepos.from = `system.host.${tools.getHostName()}.cli`;\n            oldRepos.ts = Date.now();\n            await this.objects.setObject('system.repositories', oldRepos);\n        }\n\n        return oldRepos.native.repositories[repoName].json;\n    }\n\n    /**\n     * Show repo on CLI\n     *\n     * @param repoUrl url of the repository\n     * @param flags CLI flags\n     */\n    async showRepo(repoUrl: string | string[], flags: RepoFlags): Promise<void> {\n        // Get the repositories\n        const systemConfig = await this.objects.getObject('system.config');\n        const systemRepos = await this.objects.getObject('system.repositories');\n        if (!systemConfig) {\n            console.error('Error: Object \"system.config\" not found');\n        } else if (!systemRepos) {\n            console.error('Error: Object \"system.repositories\" not found');\n        } else if (!systemRepos.native || !systemRepos.native.repositories) {\n            console.error('Error: no repositories found in the \"system.config');\n        } else {\n            repoUrl = repoUrl || systemConfig.common.activeRepo;\n\n            if (!Array.isArray(repoUrl)) {\n                repoUrl = [repoUrl];\n            }\n\n            console.log(`Used ${repoUrl.length > 1 ? 'repositories' : 'repository'}: ${repoUrl.join(', ')}`);\n\n            const allSources = {};\n\n            for (const url of repoUrl) {\n                const repo = systemRepos.native.repositories[url];\n                // If known repository\n                if (repo) {\n                    if (typeof repo === 'string') {\n                        systemRepos.native.repositories[url] = {\n                            link: repo,\n                            json: null,\n                            hash: '',\n                        };\n                    }\n\n                    const sources = await this.updateRepo(url, flags.force || flags.f, systemConfig, systemRepos);\n                    sources && Object.assign(allSources, sources);\n                } else {\n                    console.error(\n                        `Error: unknown repository is active - \"${url}\". Known: ${Object.keys(\n                            systemRepos.native.repositories,\n                        ).join(', ')}`,\n                    );\n                }\n            }\n\n            try {\n                // update variables of every admin instance\n                await this.updateInfo(allSources);\n            } catch {\n                // not important if fails\n            }\n\n            return this.showRepoResult(allSources, flags);\n        }\n    }\n\n    /**\n     * Show the repo result on CLI\n     *\n     * @param sources Repo json sources\n     * @param flags CLI flags\n     */\n    private async showRepoResult(sources: Record<string, any>, flags: RepoFlags): Promise<void> {\n        const installed = tools.getInstalledInfo();\n        const adapters = Object.keys(sources).sort();\n\n        for (const name of adapters) {\n            let updatable = false;\n            let text = sources[name].controller ? 'Controller ' : 'Adapter    ';\n            text += `\"${name}\"`;\n            text = text.padEnd(11 + 15);\n\n            if (sources[name].version) {\n                text += `: ${sources[name].version}`;\n            }\n            text = text.padEnd(11 + 15 + 11);\n\n            if (!(flags.all || flags.a) && !installed[name]) {\n                continue;\n            }\n\n            if (installed[name]?.version) {\n                text += `, installed ${installed[name].version}`;\n                try {\n                    // tools.upToDate can throw if version is invalid\n                    if (\n                        sources[name].version !== installed[name].version &&\n                        sources[name].version &&\n                        !tools.upToDate(sources[name].version, installed[name].version)\n                    ) {\n                        updatable = true;\n                        text = text.padEnd(11 + 15 + 11 + 18);\n                        const isIgnored = await isVersionIgnored({\n                            adapterName: name,\n                            objects: this.objects,\n                            version: sources[name].version,\n                        });\n\n                        text += isIgnored ? ' [Ignored]' : ' [Updatable]';\n                    }\n                } catch (e) {\n                    console.error(`Cannot determine update info of \"${name}\": ${e.message}`);\n                }\n            }\n            if ((flags.updatable || flags.u) && !updatable) {\n                continue;\n            }\n            console.log(text);\n        }\n    }\n\n    /**\n     * Update Admin info states with number of updates\n     *\n     * @param sources the repository object\n     */\n    private async updateInfo(sources: Record<string, any>): Promise<void> {\n        const installed = tools.getInstalledInfo();\n        const list: string[] = [];\n\n        for (const name of Object.keys(sources)) {\n            if (installed[name] && installed[name].version && sources[name].version) {\n                try {\n                    // tools.upToDate can throw if version is invalid\n                    if (\n                        sources[name].version !== installed[name].version &&\n                        !tools.upToDate(sources[name].version, installed[name].version)\n                    ) {\n                        // remove first part of the name\n                        const n = name.indexOf('.');\n                        list.push(n === -1 ? name : name.substring(n + 1));\n                    }\n                } catch (e) {\n                    console.error(`Cannot determine update info of \"${name}\": ${e.message}`);\n                }\n            }\n        }\n\n        const objs = await this.objects.getObjectViewAsync('system', 'instance', {\n            startkey: 'system.adapter.admin',\n            endkey: 'system.adapter.admin\\u9999',\n        });\n\n        if (objs?.rows?.length) {\n            const listStr = list.join(', ');\n            for (const row of objs.rows) {\n                if (row?.value?.type === 'instance') {\n                    await this.states.setState(`${row.id}.info.updatesNumber`, { val: list.length, ack: true });\n                    await this.states.setState(`${row.id}.info.updatesList`, { val: listStr, ack: true });\n                }\n            }\n        }\n    }\n\n    /**\n     * Show current status of Repo on CLI\n     */\n    async showRepoStatus(): Promise<number> {\n        try {\n            const obj = await this.objects.getObject('system.repositories');\n            const objCfg = await this.objects.getObject('system.config');\n\n            if (!obj) {\n                console.error('List is empty');\n                return EXIT_CODES.CANNOT_GET_REPO_LIST;\n            } else if (obj.native.repositories) {\n                console.table(\n                    Object.entries(obj.native.repositories).map(([key, value]) => {\n                        return {\n                            name: key,\n                            url: value.link,\n                            'auto upgrade': objCfg?.common.adapterAutoUpgrade?.repositories[key] ?? false,\n                        };\n                    }),\n                );\n\n                if (objCfg?.common) {\n                    let activeRepo = objCfg.common.activeRepo;\n                    if (typeof activeRepo === 'string') {\n                        activeRepo = [activeRepo];\n                    }\n                    console.log(`\\nActive repo(s): ${activeRepo.join(', ')}`);\n                    console.log(`Upgrade policy: ${objCfg.common.adapterAutoUpgrade?.defaultPolicy ?? 'none'}`);\n                }\n            } else {\n                console.error('List is empty');\n                return EXIT_CODES.CANNOT_GET_REPO_LIST;\n            }\n        } catch (err) {\n            console.error(`Cannot get list: ${err}`);\n        }\n        return EXIT_CODES.CANNOT_GET_REPO_LIST;\n    }\n\n    /**\n     * Add new repo\n     *\n     * @param repoName name of new repo\n     * @param repoUrl url of new repo\n     */\n    async add(repoName: string, repoUrl: string): Promise<void> {\n        const sysRepoObj = await this.objects.getObjectAsync('system.repositories');\n        const obj = sysRepoObj || this.defaultSystemRepo;\n\n        if (obj.native.repositories[repoName]) {\n            throw new Error(`Repository \"${repoName}\" yet exists: ${obj.native.repositories[repoName].link}`);\n        } else {\n            obj.native.repositories[repoName] = {\n                link: repoUrl,\n                json: null,\n            };\n            obj.from = `system.host.${tools.getHostName()}.cli`;\n            obj.ts = Date.now();\n            await this.objects.setObjectAsync('system.repositories', obj);\n        }\n    }\n\n    /**\n     * Remove repository from sources\n     *\n     * @param repoName name of repository to remove\n     */\n    async del(repoName: string): Promise<void> {\n        const obj = await this.objects.getObjectAsync('system.config');\n        if (\n            (obj?.common.activeRepo &&\n                typeof obj.common.activeRepo === 'string' &&\n                obj.common.activeRepo === repoName) ||\n            (obj?.common.activeRepo && Array.isArray(obj.common.activeRepo) && obj.common.activeRepo.includes(repoName))\n        ) {\n            throw new Error(`Cannot delete active repository: ${repoName}`);\n        } else {\n            const repoObj = await this.objects.getObjectAsync('system.repositories');\n            if (repoObj) {\n                if (!repoObj.native.repositories[repoName]) {\n                    throw new Error(`Repository \"${repoName}\" not found.`);\n                } else {\n                    delete repoObj.native.repositories[repoName];\n                    repoObj.from = `system.host.${tools.getHostName()}.cli`;\n                    repoObj.ts = Date.now();\n                    await this.objects.setObject('system.repositories', repoObj);\n                }\n            }\n        }\n    }\n\n    /**\n     * Set specific repo as active one\n     *\n     * @param repoName name of the respository to activate\n     */\n    async setActive(repoName: string): Promise<void> {\n        const sysRepoObj = await this.objects.getObjectAsync('system.repositories');\n        const obj = sysRepoObj || this.defaultSystemRepo;\n\n        if (!obj.native.repositories[repoName]) {\n            throw new Error(`Repository \"${repoName}\" not found.`);\n        } else {\n            const confObj = await this.objects.getObjectAsync('system.config');\n            if (typeof confObj?.common.activeRepo === 'string') {\n                confObj.common.activeRepo = [confObj.common.activeRepo];\n            }\n\n            if (confObj && !confObj.common.activeRepo.includes(repoName)) {\n                confObj.common.activeRepo.push(repoName);\n                confObj.from = `system.host.${tools.getHostName()}.cli`;\n                confObj.ts = Date.now();\n                await this.objects.setObjectAsync('system.config', confObj);\n            }\n        }\n    }\n\n    /**\n     * Set given repo as inactive\n     *\n     * @param repoName name of the repository\n     */\n    async setInactive(repoName: string): Promise<void> {\n        const confObj = (await this.objects.getObjectAsync('system.config'))!;\n        if (typeof confObj?.common.activeRepo === 'string') {\n            confObj.common.activeRepo = [confObj.common.activeRepo];\n        }\n\n        const pos = confObj.common.activeRepo.indexOf(repoName);\n        if (pos !== -1) {\n            confObj.common.activeRepo.splice(pos, 1);\n            confObj.from = `system.host.${tools.getHostName()}.cli`;\n            confObj.ts = Date.now();\n            await this.objects.setObjectAsync('system.config', confObj);\n        }\n    }\n\n    /**\n     * Renames existing repository if old name and link matches, renaming will not be performed if an repo with the new name already exists\n     *\n     * @param oldName - name of the current repository\n     * @param newName - target name\n     * @param repoUrl - hyperlink of the repository\n     */\n    async rename(oldName: string, newName: string, repoUrl: string): Promise<void> {\n        let repoObj;\n        let sysConfigObj;\n        try {\n            sysConfigObj = await this.objects.getObjectAsync('system.config');\n            repoObj = await this.objects.getObjectAsync('system.repositories');\n        } catch (err) {\n            throw new Error(`Could not rename repository \"${oldName}\" to \"${newName}\": ${err.message}`);\n        }\n\n        if (repoObj && repoObj.native && repoObj.native.repositories) {\n            if (\n                repoObj.native.repositories[oldName] &&\n                repoObj.native.repositories[oldName].link === repoUrl &&\n                !repoObj.native.repositories[newName]\n            ) {\n                repoObj.native.repositories[newName] = repoObj.native.repositories[oldName];\n                delete repoObj.native.repositories[oldName];\n\n                try {\n                    await this.objects.setObjectAsync('system.repositories', repoObj);\n                    console.log(`Renamed repository \"${oldName} to \"${newName}\"`);\n                } catch (err) {\n                    throw new Error(`Could not rename repository \"${oldName}\" to \"${newName}\": ${err.message}`);\n                }\n\n                // if we changed the name of the activeRepo, we should set newName as active repo\n                if (\n                    sysConfigObj &&\n                    sysConfigObj.common &&\n                    ((typeof sysConfigObj.common.activeRepo === 'string' &&\n                        sysConfigObj.common.activeRepo === oldName) ||\n                        (Array.isArray(sysConfigObj.common.activeRepo) &&\n                            sysConfigObj.common.activeRepo.includes(oldName)))\n                ) {\n                    if (typeof sysConfigObj.common.activeRepo === 'string') {\n                        sysConfigObj.common.activeRepo = [sysConfigObj.common.activeRepo];\n                    }\n                    const pos = sysConfigObj.common.activeRepo.indexOf(oldName);\n                    sysConfigObj.common.activeRepo.splice(pos, 1, newName);\n\n                    try {\n                        await this.objects.setObjectAsync('system.config', sysConfigObj);\n                    } catch (err) {\n                        throw new Error(`Could not set \"${newName}\" as active repository: ${err.message}`);\n                    }\n                }\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["fs", "path", "axios"]
}
