"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cliDebug_exports = {};
__export(cliDebug_exports, {
  CLIDebug: () => CLIDebug
});
module.exports = __toCommonJS(cliDebug_exports);
var CLI = __toESM(require("./messages.js"), 1);
var import_cliCommand = require("./cliCommand.js");
var CLITools = __toESM(require("./cliTools.js"), 1);
var import_js_controller_common = require("@iobroker/js-controller-common");
var import_node_child_process = require("node:child_process");
class CLIDebug extends import_cliCommand.CLICommand {
  constructor(options) {
    super(options);
  }
  /**
   * Checks if the adapter instance is running
   *
   * @param adapter adapter name
   * @param instance instance id
   */
  _isInstanceRunning(adapter, instance) {
    const { dbConnect } = this.options;
    return new Promise((resolve) => {
      dbConnect(async ({ states }) => {
        try {
          const state = await states.getStateAsync(`system.adapter.${adapter}.${instance}.alive`);
          if (state?.val) {
            resolve(true);
            return;
          }
        } catch {
        }
        resolve(false);
      });
    });
  }
  /**
   * Executes a command
   *
   * @param args
   */
  async execute(args) {
    const { callback, ...params } = this.options;
    const adapter = args[0];
    if (!adapter) {
      CLI.error.requiredArgumentMissing("adaptername", "debug <adaptername>");
      return void callback(34);
    }
    const { name, instance } = CLITools.splitAdapterOrInstanceIdentifierWithVersion(adapter);
    if (await this._isInstanceRunning(name, instance || "0")) {
      CLI.error.instanceAlreadyRunning(`${name}.${instance || "0"}`);
      return void callback(import_js_controller_common.EXIT_CODES.ADAPTER_ALREADY_RUNNING);
    }
    const adapterDir = import_js_controller_common.tools.getAdapterDir(adapter);
    if (!adapterDir) {
      CLI.error.adapterDirNotFound(adapter);
      return void callback(34);
    }
    let mainFile;
    try {
      mainFile = await import_js_controller_common.tools.resolveAdapterMainFile(adapter);
    } catch {
      CLI.error.mainFileNotFound(adapter);
      return callback(1);
    }
    const adapterArgs = [instance || "0", "--debug"];
    const nodeArgs = [
      ...import_js_controller_common.tools.getDefaultNodeArgs(mainFile),
      // --inspect[-brk][=[ip]:[port]]
      `--inspect${params.wait ? "-brk" : ""}${!!params.ip || !!params.port ? "=" : ""}${params.ip || ""}${!!params.ip && !!params.port ? ":" : ""}${params.port || ""}`
    ];
    const cp = (0, import_node_child_process.fork)(mainFile, adapterArgs, {
      cwd: adapterDir,
      execArgv: nodeArgs
    });
    cp.on("exit", (code) => callback(code || 0));
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CLIDebug
});
//# sourceMappingURL=cliDebug.js.map
