{
  "version": 3,
  "sources": ["../../../../src/lib/setup/setupVendor.ts"],
  "sourcesContent": ["import type { Client as ObjectsRedisClient } from '@iobroker/db-objects-redis';\nimport { tools } from '@iobroker/js-controller-common';\nimport fs from 'fs-extra';\nimport deepClone from 'deep-clone';\nimport { isDeepStrictEqual } from 'node:util';\n\nexport interface CLIVendorOptions {\n    objects: ObjectsRedisClient;\n}\n\nconst VENDOR_FILE = '/etc/iob-vendor.json';\n\nexport class Vendor {\n    private readonly objects: ObjectsRedisClient;\n\n    constructor(options: CLIVendorOptions) {\n        this.objects = options.objects;\n    }\n\n    /**\n     * Deep merge of source into target object\n     *\n     * @param target target obj\n     * @param source source obj\n     */\n    private deepMerge(target: Record<string, any>, source: Record<string, any>): void {\n        Object.keys(source).forEach(attr => {\n            if (typeof source[attr] === 'object' && !(source[attr] instanceof Array)) {\n                if (target[attr] && typeof target[attr] !== 'object') {\n                    target[attr] = {};\n                }\n                target[attr] = target[attr] || {};\n                this.deepMerge(target[attr], source[attr]);\n            } else {\n                target[attr] = source[attr];\n            }\n        });\n    }\n\n    /**\n     * Read info from  '/etc/iob_vendor.json' and executes instructions stored there\n     *\n     * @param file file path if not given, default path is used\n     * @param password vendor password\n     * @param logger\n     */\n    async checkVendor(file: string | undefined, password: string, logger?: any): Promise<void> {\n        logger = logger || {\n            debug: (text: string) => console.log(text),\n            info: (text: string) => console.log(text),\n            error: (text: string) => console.error(text),\n            warn: (text: string) => console.warn(text),\n        };\n\n        file = file || VENDOR_FILE;\n        let data: Record<string, any>;\n        if (fs.existsSync(file)) {\n            try {\n                data = fs.readJSONSync(file);\n            } catch (err) {\n                logger.error(`cannot read or parse \"${file}\": ${err.message}`);\n                throw new Error(`cannot read or parse \"${file}\": ${err.message}`);\n            }\n        } else {\n            logger.error(`\"${file}\" does not exist`);\n            throw new Error(`\"${file}\" does not exist`);\n        }\n\n        if (data.uuid) {\n            const uuid = data.uuid;\n            data.uuid = null;\n\n            // check UUID\n            const obj = await this.objects.getObject('system.meta.uuid');\n            if (obj?.native) {\n                if (obj.native.uuid !== uuid) {\n                    obj.native.uuid = uuid;\n\n                    logger.info(`Update \"system.meta.uuid:native.uuid\" = \"${obj.native.uuid}\"`);\n\n                    obj.nonEdit = obj.nonEdit || {};\n                    obj.nonEdit.password = password;\n                    try {\n                        await this.objects.setObjectAsync('system.meta.uuid', obj);\n                        logger.info(`object system.meta.uuid updated: ${uuid}`);\n                    } catch (e) {\n                        logger.error(`Cannot update system.meta.uuid: ${e.message}`);\n                    }\n                }\n            } else {\n                try {\n                    // @ts-expect-error type uuid is not allowed TODO: allow it for meta?\n                    await this.objects.setObjectAsync('system.meta.uuid', {\n                        type: 'meta',\n                        common: {\n                            name: 'uuid',\n                            type: 'uuid',\n                        },\n                        ts: new Date().getTime(),\n                        from: `system.host.${tools.getHostName()}.tools`,\n                        native: {\n                            uuid: uuid,\n                        },\n                    });\n                    logger.info(`object system.meta.uuid created: ${uuid}`);\n                } catch (e) {\n                    logger.error(`Cannot create system.meta.uuid: ${e.message}`);\n                }\n            }\n        }\n\n        // patch iobroker.json file\n        if (data.iobroker) {\n            const settings = fs.readJSONSync(tools.getConfigFileName());\n            logger.info('Update iobroker.json file');\n            this.deepMerge(settings, data.iobroker);\n            fs.writeFileSync(tools.getConfigFileName(), JSON.stringify(settings, null, 2));\n        }\n\n        if (data.vendor) {\n            const vendor = deepClone(data.vendor);\n            data._vendor = deepClone(vendor);\n            data.vendor = null;\n\n            // store vendor\n            try {\n                const obj = await this.objects.getObject('system.config');\n                if (obj && obj.native) {\n                    if (!isDeepStrictEqual(obj.native.vendor, vendor)) {\n                        obj.native.vendor = vendor;\n                        obj.nonEdit = obj.nonEdit || {};\n                        obj.nonEdit.password = password;\n                        await this.objects.setObjectAsync(obj._id, obj);\n                        logger.info('object system.config updated');\n                    }\n                }\n            } catch (e) {\n                logger.error(`Cannot update system.config: ${e.message}`);\n            }\n        }\n\n        // update all existing objects according to vendor\n        if (data.objects) {\n            for (let id of Object.keys(data.objects)) {\n                if (!id.includes('*')) {\n                    const _newObj = data.objects[id];\n                    const obj = await this.objects.getObject(id);\n                    if (obj) {\n                        obj.nonEdit = obj.nonEdit || {};\n                        const originalObj = deepClone(obj);\n                        _newObj.nonEdit = _newObj.nonEdit || {};\n                        _newObj.nonEdit.passHash = obj.nonEdit.passHash;\n                        // merge objects\n                        tools.copyAttributes(_newObj, obj);\n\n                        if (!isDeepStrictEqual(originalObj, obj)) {\n                            delete obj.nonEdit.passHash;\n                            obj.nonEdit.password = password;\n                            logger.info(`Update \"${obj._id}\"`);\n                            try {\n                                await this.objects.setObjectAsync(obj._id, obj);\n                                logger.info(`object \"${obj._id}\" updated`);\n                            } catch (e) {\n                                logger.error(`Cannot update \"${obj._id}\": ${e.message}`);\n                            }\n                        }\n                    } else {\n                        try {\n                            await this.objects.setObjectAsync(id, _newObj);\n                            logger.info(`object \"${_newObj._id}\" updated`);\n                        } catch (e) {\n                            logger.error(`Cannot update ${id} \"${JSON.stringify(_newObj)}\": ${e.message}`);\n                        }\n                    }\n                } else {\n                    id = id.replace(/\\*/g, '');\n                    const _obj = data.objects[id];\n                    const arr = await this.objects.getObjectListAsync(\n                        {\n                            startkey: id,\n                            endkey: `${id}\\u9999`,\n                        },\n                        { checked: true },\n                    );\n\n                    if (arr && arr.rows && arr.rows.length) {\n                        for (const row of arr.rows) {\n                            const obj = row.value;\n                            if (obj) {\n                                obj.nonEdit = obj.nonEdit || {};\n                                const originalObj = deepClone(obj);\n                                _obj.nonEdit = _obj.nonEdit || {};\n                                _obj.nonEdit.passHash = obj.nonEdit.passHash;\n                                // merge objects\n                                tools.copyAttributes(_obj, obj);\n\n                                if (!isDeepStrictEqual(originalObj, obj)) {\n                                    delete obj.nonEdit.passHash;\n                                    obj.nonEdit.password = password;\n                                    logger.info(`Update \"${obj._id}\"`);\n                                    try {\n                                        await this.objects.setObjectAsync(obj._id, obj);\n                                        logger.info(`object \"${obj._id}\" updated`);\n                                    } catch (e) {\n                                        logger.error(`Cannot update \"${obj._id}\": ${e.message}`);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // update host as last\n        if (data.model) {\n            const model = data.model;\n            data.model = null;\n            const hostname = tools.getHostName();\n            const obj = await this.objects.getObject(`system.host.${hostname}`);\n            if (obj && obj.common) {\n                if (\n                    (model.name && model.name !== 'JS controller' && obj.common.title === 'JS controller') ||\n                    (model.icon && !obj.common.icon) ||\n                    (model.color && !obj.common.color)\n                ) {\n                    if (model.name) {\n                        obj.common.title = model.name;\n                    }\n                    if (model.icon) {\n                        obj.common.icon = model.icon;\n                    }\n                    if (model.color) {\n                        obj.common.color = model.color;\n                    }\n\n                    obj.nonEdit = obj.nonEdit || {};\n                    obj.nonEdit.password = password;\n\n                    obj.common.title &&\n                        logger.info(`Update \"system.host.${hostname}:common.title\" = \"${obj.common.title}\"`);\n                    obj.common.icon &&\n                        logger.info(`Update \"system.host.${hostname}:common.icon\"  = \"${!!obj.common.icon}\"`);\n                    obj.common.color &&\n                        logger.info(`Update \"system.host.${hostname}:common.color\" = \"${obj.common.color}\"`);\n\n                    try {\n                        await this.objects.setObjectAsync(obj._id, obj);\n                        logger.info(`object \"system.host.${hostname}\" updated`);\n                    } catch (e) {\n                        logger.error(`Cannot update \"system.host.${hostname}\": ${e.message}`);\n                    }\n                }\n            }\n        }\n\n        // restart ioBroker\n        setTimeout(() => {\n            logger.warn('RESTART!');\n            process.exit(-1);\n        }, 2_000);\n    }\n}\n"],
  "mappings": "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",
  "names": ["fs", "deepClone"]
}
