/**
 *      Install adapter
 *
 *      Copyright 2013-2024 bluefox <dogafox@gmail.com>
 *
 *      MIT License
 *
 */
import { EXIT_CODES } from '@iobroker/js-controller-common';
import type { Client as StatesRedisClient } from '@iobroker/db-states-redis';
import type { Client as ObjectsRedisClient } from '@iobroker/db-objects-redis';
import type { ProcessExitCallback } from '../../lib/_Types.js';
export interface CLIInstallOptions {
    params: Record<string, any>;
    states: StatesRedisClient;
    objects: ObjectsRedisClient;
    processExit: ProcessExitCallback;
}
interface DownloadPacketReturnObject {
    stoppedList: ioBroker.InstanceObject[];
    packetName: string;
}
export interface CLIDownloadPacketOptions {
    /** will stop the db before upgrade ONLY use it for controller upgrade */
    stopDb?: boolean;
    /** name of the packet */
    packetName?: string;
    /** if unsafe-perm flag is required */
    unsafePerm?: boolean;
}
interface CreateInstanceOptions {
    instance?: number;
    ignoreIfExists?: boolean;
    enabled?: boolean;
    host?: string;
    port?: number;
}
export declare class Install {
    private readonly isRootOnUnix;
    private readonly objects;
    private readonly states;
    private readonly processExit;
    private readonly params;
    private readonly tarballRegex;
    private upload;
    private packetManager?;
    constructor(options: CLIInstallOptions);
    /**
     * Enables or disables given instances
     *
     * @param instances all instance objects
     * @param enabled if enable or disable
     */
    enableInstances(instances: ioBroker.InstanceObject[], enabled: boolean): Promise<void>;
    /**
     * Download given packet
     *
     * @param repoUrlOrRepo repository url or already the repository object
     * @param packetName name of the package to install
     * @param options options.stopDb will stop the db before upgrade ONLY use it for controller upgrade - db is gone afterwards, does not work with stoppedList
     * @param stoppedList list of stopped instances (as instance objects)
     */
    downloadPacket(repoUrlOrRepo: string | undefined | Record<string, any>, packetName: string, options?: CLIDownloadPacketOptions, stoppedList?: ioBroker.InstanceObject[]): Promise<DownloadPacketReturnObject>;
    /**
     * Install npm module from url
     *
     * @param npmUrl parameter passed to `npm install <npmUrl>`
     * @param options additional packet download options
     * @param debug if debug output should be printed
     */
    private _npmInstallWithCheck;
    /**
     * Extract the adapterName e.g. `hm-rpc` from url
     *
     * @param npmUrl url of the npm packet
     */
    private getAdapterNameFromUrl;
    /**
     * Perform npm installation of given package
     *
     * @param installOptions options of package to install
     */
    private _npmInstall;
    /**
     * Handle the NPM `ENOTEMPTY` error, by deleting different affected directories and retrying installation
     *
     * @param notEmptyErrorOptions options of package to install
     */
    private handleNpmNotEmptyError;
    private _npmUninstall;
    private _checkDependencies;
    private _uploadStaticObjects;
    /**
     * Installs given adapter
     *
     * @param adapter The adapter name
     * @param repoUrl
     * @param _installCount
     */
    installAdapter(adapter: string, repoUrl?: string, _installCount?: number): Promise<string | void>;
    installOSPackages(osDependencies: NonNullable<ioBroker.AdapterCommon['osDependencies']>): Promise<void>;
    callInstallOfAdapter(adapter: string, config: ioBroker.AdapterObject): Promise<string | void>;
    /**
     * Create adapter instance
     *
     * @param adapter The adapter name
     * @param options Additional instance creation options
     */
    createInstance(adapter: string, options?: CreateInstanceOptions): Promise<void>;
    /**
     * Enumerate all instances of an adapter
     *
     * @param knownObjIDs
     * @param notDeleted
     * @param adapter
     * @param instance
     */
    private _enumerateAdapterInstances;
    /**
     * Enumerate all meta objects of an adapter
     *
     * @param knownObjIDs
     * @param adapter
     * @param metaFilesToDelete
     */
    _enumerateAdapterMeta(knownObjIDs: string[], adapter: string, metaFilesToDelete: string[]): Promise<void>;
    private _enumerateAdapters;
    /**
     * Enumerates the devices of an adapter (or instance)
     *
     * @param knownObjIDs The already known object ids
     * @param adapter The adapter to enumerate the devices for
     * @param instance The instance to enumerate the devices for (optional)
     */
    private _enumerateAdapterDevices;
    /**
     * Enumerates the channels of an adapter (or instance)
     *
     * @param knownObjIDs The already known object ids
     * @param adapter The adapter to enumerate the channels for
     * @param instance The instance to enumerate the channels for (optional)
     */
    private _enumerateAdapterChannels;
    /**
     * Enumerates the states of an adapter (or instance)
     *
     * @param knownObjIDs The already known object ids
     * @param adapter The adapter to enumerate the states for
     * @param instance The instance to enumerate the states for (optional)
     */
    _enumerateAdapterStateObjects(knownObjIDs: string[], adapter: string, instance?: number): Promise<void>;
    /**
     * Enumerates the docs of an adapter (or instance)
     *
     * @param knownObjIDs The already known object ids
     * @param adapter The adapter to enumerate the states for
     * @param instance The instance to enumerate the states for (optional)
     */
    private _enumerateAdapterDocs;
    /**
     * Enumerate all state IDs of an adapter (or instance)
     *
     * @param knownStateIDs
     * @param adapter
     * @param instance
     */
    _enumerateAdapterStates(knownStateIDs: string[], adapter: string, instance?: number): Promise<void>;
    /**
     * delete WWW pages, objects and meta files
     *
     * @param adapter
     * @param metaFilesToDelete
     */
    private _deleteAdapterFiles;
    private _deleteAdapterStates;
    private _deleteAdapterObjects;
    /**
     * Deletes given adapter from filesystem and removes all instances
     *
     * @param adapter adapter name
     */
    deleteAdapter(adapter: string): Promise<EXIT_CODES>;
    /**
     * Deletes given instance of an adapter
     *
     * @param adapter adapter name like hm-rpc
     * @param instance e.g. 1, if undefined deletes all instances
     */
    deleteInstance(adapter: string, instance?: number): Promise<void | EXIT_CODES.CANNOT_DELETE_DEPENDENCY>;
    /**
     * Remove all node modules that has been installed by this instance
     *
     * @param adapter adapter name like hm-rpc
     * @param instance e.g. 1, if undefined deletes all instances
     */
    private _removeInstancesInstalledNodeModules;
    /**
     * Removes the custom attribute of the provided adapter/instance
     *
     * @param ids - id of the adapter/instance to check for
     */
    private _removeCustomFromObjects;
    /**
     * Installs an adapter from given url
     *
     * @param url url to install adapter from
     * @param name package name
     */
    installAdapterFromUrl(url: string, name: string): Promise<void>;
    /**
     * Checks if other adapters depend on this adapter
     *
     * @param adapter adapter name
     * @param instance instance, like 1
     * @returns if dependent exists, returns adapter name
     */
    private _hasDependentInstances;
    /**
     * Checks if adapter can also be found on another host than this
     *
     * @param adapter adapter name
     * @param instancesRows all instances objects view rows
     * @param scopedHostname hostname which should be assumed as local
     * @returns true if an instance is present on another host
     */
    private _checkDependencyFulfilledForeignHosts;
    /**
     * Checks if another instance then the given is present on this host
     *
     * @param adapter adapter name
     * @param instance instance number like 1
     * @param instancesRows all instances objects view rows
     * @param scopedHostname hostname which should be assumed as local
     * @returns true if another instance is present on this host
     */
    private _checkDependencyFulfilledThisHost;
    /**
     * Get all instances of an adapter which are on the current host
     *
     * @param adapter adapter name
     */
    private _getInstancesOfAdapter;
}
export {};
//# sourceMappingURL=setupInstall.d.ts.map