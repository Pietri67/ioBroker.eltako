"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cliTools_exports = {};
__export(cliTools_exports, {
  enumHosts: () => enumHosts,
  enumInstances: () => enumInstances,
  enumObjects: () => enumObjects,
  formatValue: () => formatValue,
  getInstanceName: () => getInstanceName,
  getObjectFrom: () => getObjectFrom,
  normalizeAdapterName: () => normalizeAdapterName,
  splitAdapterOrInstanceIdentifierWithVersion: () => splitAdapterOrInstanceIdentifierWithVersion,
  validateAdapterIdentifier: () => validateAdapterIdentifier,
  validateAdapterOrInstanceIdentifier: () => validateAdapterOrInstanceIdentifier
});
module.exports = __toCommonJS(cliTools_exports);
var import_js_controller_common = require("@iobroker/js-controller-common");
function formatValue(val, pretty = false) {
  const needsStringify = import_js_controller_common.tools.isObject(val) || import_js_controller_common.tools.isArray(val);
  const output = !needsStringify ? val : pretty ? JSON.stringify(val, null, 2) : JSON.stringify(val);
  return output;
}
function getObjectFrom() {
  return `system.host.${import_js_controller_common.tools.getHostName()}.cli`;
}
function normalizeAdapterName(name) {
  if (typeof name === "string") {
    name = name.replace(new RegExp(`^${import_js_controller_common.tools.appName}\\.`, "i"), "");
  }
  return name;
}
function validateAdapterIdentifier(name) {
  return /^[a-z0-9\-_]+$/.test(name);
}
function validateAdapterOrInstanceIdentifier(name) {
  return /^[a-z0-9\-_]+(\.\d+)?$/.test(name);
}
function splitAdapterOrInstanceIdentifierWithVersion(name) {
  const res = name.match(/^([a-z0-9\-_]+)\.?(\d+)?@?([a-z0-9\-_.]*)?$/);
  if (!res) {
    return null;
  }
  return {
    name: res[1],
    instance: res[2] || null,
    version: res[3] || null,
    nameWithVersion: `${res[1]}${res[3] ? `@${res[3]}` : ""}`
  };
}
function getInstanceName(instanceObjID) {
  return instanceObjID.replace(/^system\.adapter\./i, "");
}
async function enumInstances(objects, adapter) {
  const startkey = `system.adapter.${adapter ? `${adapter}.` : ""}`;
  const data = await enumObjects(objects, "instance", startkey);
  return data.filter((it) => !!(it && it._id.startsWith(startkey)));
}
function enumHosts(objects) {
  return enumObjects(objects, "host", "system.host.");
}
function enumObjects(objects, type, startkey) {
  return new Promise((resolve, reject) => {
    const endkey = `${startkey}\u9999`;
    objects.getObjectView("system", type, { startkey, endkey }, null, (err, res) => {
      if (err) {
        return reject(err);
      }
      let ret = [];
      if (res?.rows) {
        ret = res.rows.map((row) => row.value);
      }
      resolve(ret);
    });
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  enumHosts,
  enumInstances,
  enumObjects,
  formatValue,
  getInstanceName,
  getObjectFrom,
  normalizeAdapterName,
  splitAdapterOrInstanceIdentifierWithVersion,
  validateAdapterIdentifier,
  validateAdapterOrInstanceIdentifier
});
//# sourceMappingURL=cliTools.js.map
