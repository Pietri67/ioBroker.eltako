import { CLICommand, type CLICommandOptions } from './cliCommand.js';
/** Command ioBroker compact ... */
export declare class CLICompact extends CLICommand {
    private readonly config;
    constructor(options: CLICommandOptions);
    /**
     * Executes a command
     *
     * @param args
     */
    execute(args: any[]): void;
    /**
     * Output status of compact mode for host
     */
    statusCompactModeHost(): void;
    /**
     * Set compact mode for this host
     *
     * @param targetState enable or disable compact mode for host
     */
    setCompactModeHost(targetState: boolean): void;
    /**
     * Output the compact mode status for a defined adapter instance
     *
     * @param instance instance to output status for
     */
    statusCompactModeInstance(instance: `${string}.${number}`): void;
    /**
     * Put given instance in compact mode group
     *
     * @param instance instance to put in group
     * @param targetState if compact mode should be enabled for instance, if undefined `instance.common.runAsCompact` will not be updated
     * @param groupId the compact group id, if not given, it will be put in controller group
     */
    setCompactModeInstance(instance: `${string}.${number}`, targetState?: boolean, groupId?: string | number): void;
}
//# sourceMappingURL=cliCompact.d.ts.map