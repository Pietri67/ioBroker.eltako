import type { Client as ObjectsClient } from '@iobroker/db-objects-redis';
interface GetRepositoryOptions {
    /** The objects DB client */
    objects: ObjectsClient;
    /** Name of the repository */
    repoName?: string;
}
/**
 * Get JSON of the given repository
 *
 * @param options Repository specific options
 */
export declare function getRepository(options: GetRepositoryOptions): Promise<Record<string, ioBroker.RepositoryJsonAdapterContent>>;
interface VersionOptions {
    /** The adapter name to check the version for */
    adapterName: string;
    /** The objects DB instance */
    objects: ObjectsClient;
}
interface IgnoreVersionOptions extends VersionOptions {
    /** The version which will be checked */
    version: string;
}
/**
 * Get info if a specific version should be ignored of this adapter
 *
 * @param options name and target version of the adapter
 */
export declare function isVersionIgnored(options: IgnoreVersionOptions): Promise<boolean>;
/**
 * Ignore a specific version of an adapter
 *
 * @param options name and target version of the adapter
 */
export declare function ignoreVersion(options: IgnoreVersionOptions): Promise<void>;
/**
 * Recognize all updates of adapter again
 *
 * @param options name of the adapter
 */
export declare function recognizeVersion(options: VersionOptions): Promise<void>;
export {};
//# sourceMappingURL=utils.d.ts.map