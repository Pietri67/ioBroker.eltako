{
  "version": 3,
  "sources": ["../../../../src/lib/cli/cliPlugin.ts", "../../../../../../node_modules/@alcalzone/esm2cjs/shims/import.meta.url/shim.js"],
  "sourcesContent": ["import * as CLI from './messages.js';\nimport { type CLICommandOptions, CLICommand } from './cliCommand.js';\nimport { getObjectFrom } from './cliTools.js';\nimport { tools } from '@iobroker/js-controller-common';\nimport fs from 'fs-extra';\nimport path from 'node:path';\nimport { createRequire } from 'node:module';\n\n// eslint-disable-next-line unicorn/prefer-module\nconst require = createRequire(import.meta.url || `file://${__filename}`);\n\nconst controllerIoPackPath = require.resolve('iobroker.js-controller/io-package.json');\n\ninterface CLIPluginOptions extends CLICommandOptions {\n    /** If plugin is scoped on adapter */\n    adapter?: string;\n    /** If plugin is scoped on instance */\n    instance?: string;\n}\n\n/** Command iobroker plugin <enable/disable/status> <pluginname> [--host this/hostname] ... */\nexport class CLIPlugin extends CLICommand<CLIPluginOptions> {\n    /** @param options the cli command options */\n    constructor(options: CLIPluginOptions) {\n        super(options);\n    }\n\n    /**\n     * Executes a command\n     *\n     * @param args parsed cli args\n     */\n    execute(args: any[]): void {\n        const { callback, showHelp } = this.options;\n        const command = args[0];\n\n        switch (command) {\n            case 'on':\n            case 'enable':\n                return this.set(args, true);\n            case 'off':\n            case 'disable':\n                return this.set(args, false);\n            case 'status':\n                return this.status(args);\n            default:\n                CLI.error.unknownCommand('plugin', command);\n                showHelp();\n                return void callback(3);\n        }\n    }\n\n    /**\n     * Enables or disables the given plugin\n     *\n     * @param args the parsed CLI args\n     * @param enabled if plugin should be enabled\n     */\n    set(args: any[], enabled: boolean): void {\n        const { callback, dbConnect } = this.options;\n        const pluginName: string = args[1];\n        if (!pluginName) {\n            CLI.error.requiredArgumentMissing('pluginName', 'plugin enable <pluginname>');\n            return void callback(34);\n        }\n\n        let hostname: string;\n        let instance: string;\n\n        if (this.options.adapter || this.options.instance) {\n            instance = (this.options.adapter || this.options.instance) as string;\n            // default to instance 0\n            if (!/\\.\\d+$/.test(instance)) {\n                instance += '.0';\n            }\n        } else {\n            // Use host if no adapter was specified and fallback to the current one\n            hostname = this.options.host;\n            if (!hostname || hostname === 'this') {\n                hostname = tools.getHostName();\n            }\n        }\n\n        dbConnect(async params => {\n            const { states, objects, config: iobrokerJson } = params;\n\n            try {\n                // Check if the host or instance exists\n                let objectNamespace: string;\n                if (hostname) {\n                    objectNamespace = `system.host.${hostname}`;\n                    const hostObject = await objects.getObject(objectNamespace);\n                    if (!hostObject) {\n                        CLI.error.hostDoesNotExist(hostname);\n                        return void callback(30);\n                    }\n                } else {\n                    objectNamespace = `system.adapter.${instance}`;\n                    const instanceObject = await objects.getObject(objectNamespace);\n                    if (!instanceObject) {\n                        CLI.error.invalidInstance(instance);\n                        return void callback(30);\n                    }\n                }\n\n                // Check if the plugin is defined\n                if (!pluginExists(pluginName, iobrokerJson, instance)) {\n                    CLI.error.pluginNotDefined(pluginName, hostname, instance);\n                    return void callback(30);\n                }\n\n                // Create the plugin state if it does not exist\n                const pluginsFolderId = `${objectNamespace}.plugins`;\n                if (!(await objects.getObjectAsync(pluginsFolderId))) {\n                    await objects.setObject(pluginsFolderId, {\n                        type: 'folder',\n                        common: {\n                            name: `${hostname ? 'host' : 'instance'}: plugin states`,\n                        },\n                        native: {},\n                    });\n                }\n                const pluginFolderId = `${objectNamespace}.plugins.${pluginName}`;\n                if (!(await objects.getObjectAsync(pluginFolderId))) {\n                    await objects.setObject(pluginFolderId, {\n                        type: 'folder',\n                        common: {\n                            name: `${pluginName}: plugin states`,\n                        },\n                        native: {},\n                    });\n                }\n                const pluginEnabledId = `${pluginFolderId}.enabled`;\n                if (!(await objects.getObjectAsync(pluginEnabledId))) {\n                    await objects.setObject(pluginEnabledId, {\n                        type: 'state',\n                        common: {\n                            name: 'Plugin enabled',\n                            type: 'boolean',\n                            read: true,\n                            write: true,\n                            role: 'value',\n                        },\n                        native: {},\n                    });\n                }\n\n                // Update the state\n                await states.setStateAsync(pluginEnabledId, {\n                    val: enabled,\n                    from: getObjectFrom(),\n                });\n\n                // Notify the user that we are done\n                CLI.success.pluginEnabledOrDisabled(pluginName, hostname, instance, enabled);\n                return void callback();\n            } catch (err) {\n                CLI.error.unknown(err.message);\n                return void callback(1);\n            }\n        });\n    }\n\n    /**\n     * Prints the status of the given plugin\n     *\n     * @param args the parsed CLI arguments\n     */\n    status(args: any[]): void {\n        const { callback, dbConnect } = this.options;\n        const pluginName = args[1];\n        if (!pluginName) {\n            CLI.error.requiredArgumentMissing('pluginName', 'plugin status <pluginname>');\n            return void callback(34);\n        }\n\n        let hostname: string;\n        let instance: string;\n\n        if (this.options.adapter || this.options.instance) {\n            instance = (this.options.adapter || this.options.instance) as string;\n            // default to instance 0\n            if (!/\\.\\d+$/.test(instance)) {\n                instance += '.0';\n            }\n        } else {\n            // Use host if no adapter was specified and fallback to the current one\n            hostname = this.options.host;\n            if (!hostname || hostname === 'this') {\n                hostname = tools.getHostName();\n            }\n        }\n\n        dbConnect(async params => {\n            const { states, objects, config: iobrokerJson } = params;\n\n            try {\n                // Check if the host or instance exists\n                let objectNamespace: string;\n                if (hostname) {\n                    objectNamespace = `system.host.${hostname}`;\n                    const hostObject = await objects.getObject(objectNamespace);\n                    if (!hostObject) {\n                        CLI.error.hostDoesNotExist(hostname);\n                        return void callback(30);\n                    }\n                } else {\n                    objectNamespace = `system.adapter.${instance}`;\n                    const instanceObject = await objects.getObject(objectNamespace);\n                    if (!instanceObject) {\n                        CLI.error.invalidInstance(instance);\n                        return void callback(30);\n                    }\n                }\n\n                // Check if the plugin is defined\n                if (!pluginExists(pluginName, iobrokerJson, instance)) {\n                    CLI.error.pluginNotDefined(pluginName, hostname, instance);\n                    return void callback(30);\n                }\n\n                const pluginEnabledId = `${objectNamespace}.plugins.${pluginName}.enabled`;\n\n                // Read the state\n                try {\n                    const val = (await states.getStateAsync(pluginEnabledId))?.val;\n\n                    if (typeof val === 'boolean') {\n                        CLI.success.pluginStatus(pluginName, hostname, instance, val);\n                        return void callback();\n                    }\n                } catch {\n                    /* ignore */\n                }\n\n                // If the state could not be read or had no value, fall back to the configuration\n                const enabled = pluginEnabled(\n                    pluginName,\n                    instance,\n                    await objects.getObjectAsync('system.config'),\n                    iobrokerJson,\n                );\n                CLI.success.pluginStatus(pluginName, hostname, instance, enabled);\n                return void callback();\n            } catch (err) {\n                CLI.error.unknown(err.message);\n                return void callback(1);\n            }\n        });\n    }\n}\n\n/**\n * Checks if a plugin exists and can be configured\n *\n * @param pluginName\n * @param iobrokerJson The contents of iobroker.json\n * @param [adapter] (optional) - If passed, the adapter configuration will be searched for defined plugins instead of js-controller\n */\nfunction pluginExists(pluginName: string, iobrokerJson?: ioBroker.IoBrokerJson, adapter?: string): boolean {\n    // 1. check if the plugin is defined in io-package.json\n    try {\n        const ioPackPath = adapter ? path.join(tools.getAdapterDir(adapter)!, 'io-package.json') : controllerIoPackPath;\n        const ioPack = fs.readJSONSync(ioPackPath, { encoding: 'utf8' });\n        if (ioPack?.common?.plugins && pluginName in ioPack.common.plugins) {\n            return true;\n        }\n    } catch {\n        /* ignore */\n    }\n\n    // 2. check if the plugin is defined in iobroker.json\n    return !!(iobrokerJson?.plugins && pluginName in iobrokerJson.plugins);\n}\n\n/**\n * Checks if a plugin exists and can be configured\n *\n * @param pluginName name of the plugin, e.g. `sentry`\n * @param adapter If defined, the adapter configuration will be searched for defined plugins instead of js-controller\n * @param systemConfig The system.config object\n * @param iobrokerJson The contents of iobroker.json\n */\nfunction pluginEnabled(\n    pluginName: string,\n    adapter?: string,\n    systemConfig?: ioBroker.SystemConfigObject | null,\n    iobrokerJson?: ioBroker.IoBrokerJson,\n): boolean {\n    // 1. check if diagnostics are disabled in ioBroker\n    if (systemConfig?.common?.diag === 'none') {\n        return false;\n    }\n\n    // 2. check if the plugin is disabled in io-package.json\n    try {\n        const ioPackPath = adapter ? path.join(tools.getAdapterDir(adapter)!, 'io-package.json') : controllerIoPackPath;\n        const ioPack = fs.readJSONSync(ioPackPath, { encoding: 'utf8' });\n        if (\n            ioPack?.common?.plugins &&\n            pluginName in ioPack.common.plugins &&\n            ioPack.common.plugins[pluginName].enabled === false\n        ) {\n            return false;\n        }\n    } catch {\n        /* ignore */\n    }\n\n    // 3. check if the plugin is disabled in iobroker.json\n    if (\n        iobrokerJson?.plugins &&\n        pluginName in iobrokerJson.plugins &&\n        iobrokerJson.plugins[pluginName].enabled === false\n    ) {\n        return false;\n    }\n\n    // default: enabled\n    return true;\n}\n", "export const __import_meta_url =\n  typeof document === 'undefined' ? new (require('url'.replace('', '')).URL)('file:' + __filename).href :\n    (document.currentScript && document.currentScript.src || new URL('main.js', document.baseURI).href)\n"],
  "mappings": "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",
  "names": ["require", "path", "fs"]
}
