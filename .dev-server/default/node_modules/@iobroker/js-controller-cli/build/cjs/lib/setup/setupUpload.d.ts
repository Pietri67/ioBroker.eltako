/**
 *      Upload adapter files into DB
 *
 *      Copyright 2013-2024 bluefox <dogafox@gmail.com>
 *
 *      MIT License
 *
 */
import type { Client as StatesRedisClient } from '@iobroker/db-states-redis';
import type { Client as ObjectsRedisClient } from '@iobroker/db-objects-redis';
import type { InternalLogger } from '@iobroker/js-controller-common-db/tools';
export interface CLIUploadOptions {
    states: StatesRedisClient;
    objects: ObjectsRedisClient;
}
interface File {
    adapter: string;
    path: string;
}
interface Logger extends InternalLogger {
    log(message: string): void;
}
/** Logger without noisy levels */
type MinimalLogger = Omit<Logger, 'info' | 'silly' | 'debug'>;
export declare class Upload {
    private readonly states;
    private readonly objects;
    private readonly regApp;
    private callbackId;
    private readonly sendToHostFromCliAsync;
    private callbacks;
    private lastProgressUpdate;
    constructor(_options: CLIUploadOptions);
    checkHostsIfAlive(hosts: string[]): Promise<string[]>;
    getHosts(onlyAlive: boolean): Promise<string[]>;
    checkRestartOther(adapter: string): Promise<void>;
    sendToHostFromCli(host: string, command: string, message: ioBroker.MessagePayload, callback: ioBroker.MessageCallback | null): void;
    uploadAdapterFullAsync(adapters: string[]): Promise<void>;
    /**
     * Uploads a file
     *
     * @param source source path
     * @param target target path
     */
    uploadFile(source: string, target: string): Promise<string>;
    eraseFiles(files: any[], logger: MinimalLogger | typeof console): Promise<void>;
    /**
     * Collect Files of an adapter specific directory from the ioBroker storage
     *
     * @param adapter Adapter name
     * @param path path in the adapter specific storage space
     * @param logger Logger instance
     */
    collectExistingFilesToDelete(adapter: string, path: string, logger: MinimalLogger | typeof console): Promise<{
        filesToDelete: File[];
        dirs: File[];
    }>;
    upload(adapter: string, isAdmin: boolean, files: string[], id: string, logger: MinimalLogger | typeof console): Promise<string>;
    walk(dir: string, _results?: string[]): string[];
    /**
     * Upload given adapter
     *
     * @param adapter adapter name
     * @param isAdmin if admin folder should be uploaded too
     * @param forceUpload if upload should be forced
     * @param subTree subtree path to upload
     * @param _logger logger instance
     */
    uploadAdapter(adapter: string, isAdmin: boolean, forceUpload: boolean, subTree?: string, _logger?: MinimalLogger): Promise<string>;
    extendNative(target: Record<string, any>, additional: Record<string, unknown>): Record<string, any>;
    extendCommon(target: Record<string, any>, additional: Record<string, any>, instance: string): ioBroker.InstanceCommon;
    /**
     * Extends the `system.instance.adapter.<instanceNumber>` objects with the native properties from adapters io-package.json
     *
     * @param name name of the adapter
     * @param ioPack parsed io-package content
     * @param hostname name of the host where the adapter is installed on
     * @param logger instance of logger
     */
    _upgradeAdapterObjectsHelper(name: string, ioPack: ioBroker.AdapterObject, hostname: string, logger: MinimalLogger | typeof console): Promise<string>;
    /**
     * Create object from io-package json
     *
     * @param name adapter name
     * @param ioPack IoPack content
     * @param logger logger instance
     */
    upgradeAdapterObjects(name: string, ioPack?: ioBroker.AdapterObject, logger?: MinimalLogger | typeof console): Promise<string>;
}
export {};
//# sourceMappingURL=setupUpload.d.ts.map