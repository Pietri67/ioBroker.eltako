{
  "version": 3,
  "sources": ["../../../../src/lib/cli/cliObjects.ts"],
  "sourcesContent": ["import { CLICommand, type CLICommandOptions } from './cliCommand.js';\n\nimport * as CLI from './messages.js';\nimport { formatValue } from './cliTools.js';\nimport { tools, EXIT_CODES } from '@iobroker/js-controller-common';\nimport type { Client as ObjectsClient } from '@iobroker/db-objects-redis';\nimport type { Client as StatesClient } from '@iobroker/db-states-redis';\n\ninterface ParsedPropPathAndAssignment {\n    propPath?: string;\n    value: unknown;\n}\n\n/** Command iobroker object ... */\nexport class CLIObjects extends CLICommand {\n    constructor(options: CLICommandOptions) {\n        super(options);\n    }\n\n    /**\n     * Executes a command\n     *\n     * @param args\n     */\n    execute(args: any[]): void {\n        const { callback, showHelp } = this.options;\n        const command = args[0];\n\n        switch (command) {\n            case 'chmod':\n                return this.chmod(args);\n            case 'chown':\n                return this.chown(args);\n            case 'list':\n            case 'l':\n                return this.list(args);\n            case 'get':\n                return this.get(args);\n            case 'set':\n                return this.set(args);\n            case 'extend':\n                return this.extend(args);\n            case 'delete':\n            case 'del':\n                return this.delete(args);\n            case 'getDBVersion':\n                return this.getDBVersion();\n            case 'setDBVersion':\n                return this.setDBVersion();\n            case 'activateSets':\n                return this.activateSets();\n            case 'deactivateSets':\n                return this.deactivateSets();\n            default:\n                CLI.error.unknownCommand('object', command);\n                showHelp();\n                return void callback(3);\n        }\n    }\n\n    /**\n     * Activates the usage of Redis Sets\n     */\n    activateSets(): void {\n        const { callback, dbConnect } = this.options;\n        dbConnect(async params => {\n            const { states, objects } = params;\n\n            const useSetsIndicator = await objects.getMeta('objects.features.useSets');\n\n            if (!useSetsIndicator || !parseInt(useSetsIndicator)) {\n                // all hosts need to be stopped for this\n                if (await tools.isHostRunning(objects, states)) {\n                    console.log('Cannot activate the usage of Redis Sets while one or more hosts are running');\n                    return void callback(EXIT_CODES.CONTROLLER_RUNNING);\n                }\n\n                await objects.activateSets();\n                const noMigrated = await objects.migrateToSets();\n\n                if (noMigrated) {\n                    console.log(`Successfully migrated ${noMigrated} objects to Redis Sets`);\n                }\n                console.log(\n                    `Successfully activated the usage of Redis Sets. Please make sure to only use js-controller 4.0 or higher on all hosts!`,\n                );\n            } else {\n                console.log('Redis Sets are already activated.');\n            }\n            return void callback(EXIT_CODES.NO_ERROR);\n        });\n    }\n\n    /**\n     * Deactivates the usage of Redis Sets\n     */\n    deactivateSets(): void {\n        const { callback, dbConnect } = this.options;\n        dbConnect(async params => {\n            const { objects } = params;\n            const useSetsIndicator = await objects.getMeta('objects.features.useSets');\n\n            if (useSetsIndicator && parseInt(useSetsIndicator)) {\n                await objects.deactivateSets();\n                console.log(`Successfully deactivated the usage of Redis Sets.`);\n            } else {\n                console.log('Redis Sets are already deactivated.');\n            }\n            return void callback(EXIT_CODES.NO_ERROR);\n        });\n    }\n\n    /**\n     * Get the protocol version\n     */\n    getDBVersion(): void {\n        const { callback, dbConnect } = this.options;\n        dbConnect(async params => {\n            const { objects } = params;\n\n            const version = await objects.getProtocolVersion();\n            console.log(`Current Objects DB protocol version: ${version}`);\n            return void callback(EXIT_CODES.NO_ERROR);\n        });\n    }\n\n    /**\n     * Set protocol version\n     */\n    setDBVersion(): void {\n        const { callback, dbConnect } = this.options;\n        dbConnect(async params => {\n            const { objects } = params;\n            const rl = await import('readline-sync');\n\n            let answer = rl.question('Changing the protocol version will restart all hosts! Continue? [N/y]', {\n                limit: /^(yes|y|n|no)$/i,\n                defaultInput: 'no',\n            });\n\n            answer = answer.toLowerCase();\n\n            if (answer !== 'y' && answer !== 'yes') {\n                console.log('Protocol version has not been changed!');\n                return void callback(EXIT_CODES.NO_ERROR);\n            }\n\n            try {\n                await objects.setProtocolVersion(this.options.version);\n            } catch (e) {\n                console.error(`Cannot update protocol version: ${e.message}`);\n                return void callback(1);\n            }\n            console.log(`Objects DB protocol updated to version ${this.options.version}`);\n            return void callback(EXIT_CODES.NO_ERROR);\n        });\n    }\n\n    /**\n     * Changes access rights for all objects matching the pattern\n     *\n     * @param args\n     */\n    chmod(args: any[]): void {\n        const { callback, dbConnect } = this.options;\n        let [modeObject, modeState, pattern] = args.slice(1);\n\n        // Yargs converts numeric string to number, so we can use that to test\n        // Afterwards we parse them ourselves, but with base16\n        if (typeof modeObject !== 'number') {\n            CLI.error.requiredArgumentMissing('mode', 'object chmod 644 system.*');\n            return void callback(1);\n        }\n        modeObject = parseInt(modeObject.toString(), 16);\n\n        if (typeof modeState === 'number') {\n            // a mode for the state was given, convert it\n            modeState = parseInt(modeState.toString(), 16);\n        } else {\n            pattern = modeState;\n            modeState = undefined;\n        }\n\n        if (pattern === undefined) {\n            CLI.error.requiredArgumentMissing('pattern', 'object chmod 644 system.*');\n            return void callback(1);\n        }\n\n        dbConnect(params => {\n            const { objects, states } = params;\n\n            objects.chmodObject(\n                pattern,\n                { user: 'system.user.admin', object: modeObject, state: modeState },\n                (err, processed) => {\n                    // Print the new object rights\n                    this.printObjectList(objects, states, err?.message, processed);\n                },\n            );\n        });\n    }\n\n    /**\n     * Changes owner for all objects matching the pattern\n     *\n     * @param args\n     */\n    chown(args: any[]): void {\n        const { callback, dbConnect } = this.options;\n        let [user, group, pattern] = args.slice(1);\n\n        if (!pattern) {\n            pattern = group;\n            group = undefined;\n        }\n\n        if (!user) {\n            CLI.error.requiredArgumentMissing('user', 'object chown user system.*');\n            return void callback(1);\n        } else if (!user.startsWith('system.user.')) {\n            user = `system.user.${user}`;\n        }\n        if (group && !group.startsWith('system.group.')) {\n            group = `system.group.${group}`;\n        }\n\n        if (!pattern) {\n            CLI.error.requiredArgumentMissing('pattern', 'object chown user system.*');\n            return void callback(1);\n        }\n        dbConnect(params => {\n            const { objects, states } = params;\n\n            objects.chownObject(\n                pattern,\n                { user: 'system.user.admin', owner: user, ownerGroup: group },\n                (err, processed) => {\n                    // Print the new object rights\n                    this.printObjectList(objects, states, err?.message, processed);\n                },\n            );\n        });\n    }\n\n    /**\n     * Lists all objects matching a pattern and their access rights\n     *\n     * @param args\n     */\n    list(args: any[]): void {\n        const { callback, dbConnect } = this.options;\n        let pattern = args[1];\n        if (typeof pattern === 'string') {\n            pattern = { startkey: pattern.replace('*', ''), endkey: pattern.replace('*', '\\u9999') };\n        }\n\n        dbConnect(params => {\n            const { objects, states } = params;\n\n            objects.getObjectList(pattern, { user: 'system.user.admin', sorted: true }, (err, processed) => {\n                this.printObjectList(\n                    objects,\n                    states,\n                    err?.message,\n                    processed && processed.rows && processed.rows.map(r => r.value),\n                );\n                return void callback(EXIT_CODES.NO_ERROR);\n            });\n        });\n    }\n\n    /**\n     * Retrieves an object or its property from the DB and prints it\n     *\n     * @param args\n     */\n    get(args: any[]): void {\n        const { callback, pretty, dbConnect } = this.options;\n        const [id, propPath] = args.slice(1);\n        if (!id) {\n            CLI.error.requiredArgumentMissing('id', 'object get id [propertypath]');\n            return void callback(1);\n        }\n\n        // If propPath is passed, the given property will be retrieved instead.\n        // For example: `\"native.something[2].onething\"` selects `onething` of the 3rd array element of `object.native.something`.\n\n        dbConnect(params => {\n            const { objects } = params;\n\n            objects.getObject(id, (err, res) => {\n                if (err || !res) {\n                    CLI.error.objectNotFound(id, err?.message);\n                    return void callback(3);\n                }\n                if (typeof propPath === 'string') {\n                    // We want to select a part of the object\n                    try {\n                        res = deepSelectProperty(res, propPath);\n                    } catch {\n                        CLI.error.objectPropertyNotFound(id, propPath);\n                        return void callback(3);\n                    }\n                }\n                console.log(formatValue(res, pretty));\n                return void callback(EXIT_CODES.NO_ERROR);\n            });\n        });\n    }\n\n    /**\n     * Updates an object or its property with the given value\n     *\n     * @param args\n     */\n    set(args: any[]): void {\n        const { callback, dbConnect } = this.options;\n        const id: string = args[1];\n        if (!id) {\n            CLI.error.requiredArgumentMissing('id', 'object set id [propertypath=]value');\n            return void callback(1);\n        }\n\n        const lastArg = args.length >= 2 ? args.slice(2).join(' ') : undefined;\n        const parsedArg = parsePropPathAndAssignment(lastArg!);\n        if (!parsedArg) {\n            CLI.error.invalidPropertyOrValue();\n            return void callback(3);\n        }\n        const { propPath, value } = parsedArg;\n\n        dbConnect(params => {\n            const { objects } = params;\n\n            const doSetObject = (obj: any): void => {\n                objects.setObject(id, obj, err => {\n                    if (err) {\n                        CLI.error.cannotUpdateObject(id, err.message);\n                        return void callback(1);\n                    }\n                    CLI.success.objectUpdated(id);\n                    return void callback(EXIT_CODES.NO_ERROR);\n                });\n            };\n            if (!propPath) {\n                // We set the entire object, no need to retrieve it first\n                doSetObject(value as any);\n            } else {\n                // We want to update a part of the object\n                // Retrieve the object first\n                objects.getObject(id, async (err, res) => {\n                    if (err || !res) {\n                        CLI.error.objectNotFound(id, err?.message);\n                        return void callback(3);\n                    }\n                    try {\n                        deepSetProperty(res, propPath, value);\n                    } catch {\n                        CLI.error.objectPropertyNotFound(id, propPath);\n                        return void callback(3);\n                    }\n\n                    // auto encrypt -> only do that here, no one configures an instance by setting the whole object,\n                    // else it would be copied and probably already encrypted\n                    if (\n                        /^system\\.adapter\\.(?<adapterName>.+)\\.(?<instanceNr>\\d+)$/g.test(id) &&\n                        'encryptedNative' in res\n                    ) {\n                        await this._autoEncrypt(objects, res, propPath, value);\n                    }\n\n                    doSetObject(res);\n                });\n            }\n        });\n    }\n\n    /**\n     * Encrypts all newly set properties of encryptedNative - currently customized for propPath\n     *\n     * @param objects - objects db instance\n     * @param res - object which will be adapted\n     * @param propPath - path of the changed property\n     * @param value - value which has been newly set to the property\n     */\n    private async _autoEncrypt(\n        objects: ObjectsClient,\n        res: ioBroker.AnyObject,\n        propPath: string,\n        value: any,\n    ): Promise<void> {\n        // input: it's an instance object and has encrypted native, was a native value set?\n        if (/^native\\..+[^.]$/g.test(propPath) && typeof value === 'string') {\n            // single native property\n            const prop = propPath.split('.')[1];\n            if ('encryptedNative' in res && res.encryptedNative?.includes(prop)) {\n                try {\n                    const config = await objects.getObjectAsync('system.config');\n                    res.native[prop] = tools.encrypt(config!.native.secret, res.native[prop]);\n                } catch (e) {\n                    console.error(`Could not auto-encrypt property \"${prop}\": ${e.message}`);\n                }\n            }\n        } else if (propPath === 'native' && tools.isObject(value)) {\n            // whole native attribute\n            let config;\n            for (const prop in value) {\n                if (\n                    typeof (res.native as Record<string, any>)[prop] === 'string' &&\n                    'encryptedNative' in res &&\n                    res.encryptedNative?.includes(prop)\n                ) {\n                    try {\n                        config = config || (await objects.getObjectAsync('system.config'))!;\n                        res.native[prop] = tools.encrypt(config.native.secret, res.native[prop]);\n                    } catch (e) {\n                        console.error(`Could not auto-encrypt property \"${prop}\": ${e.message}`);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Extends an object with the given value\n     *\n     * @param args\n     */\n    extend(args: any[]): void {\n        const { callback, dbConnect } = this.options;\n        const id: string = args[1];\n        if (!id) {\n            CLI.error.requiredArgumentMissing('id', 'object extend id <json-value>');\n            return void callback(1);\n        }\n\n        const lastArg = args.length >= 2 ? args.slice(2).join(' ') : undefined;\n        const parsedArg = parsePropPathAndAssignment(lastArg!);\n        // extend does not accept a property path, so error when one is passed\n        if (!parsedArg || parsedArg.propPath) {\n            CLI.error.invalidJSONValue();\n            return void callback(3);\n        }\n        const { value } = parsedArg;\n\n        dbConnect(params => {\n            const { objects } = params;\n\n            objects.extendObject(id, value as any, null, err => {\n                if (err) {\n                    CLI.error.cannotUpdateObject(id, err.message);\n                    return void callback(1);\n                }\n                CLI.success.objectUpdated(id);\n                return void callback(EXIT_CODES.NO_ERROR);\n            });\n        });\n    }\n\n    /**\n     * Collects all object for specific path\n     *\n     * @param objects class\n     * @param params parameters for getObjectView\n     */\n    async _collectObjects(objects: ObjectsClient, params: ioBroker.GetObjectViewParams): Promise<ioBroker.AnyObject[]> {\n        const types = [\n            'state',\n            'channel',\n            'device',\n            'enum',\n            'instance',\n            'host',\n            'adapter',\n            'meta',\n            'config',\n            'group',\n            'user',\n            'script',\n        ];\n        const result: ioBroker.AnyObject[] = [];\n\n        for (const type of types) {\n            try {\n                const res = await objects.getObjectViewAsync('system', type, params);\n                res.rows.forEach(item => {\n                    if (item.value) {\n                        result.push(item.value);\n                    }\n                });\n            } catch {\n                // ignore\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Delete all object from list sequentially\n     *\n     * @param objects class\n     * @param ids IDs\n     * @param callback\n     */\n    async _deleteObjects(objects: ObjectsClient, ids: string[], callback: (exitCode: number) => void): Promise<void> {\n        if (!ids || !ids.length) {\n            return tools.maybeCallback(callback, EXIT_CODES.NO_ERROR);\n        }\n        let allEnums;\n\n        try {\n            // cache all enums, else it will be slow to delete many objects\n            allEnums = await tools.getAllEnums(objects);\n        } catch (e) {\n            console.error(`Could not retrieve all enums: ${e.message}`);\n        }\n\n        for (const id of ids) {\n            try {\n                await objects.delObjectAsync(id);\n                await tools.removeIdFromAllEnums(objects, id, allEnums);\n            } catch (e) {\n                console.warn(`Could not delete object or remove \"${id}\" from enums: ${e.message}`);\n            }\n        }\n        return tools.maybeCallback(callback, EXIT_CODES.NO_ERROR);\n    }\n\n    /**\n     * Deletes an object\n     *\n     * @param args\n     */\n    delete(args: any[]): void {\n        const { callback, dbConnect } = this.options;\n        const id: string = args[1];\n        if (!id) {\n            CLI.error.requiredArgumentMissing('id', 'object delete id');\n            return void callback(1);\n        }\n\n        dbConnect(async params => {\n            const { objects } = params;\n\n            if (id.endsWith('*')) {\n                const params = {\n                    startkey: id.replace(/\\*/g, ''),\n                    endkey: id.replace(/\\*/g, '\\u9999'),\n                };\n\n                const result = await this._collectObjects(objects, params);\n                if (!result || !result.length) {\n                    console.log('No IDs found for this pattern.');\n                    return void callback(EXIT_CODES.NO_ERROR);\n                }\n                const ids = result.map(item => item._id);\n\n                // if no auto confirmation, ask user\n                if (!this.options.f && this.options.y && !this.options.yes) {\n                    const rl = (await import('node:readline')).createInterface({\n                        input: process.stdin,\n                        output: process.stdout,\n                    });\n                    rl.question(`${result.length} object(s) will be deleted. Are you sure? [y/N]: `, answer => {\n                        rl.close();\n                        if (\n                            answer === 'y' ||\n                            answer === 'yes' ||\n                            answer === 'j' ||\n                            answer === 'ja' ||\n                            answer === '\u0434\u0430' ||\n                            answer === '\u0434'\n                        ) {\n                            this._deleteObjects(objects, ids, callback);\n                        } else {\n                            console.log('Aborted.');\n                            return void callback(3);\n                        }\n                    });\n                } else {\n                    this._deleteObjects(objects, ids, callback);\n                }\n            } else {\n                // only one object\n                objects.delObject(id, async err => {\n                    if (err) {\n                        CLI.error.objectNotFound(id, err.message);\n                        callback(3);\n                    } else {\n                        try {\n                            await tools.removeIdFromAllEnums(objects, id);\n                            CLI.success.objectDeleted(id);\n                            callback(EXIT_CODES.NO_ERROR);\n                        } catch (e) {\n                            CLI.error.cannotDeleteObjectFromEnums(id, e.message);\n                            callback(3);\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Prints a list of objects and its access properties\n     *\n     * @param objects objects db\n     * @param states states db\n     * @param err An error (if one occurred)\n     * @param objList The object list to print\n     */\n    async printObjectList(\n        objects: ObjectsClient,\n        states: StatesClient,\n        err: string | undefined,\n        objList?: ioBroker.AnyObject[],\n    ): Promise<void> {\n        // TODO: is this supposed to be here?\n        const { callback } = this.options;\n        if (err) {\n            console.error(err);\n            return void callback(33);\n        }\n        if (objList !== null && objList !== undefined) {\n            const { List } = await import('../setup/setupList.js');\n            const list = new List({\n                states,\n                objects,\n                processExit: callback,\n            });\n            list.showObjectHeader();\n            objList.forEach(list.showObject);\n        }\n        setTimeout(callback, 1_000);\n    }\n}\n\n/**\n * Reverses a string\n *\n * @param str The string to reverse\n */\nfunction reverseString(str: string): string {\n    return Array.from(str).reverse().join('');\n}\n\n/**\n * Normalizes a property path for use in deepSelectProperty and deepSetProperty\n *\n * @param path The property path to normalize\n */\nfunction normalizePropertyPath(path: string): string {\n    // Basically we want to support paths like \"obj[1][2]\", but the other methods expect \"obj.[1].[2]\"\n    // So we need to replace all occurences of square brackets without leading dots\n    // JS Regex only supports negative lookbehind in ES 2018, so we fake it using reversed strings and\n    // negative lookahead\n    const arrayIndexRegex = /(]\\d+\\[)(?!\\.)/g; // Reversing the string reverses the brackets too\n    let ret = reverseString(path);\n    // Append the dot to each bracket, since we're going to reverse it\n    ret = ret.replace(arrayIndexRegex, '$1.');\n    return reverseString(ret);\n}\n\n/**\n * Selects a property of an object or its sub-objects and returns it if it exists. E.g.\n * `deepSelectProperty(obj, \"common.asdf.qwer\")` => `obj.common.asdf.qwer`\n *\n * @param object The object to select a property from\n * @param path The property path to search for\n */\nfunction deepSelectProperty(object: ioBroker.AnyObject, path: string): any {\n    /**\n     * @param obj\n     * @param pathArr\n     */\n    function _deepSelectProperty(obj: any, pathArr: string[]): unknown {\n        // are we there yet? then return obj\n        if (!pathArr.length) {\n            return obj;\n        }\n        // go deeper\n        let propName = pathArr.shift()!;\n        if (/\\[\\d+]/.test(propName)) {\n            // this is an array index\n            // @ts-expect-error // TODO: fix it - this is not ts fashion, assigning numbers to the string array here\n            propName = parseInt(propName.slice(1, -1));\n        }\n        return _deepSelectProperty(obj[propName], pathArr);\n    }\n    path = normalizePropertyPath(path);\n    return _deepSelectProperty(object, path.split('.'));\n}\n\n/**\n * Changes a property of an object or its sub-objects if it exists. Opposite of `deepSelectProperty`.\n *\n * @param object The object to replace a property in\n * @param path The property path to search for\n * @param value\n */\nfunction deepSetProperty(object: ioBroker.AnyObject, path: string, value: any): void {\n    /**\n     * @param obj\n     * @param pathArr\n     */\n    function _deepSetProperty(obj: any, pathArr: string[]): void {\n        // are we there yet? then return obj\n        if (pathArr.length === 1) {\n            obj[pathArr[0]] = value;\n            return;\n        }\n        // go deeper\n        let propName = pathArr.shift()!;\n        if (/\\[\\d+]/.test(propName)) {\n            // this is an array index\n            // @ts-expect-error // TODO: fix it - this is not ts fashion, assigning numbers to the string array here\n            propName = parseInt(propName.slice(1, -1));\n        }\n        _deepSetProperty(obj[propName], pathArr);\n    }\n    path = normalizePropertyPath(path);\n    _deepSetProperty(object, path.split('.'));\n}\n\n/**\n * Tries to parse a CLI argument that could be used to set an object\n *\n * @param arg The CLI argument containing the value to be set\n */\nfunction parseCLIValue(arg: string): any {\n    try {\n        // JSON.parse does not allow plain strings\n        return JSON.parse(arg);\n    } catch {\n        // arg is a string\n        return arg;\n    }\n}\n\n/**\n * Tries to parse a CLI argument of the form [propPath=]value.\n *\n * @param arg The CLI argument containing an optional prop path and a JSON value\n */\nfunction parsePropPathAndAssignment(arg: string): ParsedPropPathAndAssignment | undefined {\n    const equalsIndex = arg.indexOf('=');\n    if (equalsIndex > -1) {\n        // This might contain a propPath AND a value\n        const propPath = arg.substr(0, equalsIndex);\n        const valueString = arg.substr(equalsIndex + 1);\n        // For partial assignments, allow strings as the value\n        const value = parseCLIValue(valueString);\n        return { propPath, value };\n    }\n    // This is a full assignment, allow only objects\n    try {\n        const value = JSON.parse(arg);\n        if (!tools.isObject(value)) {\n            return undefined;\n        }\n        return { value };\n    } catch {\n        // nope!\n        return undefined;\n    }\n}\n"],
  "mappings": "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",
  "names": ["params"]
}
