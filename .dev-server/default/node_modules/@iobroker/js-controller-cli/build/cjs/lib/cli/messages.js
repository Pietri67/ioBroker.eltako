"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var messages_exports = {};
__export(messages_exports, {
  error: () => error,
  success: () => success,
  warn: () => warn
});
module.exports = __toCommonJS(messages_exports);
var import_js_controller_common = require("@iobroker/js-controller-common");
const errorMessages = Object.freeze({
  stateNotFound: (stateID, error2) => `The state ${stateID} was not found!${error2 ? ` Reason: ${error2}` : ""}`,
  stateNotBinary: (stateId) => `State "${stateId}" is not binary.`,
  stateBinaryGetUnsupported: (stateId) => `State "${stateId}" is a binary state, please use getBinary.`,
  stateBinarySetUnsupported: (stateId) => `State "${stateId}" is a binary state and cannot be set via cli.`,
  objectNotFound: (objectID, error2) => `The object ${objectID} was not found!${error2 ? ` Reason: ${error2}` : ""}`,
  cannotUpdateObject: (objectID, error2) => `The object ${objectID} could not be updated!${error2 ? ` Reason: ${error2}` : ""}`,
  cannotDeleteObject: (objectID, error2) => `The object ${objectID} cannot be deleted!${error2 ? ` Reason: ${error2}` : ""}`,
  cannotDeleteObjectFromEnums: (objectID, error2) => `The object ${objectID} could not be deleted from enums!${error2 ? ` Reason: ${error2}` : ""}`,
  cannotChangeObject: (objectID, error2) => `The object ${objectID} cannot be changed!${error2 ? ` Reason: ${error2}` : ""}`,
  objectPropertyNotFound: (objectID, propPath) => `The requested property "${propPath}" or one of its parents was not found in the object "${objectID}"!`,
  invalidPropertyOrValue: () => `The property path or value is not valid. Please make sure the value is valid JSON.`,
  invalidJSONValue: () => `The given value is not valid JSON.`,
  unknownCommand: (prefix, command) => `Unknown command "${prefix} ${command}"!`,
  requiredArgumentMissing: (argName, exampleCommand) => `The required argument "${argName}" is missing!${exampleCommand ? ` Example: "${exampleCommand}"` : ""}`,
  noInstancesFound: (adapter) => `Cannot find any instances of "${adapter}"!`,
  invalidInstance: (instance) => `The instance "${instance}" does not exist!`,
  specifyInstance: (adapter, adapterInstances) => `The adapter "${adapter}" has multiple instances! Please specify which one should be started: "${adapterInstances.join('", "')}".`,
  adapterDirNotFound: (adapter) => `Cannot find the installation dir for adapter "${adapter}"!`,
  mainFileNotFound: (adapter) => `Cannot find the main file for adapter "${adapter}"!`,
  cannotLoadIoPackage: (adapter) => `Cannot load the io-package.json file for adapter "${adapter}"!`,
  wrongCommandPrefix: (wrongPrefix, command, correctPrefix) => `The command ${command} is not intended to be used with ${wrongPrefix}!${correctPrefix ? ` Please use "${correctPrefix} ${command}" instead.` : ""}`,
  unknown: (err) => `An unknown error occurred: ${err}`,
  cannotChangeRunningSystem: () => `Cannot execute changes on running system. Stop ${import_js_controller_common.tools.appName} first.`,
  noHostThisInMultihost: () => `Cannot use this command in multihost!`,
  hostAlreadyExists: (hostname) => `A host with the name "${hostname}" already exists!`,
  hostDoesNotExist: (hostname) => `The host "${hostname}" does not exist!`,
  dontRemoveCurrentHost: (hostname) => `Cannot remove host "${hostname}" from itself!`,
  pluginNotDefined: (pluginName, host, instance) => `The plugin "${pluginName}" does not exist for ${host ? `host "${host}"` : `instance "${instance}"`}!`,
  cert: (certName) => `Certificate "${certName}" not found or error parsing certificate information.`,
  instanceAlreadyRunning: (instance) => `The instance "${instance}" is already running, please stop instance first.`
});
const successMessages = Object.freeze({
  objectUpdated: (objectID) => `The object "${objectID}" was updated successfully.`,
  objectDeleted: (objectID) => `The object "${objectID}" was deleted.`,
  stateUpdated: (stateID, value, ack) => `The state "${stateID}" was set to "${value}"${ack === void 0 ? "" : ` with flag ack=${ack}`}`,
  stateDeleted: (stateID) => `The state "${stateID}" was deleted.`,
  adapterStarted: (adapter) => `The adapter "${adapter}" was started.`,
  adapterStopped: (adapter) => `The adapter "${adapter}" was stopped.`,
  adapterRestarted: (adapter) => `The adapter "${adapter}" was restarted.`,
  systemStatus: (isRunning) => isRunning ? `At least one ${import_js_controller_common.tools.appName} host is running.` : `No ${import_js_controller_common.tools.appName} host is running.`,
  controllerStatus: (isRunning) => `${import_js_controller_common.tools.appName} is ${isRunning ? "" : "not "}running on this host.`,
  messageSent: (adapter, command, message) => `The command "${command}" was sent to "${adapter}" with the message "${message}".`,
  hostRenamed: (from, to) => `Host "${from}" successfully renamed to "${to}".`,
  instanceHostChanged: (instance, from, to) => `The host for instance "${instance}" was changed from "${from}" to "${to}".`,
  hostDeleted: (hostname) => `The host "${hostname}" was deleted.`,
  pluginEnabledOrDisabled: (pluginName, host, instance, status) => `The plugin "${pluginName}" was successfully ${status ? "enabled" : "disabled"} for ${host ? `host "${host}"` : `instance "${instance}"`}.`,
  pluginStatus: (pluginName, host, instance, status) => `The plugin "${pluginName}" is ${status ? "enabled" : "disabled"} for ${host ? `host "${host}"` : `instance "${instance}"`}.`
});
const warnings = Object.freeze({
  noInstancesFoundOnHost: (hostname) => hostname ? `No instances found for host "${hostname}"!` : `No instances found!`
});
const success = {};
for (const method of Object.keys(successMessages)) {
  success[method] = (...args) => console.log(successMessages[method](...args));
}
const warn = {};
for (const method of Object.keys(warnings)) {
  warn[method] = (...args) => console.log(warnings[method](...args));
}
const error = {};
for (const method of Object.keys(errorMessages)) {
  error[method] = (...args) => console.error(errorMessages[method](...args));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  error,
  success,
  warn
});
//# sourceMappingURL=messages.js.map
