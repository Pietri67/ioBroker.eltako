"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cliMessage_exports = {};
__export(cliMessage_exports, {
  CLIMessage: () => CLIMessage
});
module.exports = __toCommonJS(cliMessage_exports);
var CLI = __toESM(require("./messages.js"), 1);
var import_cliCommand = require("./cliCommand.js");
var import_cliTools = require("./cliTools.js");
class CLIMessage extends import_cliCommand.CLICommand {
  /** @param options The CLI Message options */
  constructor(options) {
    super(options);
  }
  /**
   * Executes a command
   *
   * @param args parsed arguments
   */
  execute(args) {
    const { callback, dbConnect, showHelp } = this.options;
    let [adapter, command, message] = args;
    if (adapter === null || adapter === void 0) {
      CLI.error.requiredArgumentMissing("adapter");
      showHelp();
      return void callback(1);
    }
    if (message === null || message === void 0) {
      if (command === null || command === void 0) {
        CLI.error.requiredArgumentMissing("message");
        showHelp();
        return void callback(1);
      }
      message = command;
      command = "send";
    }
    if (typeof message === "string" && message.startsWith("{") && message.endsWith("}")) {
      message = JSON.parse(message);
    }
    dbConnect(async (params) => {
      const { states, objects } = params;
      try {
        const pos = adapter.indexOf(".");
        let instance = null;
        if (pos !== -1) {
          instance = adapter.substring(pos + 1);
          adapter = adapter.substring(0, pos);
        }
        let messageTargets = [];
        if (instance === null) {
          const adapterInstances = await (0, import_cliTools.enumInstances)(objects, adapter);
          if (adapterInstances.length === 0) {
            CLI.error.noInstancesFound(adapter);
            return void callback(1);
          }
          messageTargets = adapterInstances.map((row) => row._id);
        } else {
          messageTargets.unshift(`system.adapter.${adapter}.${instance}`);
        }
        const messagePromises = messageTargets.map((t) => sendMessage(states, t, command, message));
        await Promise.all(messagePromises);
        return void callback();
      } catch (err) {
        CLI.error.unknown(err.message);
        return void callback(1);
      }
    });
  }
}
async function sendMessage(states, targetId, command, message) {
  await states.pushMessage(targetId, { command, message, from: "cli" });
  CLI.success.messageSent(targetId, command, message);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CLIMessage
});
//# sourceMappingURL=cliMessage.js.map
