"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cliCommand_exports = {};
__export(cliCommand_exports, {
  CLICommand: () => CLICommand
});
module.exports = __toCommonJS(cliCommand_exports);
class CLICommand {
  options;
  constructor(options) {
    if (options === null || options === void 0) {
      throw new Error(`No options given`);
    }
    this.options = options;
    this.requireOption("callback");
    this.requireOption("dbConnect");
  }
  /**
   * Ensures that an argument was passed in the options.
   * Throws otherwise
   *
   * @param arg
   */
  requireOption(arg) {
    if (this.options[arg] === void 0) {
      throw new Error(`Invalid arguments: ${arg} is missing`);
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CLICommand
});
//# sourceMappingURL=cliCommand.js.map
