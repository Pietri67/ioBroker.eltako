{
  "version": 3,
  "sources": ["../../../../src/lib/cli/cliTools.ts"],
  "sourcesContent": ["import { tools } from '@iobroker/js-controller-common';\nimport type { Client as ObjectsClient } from '@iobroker/db-objects-redis';\n\n/**\n *\n * @param val The value to format for output\n * @param pretty Whether it should be pretty-printed\n */\nexport function formatValue(val: any, pretty = false): string {\n    // Only use JSON.stringify if we need it (for objects and arrays)\n    const needsStringify = tools.isObject(val) || tools.isArray(val);\n    const output = !needsStringify ? val : pretty ? JSON.stringify(val, null, 2) : JSON.stringify(val);\n    return output;\n}\n\n/** Returns the \"from\" property for objects changed by the CLI */\nexport function getObjectFrom(): `system.host.${string}.cli` {\n    return `system.host.${tools.getHostName()}.cli`;\n}\n\n/**\n * Removes <tools.appName> from the start of the adapter name if it is there\n * E.g. iobroker.admin -> admin\n *\n * @param name The adapter name to normalize\n */\nexport function normalizeAdapterName(name: string): string {\n    if (typeof name === 'string') {\n        name = name.replace(new RegExp(`^${tools.appName}\\\\.`, 'i'), '');\n    }\n    return name;\n}\n\n/**\n * Ensures that the given string is a valid adapter identifier (<adaptername>) WITHOUT instance number\n *\n * @param name The name which is supposed to be an adapter identifier\n */\nexport function validateAdapterIdentifier(name: string): boolean {\n    return /^[a-z0-9\\-_]+$/.test(name);\n}\n\n/**\n * Ensures that the given string contains a valid identifier for\n * an adapter (without instance number) or instance (with instance number)\n *\n * @param name the adapter name or instance\n */\nexport function validateAdapterOrInstanceIdentifier(name: string): boolean {\n    return /^[a-z0-9\\-_]+(\\.\\d+)?$/.test(name);\n}\n\n/**\n * Ensures that the given string contains a valid identifier for\n * an adapter (without instance number) or instance (with instance number)\n *\n * @param name the adapter name or instance\n */\nexport function splitAdapterOrInstanceIdentifierWithVersion(\n    name: string,\n): { name: string; instance: string | null; version: string | null; nameWithVersion: string } | null {\n    const res = name.match(/^([a-z0-9\\-_]+)\\.?(\\d+)?@?([a-z0-9\\-_.]*)?$/);\n    if (!res) {\n        return null;\n    }\n    return {\n        name: res[1],\n        instance: res[2] || null,\n        version: res[3] || null,\n        nameWithVersion: `${res[1]}${res[3] ? `@${res[3]}` : ''}`,\n    };\n}\n\n/**\n * Extracts the instance name from an object ID\n *\n * @param instanceObjID The ID of the instance object\n */\nexport function getInstanceName(instanceObjID: string): string {\n    return instanceObjID.replace(/^system\\.adapter\\./i, '');\n}\n\n/**\n * Enumerates the instances of an adapter or all of them\n *\n * @param objects The objects DB to use\n * @param adapter (optional) The adapter whose instances should be enumerated\n * @returns An array of instance objects\n */\nexport async function enumInstances(objects: ObjectsClient, adapter?: string): Promise<ioBroker.InstanceObject[]> {\n    // if no adapter given all instances should be returned\n    const startkey = `system.adapter.${adapter ? `${adapter}.` : ''}`;\n    const data = await enumObjects(objects, 'instance', startkey);\n    // because of startkey logic not only receive objects with the dot at the end, so filter them!\n    return data.filter((it): it is ioBroker.InstanceObject => !!(it && it._id.startsWith(startkey)));\n}\n\n/**\n * Enumerates all known hosts\n *\n * @param objects The objects DB to use\n * @returns An array of host objects\n */\nexport function enumHosts(objects: ObjectsClient): Promise<ioBroker.InferGetObjectViewItemType<'system', 'host'>[]> {\n    return enumObjects(objects, 'host', 'system.host.');\n}\n\n/**\n * Enumerates all objects of a given type\n *\n * @param objects The objects DB to use\n * @param type The type of the objects to enumerate\n * @param startkey The prefix of the objects\n */\nexport function enumObjects<T extends string>(\n    objects: ObjectsClient,\n    type: T,\n    startkey: string,\n): Promise<ioBroker.InferGetObjectViewItemType<'system', T>[]> {\n    return new Promise((resolve, reject) => {\n        const endkey = `${startkey}\\u9999`;\n        objects.getObjectView('system', type, { startkey, endkey }, null, (err, res) => {\n            if (err) {\n                return reject(err);\n            }\n\n            let ret: ioBroker.InferGetObjectViewItemType<'system', T>[] = [];\n            if (res?.rows) {\n                ret = res.rows.map(row => row.value);\n            }\n            resolve(ret);\n        });\n    });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAAA,kCAAsB;AAQhB,SAAU,YAAY,KAAU,SAAS,OAAK;AAEhD,QAAM,iBAAiB,kCAAM,SAAS,GAAG,KAAK,kCAAM,QAAQ,GAAG;AAC/D,QAAM,SAAS,CAAC,iBAAiB,MAAM,SAAS,KAAK,UAAU,KAAK,MAAM,CAAC,IAAI,KAAK,UAAU,GAAG;AACjG,SAAO;AACX;AAGM,SAAU,gBAAa;AACzB,SAAO,eAAe,kCAAM,YAAW,CAAE;AAC7C;AAQM,SAAU,qBAAqB,MAAY;AAC7C,MAAI,OAAO,SAAS,UAAU;AAC1B,WAAO,KAAK,QAAQ,IAAI,OAAO,IAAI,kCAAM,OAAO,OAAO,GAAG,GAAG,EAAE;EACnE;AACA,SAAO;AACX;AAOM,SAAU,0BAA0B,MAAY;AAClD,SAAO,iBAAiB,KAAK,IAAI;AACrC;AAQM,SAAU,oCAAoC,MAAY;AAC5D,SAAO,yBAAyB,KAAK,IAAI;AAC7C;AAQM,SAAU,4CACZ,MAAY;AAEZ,QAAM,MAAM,KAAK,MAAM,6CAA6C;AACpE,MAAI,CAAC,KAAK;AACN,WAAO;EACX;AACA,SAAO;IACH,MAAM,IAAI,CAAC;IACX,UAAU,IAAI,CAAC,KAAK;IACpB,SAAS,IAAI,CAAC,KAAK;IACnB,iBAAiB,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,EAAE;;AAE/D;AAOM,SAAU,gBAAgB,eAAqB;AACjD,SAAO,cAAc,QAAQ,uBAAuB,EAAE;AAC1D;AASA,eAAsB,cAAc,SAAwB,SAAgB;AAExE,QAAM,WAAW,kBAAkB,UAAU,GAAG,OAAO,MAAM,EAAE;AAC/D,QAAM,OAAO,MAAM,YAAY,SAAS,YAAY,QAAQ;AAE5D,SAAO,KAAK,OAAO,CAAC,OAAsC,CAAC,EAAE,MAAM,GAAG,IAAI,WAAW,QAAQ,EAAE;AACnG;AAQM,SAAU,UAAU,SAAsB;AAC5C,SAAO,YAAY,SAAS,QAAQ,cAAc;AACtD;AASM,SAAU,YACZ,SACA,MACA,UAAgB;AAEhB,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAU;AACnC,UAAM,SAAS,GAAG,QAAQ;AAC1B,YAAQ,cAAc,UAAU,MAAM,EAAE,UAAU,OAAM,GAAI,MAAM,CAAC,KAAK,QAAO;AAC3E,UAAI,KAAK;AACL,eAAO,OAAO,GAAG;MACrB;AAEA,UAAI,MAA0D,CAAA;AAC9D,UAAI,KAAK,MAAM;AACX,cAAM,IAAI,KAAK,IAAI,SAAO,IAAI,KAAK;MACvC;AACA,cAAQ,GAAG;IACf,CAAC;EACL,CAAC;AACL;",
  "names": []
}
