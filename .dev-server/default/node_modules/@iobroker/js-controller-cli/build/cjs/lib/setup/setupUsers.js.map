{
  "version": 3,
  "sources": ["../../../../src/lib/setup/setupUsers.ts"],
  "sourcesContent": ["import { password, tools, EXIT_CODES } from '@iobroker/js-controller-common';\nimport type { ProcessExitCallback } from '../_Types.js';\nimport type { Client as ObjectsRedisClient } from '@iobroker/db-objects-redis';\nimport prompt from 'prompt';\n\nexport interface CLIUsersOptions {\n    processExit: ProcessExitCallback;\n    objects: ObjectsRedisClient;\n}\n\n/** Map a prompt.Schema to properties of type string */\ntype SchemaPropsToString<TSchema extends prompt.Schema> = { [Property in keyof TSchema['properties']]: string };\n\nexport class Users {\n    private readonly objects: ObjectsRedisClient;\n    private readonly processExit: ProcessExitCallback;\n\n    constructor(options: CLIUsersOptions) {\n        if (!options.objects) {\n            throw new Error('Invalid arguments: objects is missing');\n        }\n        if (!options.processExit) {\n            throw new Error('Invalid arguments: processExit is missing');\n        }\n\n        this.objects = options.objects;\n        this.processExit = options.processExit;\n    }\n\n    /**\n     * Adds new user to system\n     *\n     * @param username name of the user which will be added\n     * @param pw password\n     * @param callback\n     */\n    addUser(username: string, pw: string, callback: ioBroker.ErrorCallback): void {\n        // user id's should be case insensitive\n        const _user = username.replace(/\\s/g, '_').toLowerCase();\n        this.objects.getObject(`system.user.${_user}`, (err, obj) => {\n            if (obj) {\n                return tools.maybeCallbackWithError(callback, 'User yet exists');\n            }\n            this.objects.setObject(\n                `system.user.${_user}`,\n                {\n                    type: 'user',\n                    common: {\n                        name: username,\n                        enabled: true,\n                        password: '',\n                    },\n                    from: `system.host.${tools.getHostName()}.cli`,\n                    ts: Date.now(),\n                    native: {},\n                },\n                err => {\n                    if (!err) {\n                        this.setPassword(username, pw, callback);\n                    } else {\n                        return tools.maybeCallbackWithError(callback, err);\n                    }\n                },\n            );\n        });\n    }\n\n    /**\n     * Checks if user exists\n     *\n     * @param username name of the user to check existence of\n     */\n    async isUser(username: string): Promise<boolean> {\n        const _user = username.replace(/\\s/g, '_').toLowerCase();\n        let isExisting = false;\n        try {\n            isExisting = await this.objects.objectExists(`system.user.${_user}`);\n        } catch {\n            // ignore\n        }\n\n        return isExisting;\n    }\n\n    /**\n     * Set password for specific user\n     *\n     * @param username name of the user to set password for\n     * @param pw password\n     * @param callback\n     */\n    setPassword(username: string, pw: string, callback: ioBroker.ErrorCallback): void {\n        const _user = username.replace(/\\s/g, '_').toLowerCase();\n\n        this.objects.getObject(`system.user.${_user}`, (err, obj) => {\n            if (err || !obj) {\n                return tools.maybeCallbackWithError(callback, 'User does not exist');\n            }\n\n            password(pw).hash(null, null, (err, res) => {\n                if (err) {\n                    return tools.maybeCallbackWithError(callback, err);\n                }\n                obj.common.password = res ?? '';\n                obj.from = `system.host.${tools.getHostName()}.cli`;\n                obj.ts = Date.now();\n                this.objects.setObject(`system.user.${_user}`, obj, err => {\n                    return tools.maybeCallbackWithError(callback, err);\n                });\n            });\n        });\n    }\n\n    /**\n     * Checks if password is correct for given user\n     *\n     * @param username name of the user to check password\n     * @param pw password\n     * @param callback\n     */\n    checkPassword(username: string, pw: string, callback: (err?: Error | null, isOk?: boolean) => void): void {\n        const _user = username.replace(/\\s/g, '_').toLowerCase();\n\n        this.objects.getObject(`system.user.${_user}`, (err, obj) => {\n            if (err || !obj) {\n                return tools.maybeCallbackWithError(callback, 'User does not exist');\n            }\n\n            password(pw).check(obj.common.password, (err, res) => {\n                return tools.maybeCallbackWithError(callback, err, res);\n            });\n        });\n    }\n\n    /**\n     * Deletes user from system\n     *\n     * @param username name of the user to delete\n     * @param callback\n     */\n    delUser(username: string, callback: ioBroker.ErrorCallback): void {\n        if (!username) {\n            return tools.maybeCallbackWithError(callback, 'Please define user name, like: \"userdel user\"');\n        }\n\n        const _user = username.replace(/\\s/g, '_').toLowerCase();\n\n        this.objects.getObject(`system.user.${_user}`, (err, obj) => {\n            if (err || !obj) {\n                return tools.maybeCallbackWithError(callback, 'User does not exist');\n            }\n            if (obj.common.dontDelete) {\n                return tools.maybeCallbackWithError(callback, 'Cannot delete user, while is system user');\n            }\n            this.objects.delObject(`system.user.${_user}`, err => {\n                // Remove this user from all groups\n                if (!err) {\n                    this.objects.getObjectList(\n                        { startkey: 'system.group.', endkey: 'system.group.\\u9999' },\n                        (err, groups) => {\n                            if (!groups) {\n                                return tools.maybeCallback(callback);\n                            }\n\n                            let count = 0;\n                            for (let i = 0; i < groups.rows.length; i++) {\n                                if (groups.rows[i].value.type !== 'group') {\n                                    continue;\n                                }\n                                // find all groups\n                                if (\n                                    groups.rows[i].value.common.members &&\n                                    groups.rows[i].value.common.members.indexOf(`system.user.${_user}`) !== -1\n                                ) {\n                                    const pos = groups.rows[i].value.common.members.indexOf(`system.user.${_user}`);\n                                    groups.rows[i].value.common.members.splice(pos, 1);\n                                    count++;\n                                    groups.rows[i].value.from = `system.host.${tools.getHostName()}.cli`;\n                                    groups.rows[i].value.ts = Date.now();\n                                    this.objects.setObject(groups.rows[i].value._id, groups.rows[i].value, err => {\n                                        if (!--count) {\n                                            return tools.maybeCallbackWithError(callback, err);\n                                        }\n                                    });\n                                }\n                            }\n                            if (!count) {\n                                return tools.maybeCallback(callback);\n                            }\n                        },\n                    );\n                } else {\n                    return tools.maybeCallbackWithError(callback, err);\n                }\n            });\n        });\n    }\n\n    /**\n     * Adds user to given group\n     *\n     * @param username user which will be added to the group\n     * @param groupName name of the group where the user will be added to\n     * @param callback\n     */\n    addUserToGroup(username: string, groupName: string, callback: ioBroker.ErrorCallback): void {\n        let _user = username.replace(/\\s/g, '_').toLowerCase();\n        if (!groupName.startsWith('system.group.')) {\n            groupName = `system.group.${groupName}`;\n        }\n        if (!_user.startsWith('system.user.')) {\n            _user = `system.user.${_user}`;\n        }\n\n        this.objects.getObject(_user, (err, obj) => {\n            if (err || !obj) {\n                return tools.maybeCallbackWithError(callback, 'User does not exist');\n            }\n            this.objects.getObject(groupName, (err, obj) => {\n                if (err || !obj) {\n                    return tools.maybeCallbackWithError(callback, 'Group does not exist');\n                }\n                obj.common = obj.common || {};\n                obj.common.members = obj.common.members || [];\n\n                if (obj.common.members.indexOf(_user) === -1) {\n                    obj.common.members.push(_user);\n                    obj.from = `system.host.${tools.getHostName()}.cli`;\n                    obj.ts = Date.now();\n                    this.objects.setObject(groupName, obj, err => {\n                        return tools.maybeCallbackWithError(callback, err);\n                    });\n                } else {\n                    return tools.maybeCallback(callback);\n                }\n            });\n        });\n    }\n\n    /**\n     * Add user via CLI prompt\n     *\n     * @param username user which sohuld be created\n     * @param groupName default group for the new user\n     * @param password user password\n     * @param callback\n     */\n    addUserPrompt(username: string, groupName: string, password: string, callback: ioBroker.ErrorCallback): void {\n        if (!username) {\n            return tools.maybeCallbackWithError(callback, 'Please define user name, like: \"adduser newUser\"');\n        }\n\n        // Check group\n        if (groupName.substring(0, 13) !== 'system.group.') {\n            groupName = `system.group.${groupName}`;\n        }\n\n        this.objects.getObject(groupName, (err, obj) => {\n            if (!obj) {\n                return tools.maybeCallbackWithError(callback, `Unknown group: ${groupName}`);\n            }\n            if (!password) {\n                prompt.message = '';\n                prompt.delimiter = '';\n                const schema = {\n                    properties: {\n                        password: {\n                            description: 'Enter your password:',\n                            pattern: /^[^'\"]+$/,\n                            message: 'No \" are allowed',\n                            hidden: true,\n                        },\n                        repeatPassword: {\n                            description: 'Repeat your password:',\n                            pattern: /^[^'\"]+$/,\n                            message: 'No \" are allowed',\n                            hidden: true,\n                        },\n                    },\n                } as const satisfies prompt.Schema;\n                prompt.start();\n\n                prompt.get<SchemaPropsToString<typeof schema>>(schema, (err, result) => {\n                    if (result) {\n                        if (result.password !== result.repeatPassword) {\n                            console.log('Passwords are not identical!');\n                            return void this.processExit(EXIT_CODES.INVALID_PASSWORD);\n                        }\n\n                        this.addUser(username, result.password, err => {\n                            if (err) {\n                                return tools.maybeCallbackWithError(callback, err);\n                            }\n                            this.addUserToGroup(username, groupName, err => {\n                                if (err) {\n                                    return tools.maybeCallbackWithError(callback, err);\n                                }\n                                return tools.maybeCallback(callback);\n                            });\n                        });\n                    } else {\n                        return tools.maybeCallbackWithError(callback, err);\n                    }\n                });\n            } else {\n                this.addUser(username, password, err => {\n                    if (err) {\n                        return tools.maybeCallbackWithError(callback, err);\n                    }\n                    this.addUserToGroup(username, groupName, err => {\n                        if (err) {\n                            return tools.maybeCallbackWithError(callback, err);\n                        }\n                        return tools.maybeCallback(callback);\n                    });\n                });\n            }\n        });\n    }\n\n    /**\n     * Set password of user\n     *\n     * @param username name of the user to set password for\n     * @param password password of user\n     * @param callback\n     */\n    async setUserPassword(username: string, password: string, callback: ioBroker.ErrorCallback): Promise<void> {\n        if (!username) {\n            return tools.maybeCallbackWithError(callback, 'Please define user name, like: \"passwd username\"');\n        }\n\n        const isExisting = await this.isUser(username);\n        if (!isExisting) {\n            return tools.maybeCallbackWithError(callback, `User \"${username}\" does not exist.`);\n        }\n        // Check group\n        if (!password) {\n            prompt.message = '';\n            prompt.delimiter = '';\n            const schema = {\n                properties: {\n                    password: {\n                        description: 'Enter your password:',\n                        pattern: /^[^'\"]*$/,\n                        message: 'No \" are allowed',\n                        hidden: true,\n                    },\n                    repeatPassword: {\n                        description: 'Repeat your password:',\n                        pattern: /^[^'\"]*$/,\n                        message: 'No \" are allowed',\n                        hidden: true,\n                    },\n                },\n            } as const satisfies prompt.Schema;\n            prompt.start();\n\n            prompt.get<SchemaPropsToString<typeof schema>>(schema, (err, result) => {\n                if (result) {\n                    if (result.password !== result.repeatPassword) {\n                        return tools.maybeCallbackWithError(callback, 'Passwords are not identical!');\n                    }\n\n                    this.setPassword(username, result.password, err => {\n                        if (err) {\n                            return tools.maybeCallbackWithError(callback, err);\n                        }\n                        return tools.maybeCallback(callback);\n                    });\n                } else {\n                    return tools.maybeCallbackWithError(callback, 'No password entered!');\n                }\n            });\n        } else {\n            this.setPassword(username, password, err => {\n                if (err) {\n                    return tools.maybeCallbackWithError(callback, err);\n                }\n                return tools.maybeCallback(callback);\n            });\n        }\n    }\n\n    /**\n     * Enable user\n     *\n     * @param username name of the user which will be activated\n     * @param enable true if it should be enabled else false\n     * @param callback\n     */\n    enableUser(username: string, enable: boolean, callback: ioBroker.ErrorCallback): void {\n        if (!username) {\n            return tools.maybeCallbackWithError(callback, 'Please define user name, like: \"enable username\"');\n        }\n        if (username.startsWith('system.user.')) {\n            username = username.substring('system.user.'.length);\n        }\n\n        if (username === 'admin' && !enable) {\n            return tools.maybeCallbackWithError(callback, 'User admin cannot be disabled');\n        }\n\n        this.objects.getObject(`system.user.${username}`, (err, obj) => {\n            if (err) {\n                return tools.maybeCallbackWithError(callback, `Cannot read user: ${err.message}`);\n            }\n            if (!obj) {\n                return tools.maybeCallbackWithError(callback, `User \"${username}\" not found`);\n            }\n            obj.common.enabled = enable;\n            obj.from = `system.host.${tools.getHostName()}.cli`;\n            obj.ts = Date.now();\n            this.objects.setObject(obj._id, obj, err => {\n                return tools.maybeCallbackWithError(callback, err);\n            });\n        });\n    }\n\n    /**\n     * Check if user password is valid\n     *\n     * @param username name of the user to check password for\n     * @param password password to check\n     * @param callback\n     */\n    checkUserPassword(username: string, password: string, callback: ioBroker.ErrorCallback): void {\n        if (!username && !password) {\n            prompt.message = '';\n            prompt.delimiter = '';\n            const schema = {\n                properties: {\n                    username: {\n                        description: 'Enter username to check password:',\n                        pattern: /^[^'\"]+$/,\n                        message: 'No \" are allowed',\n                        hidden: false,\n                    },\n                    password: {\n                        description: 'Enter current password:',\n                        pattern: /^[^'\"]+$/,\n                        message: 'No \" are allowed',\n                        hidden: true,\n                    },\n                },\n            } as const satisfies prompt.Schema;\n            prompt.start();\n\n            prompt.get<SchemaPropsToString<typeof schema>>(schema, (err, result) => {\n                this.checkPassword(result.username, result.password, (err, res) => {\n                    if (err || !res) {\n                        return tools.maybeCallbackWithError(\n                            callback,\n                            `Password for user \"${result.username}\" does not match${err ? `: ${err.message}` : ''}`,\n                        );\n                    }\n                    return tools.maybeCallbackWithError(callback, null);\n                });\n            });\n        } else if (!password) {\n            prompt.message = '';\n            prompt.delimiter = '';\n            const schema = {\n                properties: {\n                    password: {\n                        description: 'Enter current password:',\n                        pattern: /^[^'\"]+$/,\n                        message: 'No \" are allowed',\n                        hidden: true,\n                    },\n                },\n            } as const satisfies prompt.Schema;\n            prompt.start();\n\n            prompt.get<SchemaPropsToString<typeof schema>>(schema, (err, result) => {\n                this.checkPassword(username, result.password, (err, res) => {\n                    if (err || !res) {\n                        return tools.maybeCallbackWithError(\n                            callback,\n                            `Password for user \"${username}\" does not match${err ? `: ${err.message}` : ''}`,\n                        );\n                    }\n                    return tools.maybeCallbackWithError(callback, null);\n                });\n            });\n        } else {\n            this.checkPassword(username, password, (err, res) => {\n                if (err || !res) {\n                    return tools.maybeCallbackWithError(\n                        callback,\n                        `Password for user \"${username}\" does not match${err ? `: ${err.message}` : ''}`,\n                    );\n                }\n                return tools.maybeCallbackWithError(callback, null);\n            });\n        }\n    }\n\n    /**\n     * Get user object\n     *\n     * @param username name of the user to get object of\n     * @param callback\n     */\n    getUser(username: string, callback: (err?: Error | null, enabled?: boolean) => void): void {\n        this.objects.getObject(`system.user.${username}`, (err, obj) => {\n            if (err) {\n                return tools.maybeCallbackWithError(callback, `Cannot read user: ${err.message}`);\n            }\n            if (!obj) {\n                return tools.maybeCallbackWithError(callback, `User \"${username}\" not found`);\n            }\n            return tools.maybeCallbackWithError(callback, null, obj.common.enabled);\n        });\n    }\n\n    /**\n     * Get group object\n     *\n     * @param group groupname\n     * @param callback\n     */\n    getGroup(group: string, callback: (err?: Error | null, enabled?: boolean, members?: string[]) => void): void {\n        this.objects.getObject(`system.group.${group}`, (err, obj) => {\n            if (err) {\n                return tools.maybeCallbackWithError(callback, `Cannot read group: ${err.message}`);\n            }\n            if (!obj) {\n                return tools.maybeCallbackWithError(callback, `Group \"${group}\" not found`);\n            }\n            return tools.maybeCallbackWithError(callback, null, obj.common.enabled, obj.common.members);\n        });\n    }\n\n    /**\n     * Enable or disable group by name\n     *\n     * @param group groupname\n     * @param enable if enable or disable\n     * @param callback\n     */\n    enableGroup(group: string, enable: boolean, callback: ioBroker.ErrorCallback): void {\n        if (!group) {\n            return tools.maybeCallbackWithError(callback, 'Please define group name, like: \"enable groupname\"');\n        }\n        if (group.startsWith('system.group.')) {\n            group = group.substring('system.group.'.length);\n        }\n\n        if (group === 'administrator' && !enable) {\n            return tools.maybeCallbackWithError(callback, 'Group \"administrator\" cannot be disabled');\n        }\n\n        this.objects.getObject(`system.group.${group}`, (err, obj) => {\n            if (err) {\n                return tools.maybeCallbackWithError(callback, `Cannot read group: ${err.message}`);\n            }\n            if (!obj) {\n                return tools.maybeCallbackWithError(callback, `Group \"${group}\" not found`);\n            }\n            obj.common.enabled = enable;\n            obj.from = `system.host.${tools.getHostName()}.cli`;\n            obj.ts = Date.now();\n            this.objects.setObject(obj._id, obj, err => {\n                return tools.maybeCallbackWithError(callback, err);\n            });\n        });\n    }\n\n    /**\n     * Add new group\n     *\n     * @param group groupname\n     */\n    async addGroup(group: string): Promise<void> {\n        const _group = group.replace(/\\s/g, '_');\n        const obj = await this.objects.getObject(`system.group.${_group}`);\n        if (obj) {\n            throw new Error('Group yet exists');\n        } else {\n            // TODO: shoudln't it have some default acl? TS is worrying\n            await this.objects.setObject(`system.group.${_group}`, {\n                type: 'group',\n                common: {\n                    name: group,\n                    enabled: true,\n                    members: [],\n                },\n                from: `system.host.${tools.getHostName()}.cli`,\n                ts: Date.now(),\n                native: {},\n            } as any);\n        }\n    }\n\n    /**\n     * Remove group\n     *\n     * @param group groupname\n     * @param callback\n     */\n    delGroup(group: string, callback: ioBroker.ErrorCallback): void {\n        const _group = group.replace(/\\s/g, '_');\n\n        if (group === 'administrator') {\n            return tools.maybeCallbackWithError(callback, 'Group \"administrator\" cannot be deleted');\n        }\n        this.objects.getObject(`system.group.${_group}`, (err, obj) => {\n            if (!obj) {\n                return tools.maybeCallbackWithError(callback, 'Group does not exists');\n            }\n            this.objects.delObject(`system.group.${_group}`, err => {\n                return tools.maybeCallbackWithError(callback, err);\n            });\n        });\n    }\n\n    /**\n     * Remove user from given group\n     *\n     * @param username name of the user which will be removed from group\n     * @param groupName name of the group user will be removed from\n     * @param callback\n     */\n    removeUserFromGroup(username: string, groupName: string, callback: ioBroker.ErrorCallback): void {\n        const _group = groupName.replace(/\\s/g, '_');\n        this.objects.getObject(`system.group.${_group}`, (err, obj) => {\n            if (!obj) {\n                return tools.maybeCallbackWithError(callback, 'Group does not exists');\n            }\n            const pos = obj.common.members.indexOf(`system.user.${username}`);\n            if (pos === -1) {\n                return tools.maybeCallbackWithError(callback, 'User not in group');\n            }\n            obj.common.members.splice(pos, 1);\n            obj.from = `system.host.${tools.getHostName()}.cli`;\n            obj.ts = Date.now();\n            this.objects.setObject(obj._id, obj, err => {\n                return tools.maybeCallbackWithError(callback, err);\n            });\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": ["err", "obj", "password", "prompt"]
}
