import type { Client as ObjectsClient } from '@iobroker/db-objects-redis';
/**
 *
 * @param val The value to format for output
 * @param pretty Whether it should be pretty-printed
 */
export declare function formatValue(val: any, pretty?: boolean): string;
/** Returns the "from" property for objects changed by the CLI */
export declare function getObjectFrom(): `system.host.${string}.cli`;
/**
 * Removes <tools.appName> from the start of the adapter name if it is there
 * E.g. iobroker.admin -> admin
 *
 * @param name The adapter name to normalize
 */
export declare function normalizeAdapterName(name: string): string;
/**
 * Ensures that the given string is a valid adapter identifier (<adaptername>) WITHOUT instance number
 *
 * @param name The name which is supposed to be an adapter identifier
 */
export declare function validateAdapterIdentifier(name: string): boolean;
/**
 * Ensures that the given string contains a valid identifier for
 * an adapter (without instance number) or instance (with instance number)
 *
 * @param name the adapter name or instance
 */
export declare function validateAdapterOrInstanceIdentifier(name: string): boolean;
/**
 * Ensures that the given string contains a valid identifier for
 * an adapter (without instance number) or instance (with instance number)
 *
 * @param name the adapter name or instance
 */
export declare function splitAdapterOrInstanceIdentifierWithVersion(name: string): {
    name: string;
    instance: string | null;
    version: string | null;
    nameWithVersion: string;
} | null;
/**
 * Extracts the instance name from an object ID
 *
 * @param instanceObjID The ID of the instance object
 */
export declare function getInstanceName(instanceObjID: string): string;
/**
 * Enumerates the instances of an adapter or all of them
 *
 * @param objects The objects DB to use
 * @param adapter (optional) The adapter whose instances should be enumerated
 * @returns An array of instance objects
 */
export declare function enumInstances(objects: ObjectsClient, adapter?: string): Promise<ioBroker.InstanceObject[]>;
/**
 * Enumerates all known hosts
 *
 * @param objects The objects DB to use
 * @returns An array of host objects
 */
export declare function enumHosts(objects: ObjectsClient): Promise<ioBroker.InferGetObjectViewItemType<'system', 'host'>[]>;
/**
 * Enumerates all objects of a given type
 *
 * @param objects The objects DB to use
 * @param type The type of the objects to enumerate
 * @param startkey The prefix of the objects
 */
export declare function enumObjects<T extends string>(objects: ObjectsClient, type: T, startkey: string): Promise<ioBroker.InferGetObjectViewItemType<'system', T>[]>;
//# sourceMappingURL=cliTools.d.ts.map