"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var setupUsers_exports = {};
__export(setupUsers_exports, {
  Users: () => Users
});
module.exports = __toCommonJS(setupUsers_exports);
var import_js_controller_common = require("@iobroker/js-controller-common");
var import_prompt = __toESM(require("prompt"), 1);
class Users {
  objects;
  processExit;
  constructor(options) {
    if (!options.objects) {
      throw new Error("Invalid arguments: objects is missing");
    }
    if (!options.processExit) {
      throw new Error("Invalid arguments: processExit is missing");
    }
    this.objects = options.objects;
    this.processExit = options.processExit;
  }
  /**
   * Adds new user to system
   *
   * @param username name of the user which will be added
   * @param pw password
   * @param callback
   */
  addUser(username, pw, callback) {
    const _user = username.replace(/\s/g, "_").toLowerCase();
    this.objects.getObject(`system.user.${_user}`, (err, obj) => {
      if (obj) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, "User yet exists");
      }
      this.objects.setObject(`system.user.${_user}`, {
        type: "user",
        common: {
          name: username,
          enabled: true,
          password: ""
        },
        from: `system.host.${import_js_controller_common.tools.getHostName()}.cli`,
        ts: Date.now(),
        native: {}
      }, (err2) => {
        if (!err2) {
          this.setPassword(username, pw, callback);
        } else {
          return import_js_controller_common.tools.maybeCallbackWithError(callback, err2);
        }
      });
    });
  }
  /**
   * Checks if user exists
   *
   * @param username name of the user to check existence of
   */
  async isUser(username) {
    const _user = username.replace(/\s/g, "_").toLowerCase();
    let isExisting = false;
    try {
      isExisting = await this.objects.objectExists(`system.user.${_user}`);
    } catch {
    }
    return isExisting;
  }
  /**
   * Set password for specific user
   *
   * @param username name of the user to set password for
   * @param pw password
   * @param callback
   */
  setPassword(username, pw, callback) {
    const _user = username.replace(/\s/g, "_").toLowerCase();
    this.objects.getObject(`system.user.${_user}`, (err, obj) => {
      if (err || !obj) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, "User does not exist");
      }
      (0, import_js_controller_common.password)(pw).hash(null, null, (err2, res) => {
        if (err2) {
          return import_js_controller_common.tools.maybeCallbackWithError(callback, err2);
        }
        obj.common.password = res ?? "";
        obj.from = `system.host.${import_js_controller_common.tools.getHostName()}.cli`;
        obj.ts = Date.now();
        this.objects.setObject(`system.user.${_user}`, obj, (err3) => {
          return import_js_controller_common.tools.maybeCallbackWithError(callback, err3);
        });
      });
    });
  }
  /**
   * Checks if password is correct for given user
   *
   * @param username name of the user to check password
   * @param pw password
   * @param callback
   */
  checkPassword(username, pw, callback) {
    const _user = username.replace(/\s/g, "_").toLowerCase();
    this.objects.getObject(`system.user.${_user}`, (err, obj) => {
      if (err || !obj) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, "User does not exist");
      }
      (0, import_js_controller_common.password)(pw).check(obj.common.password, (err2, res) => {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, err2, res);
      });
    });
  }
  /**
   * Deletes user from system
   *
   * @param username name of the user to delete
   * @param callback
   */
  delUser(username, callback) {
    if (!username) {
      return import_js_controller_common.tools.maybeCallbackWithError(callback, 'Please define user name, like: "userdel user"');
    }
    const _user = username.replace(/\s/g, "_").toLowerCase();
    this.objects.getObject(`system.user.${_user}`, (err, obj) => {
      if (err || !obj) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, "User does not exist");
      }
      if (obj.common.dontDelete) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, "Cannot delete user, while is system user");
      }
      this.objects.delObject(`system.user.${_user}`, (err2) => {
        if (!err2) {
          this.objects.getObjectList({ startkey: "system.group.", endkey: "system.group.\u9999" }, (err3, groups) => {
            if (!groups) {
              return import_js_controller_common.tools.maybeCallback(callback);
            }
            let count = 0;
            for (let i = 0; i < groups.rows.length; i++) {
              if (groups.rows[i].value.type !== "group") {
                continue;
              }
              if (groups.rows[i].value.common.members && groups.rows[i].value.common.members.indexOf(`system.user.${_user}`) !== -1) {
                const pos = groups.rows[i].value.common.members.indexOf(`system.user.${_user}`);
                groups.rows[i].value.common.members.splice(pos, 1);
                count++;
                groups.rows[i].value.from = `system.host.${import_js_controller_common.tools.getHostName()}.cli`;
                groups.rows[i].value.ts = Date.now();
                this.objects.setObject(groups.rows[i].value._id, groups.rows[i].value, (err4) => {
                  if (!--count) {
                    return import_js_controller_common.tools.maybeCallbackWithError(callback, err4);
                  }
                });
              }
            }
            if (!count) {
              return import_js_controller_common.tools.maybeCallback(callback);
            }
          });
        } else {
          return import_js_controller_common.tools.maybeCallbackWithError(callback, err2);
        }
      });
    });
  }
  /**
   * Adds user to given group
   *
   * @param username user which will be added to the group
   * @param groupName name of the group where the user will be added to
   * @param callback
   */
  addUserToGroup(username, groupName, callback) {
    let _user = username.replace(/\s/g, "_").toLowerCase();
    if (!groupName.startsWith("system.group.")) {
      groupName = `system.group.${groupName}`;
    }
    if (!_user.startsWith("system.user.")) {
      _user = `system.user.${_user}`;
    }
    this.objects.getObject(_user, (err, obj) => {
      if (err || !obj) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, "User does not exist");
      }
      this.objects.getObject(groupName, (err2, obj2) => {
        if (err2 || !obj2) {
          return import_js_controller_common.tools.maybeCallbackWithError(callback, "Group does not exist");
        }
        obj2.common = obj2.common || {};
        obj2.common.members = obj2.common.members || [];
        if (obj2.common.members.indexOf(_user) === -1) {
          obj2.common.members.push(_user);
          obj2.from = `system.host.${import_js_controller_common.tools.getHostName()}.cli`;
          obj2.ts = Date.now();
          this.objects.setObject(groupName, obj2, (err3) => {
            return import_js_controller_common.tools.maybeCallbackWithError(callback, err3);
          });
        } else {
          return import_js_controller_common.tools.maybeCallback(callback);
        }
      });
    });
  }
  /**
   * Add user via CLI prompt
   *
   * @param username user which sohuld be created
   * @param groupName default group for the new user
   * @param password user password
   * @param callback
   */
  addUserPrompt(username, groupName, password2, callback) {
    if (!username) {
      return import_js_controller_common.tools.maybeCallbackWithError(callback, 'Please define user name, like: "adduser newUser"');
    }
    if (groupName.substring(0, 13) !== "system.group.") {
      groupName = `system.group.${groupName}`;
    }
    this.objects.getObject(groupName, (err, obj) => {
      if (!obj) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, `Unknown group: ${groupName}`);
      }
      if (!password2) {
        import_prompt.default.message = "";
        import_prompt.default.delimiter = "";
        const schema = {
          properties: {
            password: {
              description: "Enter your password:",
              pattern: /^[^'"]+$/,
              message: 'No " are allowed',
              hidden: true
            },
            repeatPassword: {
              description: "Repeat your password:",
              pattern: /^[^'"]+$/,
              message: 'No " are allowed',
              hidden: true
            }
          }
        };
        import_prompt.default.start();
        import_prompt.default.get(schema, (err2, result) => {
          if (result) {
            if (result.password !== result.repeatPassword) {
              console.log("Passwords are not identical!");
              return void this.processExit(import_js_controller_common.EXIT_CODES.INVALID_PASSWORD);
            }
            this.addUser(username, result.password, (err3) => {
              if (err3) {
                return import_js_controller_common.tools.maybeCallbackWithError(callback, err3);
              }
              this.addUserToGroup(username, groupName, (err4) => {
                if (err4) {
                  return import_js_controller_common.tools.maybeCallbackWithError(callback, err4);
                }
                return import_js_controller_common.tools.maybeCallback(callback);
              });
            });
          } else {
            return import_js_controller_common.tools.maybeCallbackWithError(callback, err2);
          }
        });
      } else {
        this.addUser(username, password2, (err2) => {
          if (err2) {
            return import_js_controller_common.tools.maybeCallbackWithError(callback, err2);
          }
          this.addUserToGroup(username, groupName, (err3) => {
            if (err3) {
              return import_js_controller_common.tools.maybeCallbackWithError(callback, err3);
            }
            return import_js_controller_common.tools.maybeCallback(callback);
          });
        });
      }
    });
  }
  /**
   * Set password of user
   *
   * @param username name of the user to set password for
   * @param password password of user
   * @param callback
   */
  async setUserPassword(username, password2, callback) {
    if (!username) {
      return import_js_controller_common.tools.maybeCallbackWithError(callback, 'Please define user name, like: "passwd username"');
    }
    const isExisting = await this.isUser(username);
    if (!isExisting) {
      return import_js_controller_common.tools.maybeCallbackWithError(callback, `User "${username}" does not exist.`);
    }
    if (!password2) {
      import_prompt.default.message = "";
      import_prompt.default.delimiter = "";
      const schema = {
        properties: {
          password: {
            description: "Enter your password:",
            pattern: /^[^'"]*$/,
            message: 'No " are allowed',
            hidden: true
          },
          repeatPassword: {
            description: "Repeat your password:",
            pattern: /^[^'"]*$/,
            message: 'No " are allowed',
            hidden: true
          }
        }
      };
      import_prompt.default.start();
      import_prompt.default.get(schema, (err, result) => {
        if (result) {
          if (result.password !== result.repeatPassword) {
            return import_js_controller_common.tools.maybeCallbackWithError(callback, "Passwords are not identical!");
          }
          this.setPassword(username, result.password, (err2) => {
            if (err2) {
              return import_js_controller_common.tools.maybeCallbackWithError(callback, err2);
            }
            return import_js_controller_common.tools.maybeCallback(callback);
          });
        } else {
          return import_js_controller_common.tools.maybeCallbackWithError(callback, "No password entered!");
        }
      });
    } else {
      this.setPassword(username, password2, (err) => {
        if (err) {
          return import_js_controller_common.tools.maybeCallbackWithError(callback, err);
        }
        return import_js_controller_common.tools.maybeCallback(callback);
      });
    }
  }
  /**
   * Enable user
   *
   * @param username name of the user which will be activated
   * @param enable true if it should be enabled else false
   * @param callback
   */
  enableUser(username, enable, callback) {
    if (!username) {
      return import_js_controller_common.tools.maybeCallbackWithError(callback, 'Please define user name, like: "enable username"');
    }
    if (username.startsWith("system.user.")) {
      username = username.substring("system.user.".length);
    }
    if (username === "admin" && !enable) {
      return import_js_controller_common.tools.maybeCallbackWithError(callback, "User admin cannot be disabled");
    }
    this.objects.getObject(`system.user.${username}`, (err, obj) => {
      if (err) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, `Cannot read user: ${err.message}`);
      }
      if (!obj) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, `User "${username}" not found`);
      }
      obj.common.enabled = enable;
      obj.from = `system.host.${import_js_controller_common.tools.getHostName()}.cli`;
      obj.ts = Date.now();
      this.objects.setObject(obj._id, obj, (err2) => {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, err2);
      });
    });
  }
  /**
   * Check if user password is valid
   *
   * @param username name of the user to check password for
   * @param password password to check
   * @param callback
   */
  checkUserPassword(username, password2, callback) {
    if (!username && !password2) {
      import_prompt.default.message = "";
      import_prompt.default.delimiter = "";
      const schema = {
        properties: {
          username: {
            description: "Enter username to check password:",
            pattern: /^[^'"]+$/,
            message: 'No " are allowed',
            hidden: false
          },
          password: {
            description: "Enter current password:",
            pattern: /^[^'"]+$/,
            message: 'No " are allowed',
            hidden: true
          }
        }
      };
      import_prompt.default.start();
      import_prompt.default.get(schema, (err, result) => {
        this.checkPassword(result.username, result.password, (err2, res) => {
          if (err2 || !res) {
            return import_js_controller_common.tools.maybeCallbackWithError(callback, `Password for user "${result.username}" does not match${err2 ? `: ${err2.message}` : ""}`);
          }
          return import_js_controller_common.tools.maybeCallbackWithError(callback, null);
        });
      });
    } else if (!password2) {
      import_prompt.default.message = "";
      import_prompt.default.delimiter = "";
      const schema = {
        properties: {
          password: {
            description: "Enter current password:",
            pattern: /^[^'"]+$/,
            message: 'No " are allowed',
            hidden: true
          }
        }
      };
      import_prompt.default.start();
      import_prompt.default.get(schema, (err, result) => {
        this.checkPassword(username, result.password, (err2, res) => {
          if (err2 || !res) {
            return import_js_controller_common.tools.maybeCallbackWithError(callback, `Password for user "${username}" does not match${err2 ? `: ${err2.message}` : ""}`);
          }
          return import_js_controller_common.tools.maybeCallbackWithError(callback, null);
        });
      });
    } else {
      this.checkPassword(username, password2, (err, res) => {
        if (err || !res) {
          return import_js_controller_common.tools.maybeCallbackWithError(callback, `Password for user "${username}" does not match${err ? `: ${err.message}` : ""}`);
        }
        return import_js_controller_common.tools.maybeCallbackWithError(callback, null);
      });
    }
  }
  /**
   * Get user object
   *
   * @param username name of the user to get object of
   * @param callback
   */
  getUser(username, callback) {
    this.objects.getObject(`system.user.${username}`, (err, obj) => {
      if (err) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, `Cannot read user: ${err.message}`);
      }
      if (!obj) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, `User "${username}" not found`);
      }
      return import_js_controller_common.tools.maybeCallbackWithError(callback, null, obj.common.enabled);
    });
  }
  /**
   * Get group object
   *
   * @param group groupname
   * @param callback
   */
  getGroup(group, callback) {
    this.objects.getObject(`system.group.${group}`, (err, obj) => {
      if (err) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, `Cannot read group: ${err.message}`);
      }
      if (!obj) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, `Group "${group}" not found`);
      }
      return import_js_controller_common.tools.maybeCallbackWithError(callback, null, obj.common.enabled, obj.common.members);
    });
  }
  /**
   * Enable or disable group by name
   *
   * @param group groupname
   * @param enable if enable or disable
   * @param callback
   */
  enableGroup(group, enable, callback) {
    if (!group) {
      return import_js_controller_common.tools.maybeCallbackWithError(callback, 'Please define group name, like: "enable groupname"');
    }
    if (group.startsWith("system.group.")) {
      group = group.substring("system.group.".length);
    }
    if (group === "administrator" && !enable) {
      return import_js_controller_common.tools.maybeCallbackWithError(callback, 'Group "administrator" cannot be disabled');
    }
    this.objects.getObject(`system.group.${group}`, (err, obj) => {
      if (err) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, `Cannot read group: ${err.message}`);
      }
      if (!obj) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, `Group "${group}" not found`);
      }
      obj.common.enabled = enable;
      obj.from = `system.host.${import_js_controller_common.tools.getHostName()}.cli`;
      obj.ts = Date.now();
      this.objects.setObject(obj._id, obj, (err2) => {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, err2);
      });
    });
  }
  /**
   * Add new group
   *
   * @param group groupname
   */
  async addGroup(group) {
    const _group = group.replace(/\s/g, "_");
    const obj = await this.objects.getObject(`system.group.${_group}`);
    if (obj) {
      throw new Error("Group yet exists");
    } else {
      await this.objects.setObject(`system.group.${_group}`, {
        type: "group",
        common: {
          name: group,
          enabled: true,
          members: []
        },
        from: `system.host.${import_js_controller_common.tools.getHostName()}.cli`,
        ts: Date.now(),
        native: {}
      });
    }
  }
  /**
   * Remove group
   *
   * @param group groupname
   * @param callback
   */
  delGroup(group, callback) {
    const _group = group.replace(/\s/g, "_");
    if (group === "administrator") {
      return import_js_controller_common.tools.maybeCallbackWithError(callback, 'Group "administrator" cannot be deleted');
    }
    this.objects.getObject(`system.group.${_group}`, (err, obj) => {
      if (!obj) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, "Group does not exists");
      }
      this.objects.delObject(`system.group.${_group}`, (err2) => {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, err2);
      });
    });
  }
  /**
   * Remove user from given group
   *
   * @param username name of the user which will be removed from group
   * @param groupName name of the group user will be removed from
   * @param callback
   */
  removeUserFromGroup(username, groupName, callback) {
    const _group = groupName.replace(/\s/g, "_");
    this.objects.getObject(`system.group.${_group}`, (err, obj) => {
      if (!obj) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, "Group does not exists");
      }
      const pos = obj.common.members.indexOf(`system.user.${username}`);
      if (pos === -1) {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, "User not in group");
      }
      obj.common.members.splice(pos, 1);
      obj.from = `system.host.${import_js_controller_common.tools.getHostName()}.cli`;
      obj.ts = Date.now();
      this.objects.setObject(obj._id, obj, (err2) => {
        return import_js_controller_common.tools.maybeCallbackWithError(callback, err2);
      });
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Users
});
//# sourceMappingURL=setupUsers.js.map
