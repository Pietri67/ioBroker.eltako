{
  "version": 3,
  "sources": ["../../../../src/lib/cli/cliMessage.ts"],
  "sourcesContent": ["import * as CLI from './messages.js';\nimport { CLICommand, type CLICommandOptions } from './cliCommand.js';\nimport { enumInstances } from './cliTools.js';\nimport type { Client as StatesClient } from '@iobroker/db-states-redis';\n\nexport class CLIMessage extends CLICommand {\n    /** @param options The CLI Message options */\n    constructor(options: CLICommandOptions) {\n        super(options);\n    }\n\n    /**\n     * Executes a command\n     *\n     * @param args parsed arguments\n     */\n    execute(args: any[]): void {\n        const { callback, dbConnect, showHelp } = this.options;\n        let [adapter, command, message] = args;\n        if (adapter === null || adapter === undefined) {\n            CLI.error.requiredArgumentMissing('adapter');\n            showHelp();\n            return void callback(1);\n        }\n        if (message === null || message === undefined) {\n            if (command === null || command === undefined) {\n                CLI.error.requiredArgumentMissing('message');\n                showHelp();\n                return void callback(1);\n            }\n            message = command;\n            command = 'send';\n        }\n        // Try to parse JSON\n        // TODO: can we use the methods from cliObjects?\n        if (typeof message === 'string' && message.startsWith('{') && message.endsWith('}')) {\n            message = JSON.parse(message);\n        }\n\n        dbConnect(async params => {\n            const { states, objects } = params;\n\n            try {\n                const pos = adapter.indexOf('.');\n                let instance = null;\n                if (pos !== -1) {\n                    instance = adapter.substring(pos + 1);\n                    adapter = adapter.substring(0, pos);\n                }\n                let messageTargets = [];\n                if (instance === null) {\n                    // This message wasn't meant for a specific instance,\n                    const adapterInstances = await enumInstances(objects, adapter);\n                    if (adapterInstances.length === 0) {\n                        CLI.error.noInstancesFound(adapter);\n                        return void callback(1);\n                    }\n                    messageTargets = adapterInstances.map(row => row._id);\n                } else {\n                    messageTargets.unshift(`system.adapter.${adapter}.${instance}`);\n                }\n\n                // Send the message to all targets\n                const messagePromises = messageTargets.map(t => sendMessage(states, t, command, message));\n                await Promise.all(messagePromises);\n                return void callback();\n            } catch (err) {\n                CLI.error.unknown(err.message);\n                return void callback(1);\n            }\n        });\n    }\n}\n\n/**\n * @param states The States DB\n * @param targetId The instance or adapter to send the message to\n * @param command The command to send\n * @param message The message to send\n */\nasync function sendMessage(states: StatesClient, targetId: string, command: string, message: string): Promise<void> {\n    await states.pushMessage(targetId, { command, message, from: 'cli' });\n    CLI.success.messageSent(targetId, command, message);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA,UAAqB;AACrB,wBAAmD;AACnD,sBAA8B;AAGxB,MAAO,mBAAmB,6BAAU;;EAEtC,YAAY,SAA0B;AAClC,UAAM,OAAO;EACjB;;;;;;EAOA,QAAQ,MAAW;AACf,UAAM,EAAE,UAAU,WAAW,SAAQ,IAAK,KAAK;AAC/C,QAAI,CAAC,SAAS,SAAS,OAAO,IAAI;AAClC,QAAI,YAAY,QAAQ,YAAY,QAAW;AAC3C,UAAI,MAAM,wBAAwB,SAAS;AAC3C,eAAQ;AACR,aAAO,KAAK,SAAS,CAAC;IAC1B;AACA,QAAI,YAAY,QAAQ,YAAY,QAAW;AAC3C,UAAI,YAAY,QAAQ,YAAY,QAAW;AAC3C,YAAI,MAAM,wBAAwB,SAAS;AAC3C,iBAAQ;AACR,eAAO,KAAK,SAAS,CAAC;MAC1B;AACA,gBAAU;AACV,gBAAU;IACd;AAGA,QAAI,OAAO,YAAY,YAAY,QAAQ,WAAW,GAAG,KAAK,QAAQ,SAAS,GAAG,GAAG;AACjF,gBAAU,KAAK,MAAM,OAAO;IAChC;AAEA,cAAU,OAAM,WAAS;AACrB,YAAM,EAAE,QAAQ,QAAO,IAAK;AAE5B,UAAI;AACA,cAAM,MAAM,QAAQ,QAAQ,GAAG;AAC/B,YAAI,WAAW;AACf,YAAI,QAAQ,IAAI;AACZ,qBAAW,QAAQ,UAAU,MAAM,CAAC;AACpC,oBAAU,QAAQ,UAAU,GAAG,GAAG;QACtC;AACA,YAAI,iBAAiB,CAAA;AACrB,YAAI,aAAa,MAAM;AAEnB,gBAAM,mBAAmB,UAAM,+BAAc,SAAS,OAAO;AAC7D,cAAI,iBAAiB,WAAW,GAAG;AAC/B,gBAAI,MAAM,iBAAiB,OAAO;AAClC,mBAAO,KAAK,SAAS,CAAC;UAC1B;AACA,2BAAiB,iBAAiB,IAAI,SAAO,IAAI,GAAG;QACxD,OAAO;AACH,yBAAe,QAAQ,kBAAkB,OAAO,IAAI,QAAQ,EAAE;QAClE;AAGA,cAAM,kBAAkB,eAAe,IAAI,OAAK,YAAY,QAAQ,GAAG,SAAS,OAAO,CAAC;AACxF,cAAM,QAAQ,IAAI,eAAe;AACjC,eAAO,KAAK,SAAQ;MACxB,SAAS,KAAK;AACV,YAAI,MAAM,QAAQ,IAAI,OAAO;AAC7B,eAAO,KAAK,SAAS,CAAC;MAC1B;IACJ,CAAC;EACL;;AASJ,eAAe,YAAY,QAAsB,UAAkB,SAAiB,SAAe;AAC/F,QAAM,OAAO,YAAY,UAAU,EAAE,SAAS,SAAS,MAAM,MAAK,CAAE;AACpE,MAAI,QAAQ,YAAY,UAAU,SAAS,OAAO;AACtD;",
  "names": []
}
