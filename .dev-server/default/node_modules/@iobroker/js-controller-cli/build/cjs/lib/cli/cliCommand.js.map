{
  "version": 3,
  "sources": ["../../../../src/lib/cli/cliCommand.ts"],
  "sourcesContent": ["import type { DbConnectCallback } from '../_Types.js';\n\nexport interface CLICommandContext {\n    /** Invoke this before doing anything in the database */\n    dbConnect: (callback: DbConnectCallback) => void;\n    callback: (code?: number) => void;\n    showHelp: (yargs?: any) => void;\n}\n\nexport interface CLICommandParams {\n    encoding?: BufferEncoding;\n    pretty?: boolean;\n    force?: boolean;\n    password?: any;\n    ingroup?: any;\n    v?: any;\n    version?: any;\n    timeout?: any;\n    enabled?: any;\n    disabled?: any;\n    port?: any;\n    ssl?: any;\n    ip?: any;\n    updatable?: any;\n    host?: any;\n    cert?: any;\n    cwd?: string;\n    path?: string;\n    module?: string;\n    wait?: boolean;\n    yes?: boolean;\n    f?: boolean;\n    y?: boolean;\n    all?: boolean;\n}\n\nexport type CLICommandOptions = CLICommandContext & CLICommandParams;\n\n/** The base class for any CLI command */\nexport class CLICommand<TCommandOptions extends CLICommandOptions = CLICommandOptions> {\n    protected readonly options: TCommandOptions;\n\n    constructor(options: TCommandOptions) {\n        if (options === null || options === undefined) {\n            throw new Error(`No options given`);\n        }\n\n        this.options = options;\n        // Always require the callback and a wrapper for DB actions\n        this.requireOption('callback');\n        this.requireOption('dbConnect');\n    }\n\n    /**\n     * Ensures that an argument was passed in the options.\n     * Throws otherwise\n     *\n     * @param arg\n     */\n    requireOption(arg: keyof CLICommandOptions): void {\n        if (this.options[arg] === undefined) {\n            throw new Error(`Invalid arguments: ${arg} is missing`);\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAsCA;;;;;AACM,MAAO,WAAU;EACA;EAEnB,YAAY,SAAwB;AAChC,QAAI,YAAY,QAAQ,YAAY,QAAW;AAC3C,YAAM,IAAI,MAAM,kBAAkB;IACtC;AAEA,SAAK,UAAU;AAEf,SAAK,cAAc,UAAU;AAC7B,SAAK,cAAc,WAAW;EAClC;;;;;;;EAQA,cAAc,KAA4B;AACtC,QAAI,KAAK,QAAQ,GAAG,MAAM,QAAW;AACjC,YAAM,IAAI,MAAM,sBAAsB,GAAG,aAAa;IAC1D;EACJ;;",
  "names": []
}
