{
  "version": 3,
  "sources": ["../../../../src/lib/setup/formatters.ts"],
  "sourcesContent": ["/**\n * Format number in seconds to time text\n *\n * @param seconds\n */\nexport function formatSeconds(seconds: number): string {\n    let _seconds: number | string = seconds;\n\n    const days = Math.floor(_seconds / (3_600 * 24));\n    _seconds %= 3_600 * 24;\n    let hours: number | string = Math.floor(_seconds / 3_600);\n    if (hours < 10) {\n        hours = `0${hours}`;\n    }\n    _seconds %= 3_600;\n    let minutes: number | string = Math.floor(_seconds / 60);\n    if (minutes < 10) {\n        minutes = `0${minutes}`;\n    }\n    _seconds %= 60;\n    _seconds = Math.floor(_seconds);\n    if (_seconds < 10) {\n        _seconds = `0${_seconds}`;\n    }\n    let text = '';\n    if (days) {\n        text += `${days}d. `;\n    }\n    text += `${hours}:${minutes}:${_seconds}`;\n\n    return text;\n}\n\n/**\n * Format bytes to MB or GB\n *\n * @param bytes\n */\nexport function formatRam(bytes: number): string {\n    const GB = Math.floor((bytes / (1024 * 1024 * 1024)) * 10) / 10;\n    bytes %= 1024 * 1024 * 1024;\n    const MB = Math.floor((bytes / (1024 * 1024)) * 10) / 10;\n    let text = '';\n    if (GB > 1) {\n        text += `${GB} GB`;\n    } else {\n        text += `${MB} MB`;\n    }\n\n    return text;\n}\n\n/**\n * Format speed\n *\n * @param mhz\n */\nexport function formatSpeed(mhz: number): string {\n    return `${mhz} MHz`;\n}\n\n/**\n * Format bytes to human readable form\n *\n * @param bytes\n */\nexport function formatBytes(bytes: number): string {\n    if (Math.abs(bytes) < 1024) {\n        return `${bytes} B`;\n    }\n    const units = ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= 1024;\n        ++u;\n    } while (Math.abs(bytes) >= 1024 && u < units.length - 1);\n    return `${bytes.toFixed(1)} ${units[u]}`;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAKM,SAAU,cAAc,SAAe;AACzC,MAAI,WAA4B;AAEhC,QAAM,OAAO,KAAK,MAAM,YAAY,OAAQ,GAAG;AAC/C,cAAY,OAAQ;AACpB,MAAI,QAAyB,KAAK,MAAM,WAAW,IAAK;AACxD,MAAI,QAAQ,IAAI;AACZ,YAAQ,IAAI,KAAK;EACrB;AACA,cAAY;AACZ,MAAI,UAA2B,KAAK,MAAM,WAAW,EAAE;AACvD,MAAI,UAAU,IAAI;AACd,cAAU,IAAI,OAAO;EACzB;AACA,cAAY;AACZ,aAAW,KAAK,MAAM,QAAQ;AAC9B,MAAI,WAAW,IAAI;AACf,eAAW,IAAI,QAAQ;EAC3B;AACA,MAAI,OAAO;AACX,MAAI,MAAM;AACN,YAAQ,GAAG,IAAI;EACnB;AACA,UAAQ,GAAG,KAAK,IAAI,OAAO,IAAI,QAAQ;AAEvC,SAAO;AACX;AAOM,SAAU,UAAU,OAAa;AACnC,QAAM,KAAK,KAAK,MAAO,SAAS,OAAO,OAAO,QAAS,EAAE,IAAI;AAC7D,WAAS,OAAO,OAAO;AACvB,QAAM,KAAK,KAAK,MAAO,SAAS,OAAO,QAAS,EAAE,IAAI;AACtD,MAAI,OAAO;AACX,MAAI,KAAK,GAAG;AACR,YAAQ,GAAG,EAAE;EACjB,OAAO;AACH,YAAQ,GAAG,EAAE;EACjB;AAEA,SAAO;AACX;AAOM,SAAU,YAAY,KAAW;AACnC,SAAO,GAAG,GAAG;AACjB;AAOM,SAAU,YAAY,OAAa;AACrC,MAAI,KAAK,IAAI,KAAK,IAAI,MAAM;AACxB,WAAO,GAAG,KAAK;EACnB;AACA,QAAM,QAAQ,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AACrE,MAAI,IAAI;AACR,KAAG;AACC,aAAS;AACT,MAAE;EACN,SAAS,KAAK,IAAI,KAAK,KAAK,QAAQ,IAAI,MAAM,SAAS;AACvD,SAAO,GAAG,MAAM,QAAQ,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC;AAC1C;",
  "names": []
}
