{
  "version": 3,
  "sources": ["../../../../src/lib/setup/multihostClient.ts"],
  "sourcesContent": ["import dgram from 'node:dgram';\nimport { tools } from '@iobroker/js-controller-common';\nimport crypto from 'node:crypto';\n\nconst PORT = 50005;\nconst MULTICAST_ADDR = '239.255.255.250';\n\ninterface ReceivedMessage {\n    cmd: string;\n    id: number;\n    result: string;\n    ip?: string;\n    hostname?: string;\n    info?: string;\n    slave?: boolean;\n    auth?: string;\n    salt?: string;\n    /** The states config of ioBroker.json  */\n    states?: ioBroker.StatesDatabaseOptions;\n    /** The objects config of ioBroker.json */\n    objects?: ioBroker.ObjectsDatabaseOptions;\n}\n\nexport type BrowseResultEntry = Partial<ReceivedMessage>;\n\nexport class MHClient {\n    private id: number = 1;\n    private timer: NodeJS.Timeout | null = null;\n    private server: dgram.Socket | undefined;\n\n    /**\n     * Stops the MH server\n     */\n    private stopServer(): void {\n        if (this.server) {\n            try {\n                this.server.close();\n            } catch {\n                // OK\n            }\n            this.server = undefined;\n        }\n\n        if (this.timer) {\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n    }\n\n    /**\n     * Calculate the SHA\n     *\n     * @param secret the MH secret\n     * @param salt the MH salt\n     * @param callback\n     */\n    private sha(secret: string, salt: string, callback: (sha: string) => void): void {\n        // calculate sha256\n        const hash = crypto.createHash('sha256');\n\n        hash.on('readable', function () {\n            const data = hash.read();\n            if (data) {\n                callback(data.toString('hex'));\n            }\n        });\n\n        hash.write(secret + salt);\n        hash.end();\n    }\n\n    /**\n     * Starts the MH server\n     *\n     * @param isBroadcast if server should receive broadcast\n     * @param timeout timeout after which MH server will be closed\n     * @param onReady ready handler\n     * @param onMessage message handler, if return true here, server will be stopped\n     * @param onFinished finished handler\n     */\n    private startServer(\n        isBroadcast: boolean,\n        timeout: number,\n        onReady: () => void,\n        onMessage: (msg: ReceivedMessage, rinfo: dgram.RemoteInfo) => boolean,\n        onFinished: (err?: Error) => void,\n    ): void {\n        if (this.server) {\n            onFinished(new Error('Some operation still active'));\n            return;\n        }\n        this.server = dgram.createSocket('udp4');\n        timeout = timeout || 2_000;\n\n        this.timer = setTimeout(() => {\n            if (this.server) {\n                this.stopServer();\n                onFinished();\n            }\n        }, timeout);\n\n        this.server.on('error', err => {\n            if (this.server) {\n                this.stopServer();\n                onFinished(err);\n            }\n        });\n\n        this.server.on('message', (msg, rinfo) => {\n            try {\n                const message: ReceivedMessage = JSON.parse(msg.toString());\n                if (this.server) {\n                    if (onMessage(message, rinfo)) {\n                        this.stopServer();\n                    }\n                }\n            } catch {\n                console.error(`Multihost discovery client: Invalid answer: ${msg.toString()}`);\n            }\n        });\n\n        this.server.on('listening', () => {\n            if (isBroadcast) {\n                this.server!.setBroadcast(true);\n            }\n            onReady();\n        });\n\n        this.server.bind();\n    }\n\n    /**\n     * Start MH browsing for server\n     *\n     * @param timeout timeout to stop browsing\n     * @param isDebug debug will also show local addresses\n     */\n    browse(timeout: number, isDebug: boolean): Promise<BrowseResultEntry[]> {\n        const result: BrowseResultEntry[] = [];\n        const ownIps = tools.findIPs();\n\n        return new Promise((resolve, reject) => {\n            this.startServer(\n                true,\n                timeout,\n                () => {\n                    const text = JSON.stringify({\n                        cmd: 'browse',\n                        id: ++this.id,\n                    });\n                    this.server!.send(text, 0, text.length, PORT, MULTICAST_ADDR);\n                },\n                (msg, rinfo) => {\n                    // ignore own answers\n                    if (isDebug || (!tools.isLocalAddress(rinfo.address) && !ownIps.includes(rinfo.address))) {\n                        if (msg.result === 'not authenticated') {\n                            result.push({\n                                ip: rinfo.address,\n                                hostname: rinfo.address,\n                                info: 'authentication required',\n                                auth: msg.auth,\n                            });\n                        } else if (msg.result === 'ok') {\n                            result.push(msg);\n                        } else {\n                            console.log(`Multihost discovery client: Unknown answer: ${JSON.stringify(msg)}`);\n                        }\n                    }\n                    if (isDebug) {\n                        console.log(JSON.stringify(msg));\n                    }\n\n                    return false;\n                },\n                err => {\n                    if (err) {\n                        reject(err);\n                        return;\n                    }\n\n                    resolve(result);\n                },\n            );\n        });\n    }\n\n    /**\n     * Connect to server\n     *\n     * @param ip ip address of server\n     * @param password password for authentication\n     * @param callback\n     */\n    connect(\n        ip: string,\n        password: string,\n        callback: (\n            err: Error | undefined,\n            objectsConfig?: ioBroker.ObjectsDatabaseOptions,\n            statesConfig?: ioBroker.StatesDatabaseOptions,\n            address?: string,\n        ) => void,\n    ): void {\n        let callCb = true;\n\n        this.startServer(\n            false,\n            2_000,\n            () => {\n                const text = JSON.stringify({\n                    cmd: 'browse',\n                    id: ++this.id,\n                });\n                this.server!.send(text, 0, text.length, PORT, ip);\n            },\n            (msg, rinfo) => {\n                if (msg.cmd === 'browse' && msg.id === this.id) {\n                    if (msg.result === 'ok') {\n                        if (callCb) {\n                            if (!msg.objects) {\n                                callback(new Error(`Invalid configuration received: ${JSON.stringify(msg)}`));\n                                callCb = false;\n                            } else if (!msg.states) {\n                                callback(new Error(`Invalid configuration received: ${JSON.stringify(msg)}`));\n                                callCb = false;\n                            } else {\n                                if (typeof callback === 'function') {\n                                    callback(undefined, msg.objects, msg.states, rinfo.address);\n                                }\n                            }\n                        }\n                    } else if (msg.result === 'not authenticated') {\n                        if (!password) {\n                            if (callCb) {\n                                callback(new Error(`not authenticated: ${JSON.stringify(msg)}`));\n                                callCb = false;\n                            }\n                        } else {\n                            this.sha(password, msg.salt!, shaText => {\n                                // send password\n                                const text = JSON.stringify({\n                                    cmd: 'browse',\n                                    id: ++this.id,\n                                    password: shaText,\n                                });\n                                this.server!.send(text, 0, text.length, PORT, ip);\n                            });\n                            return false;\n                        }\n                    } else if (msg.result === 'invalid password') {\n                        if (callCb) {\n                            callback(new Error('invalid password'));\n                            callCb = false;\n                        }\n                    } else {\n                        console.log(msg.result);\n                    }\n                    return true;\n                }\n                console.warn(`Multihost discovery client: Unexpected message: ${JSON.stringify(msg)}`);\n\n                return false;\n            },\n            function onFinished(err) {\n                if (callCb) {\n                    callback(err);\n                    callCb = false;\n                }\n            },\n        );\n    }\n}\n"],
  "mappings": "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",
  "names": ["crypto", "dgram"]
}
