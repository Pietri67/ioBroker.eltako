{
  "version": 3,
  "sources": ["../../../../src/lib/cli/cliLogs.ts", "../../../../../../node_modules/@alcalzone/esm2cjs/shims/import.meta.url/shim.js"],
  "sourcesContent": ["import { CLICommand, type CLICommandOptions } from './cliCommand.js';\nimport { tools, logger as toolsLogger } from '@iobroker/js-controller-common';\nimport chokidar from 'chokidar';\nimport fs from 'fs-extra';\nimport os from 'node:os';\nimport es from 'event-stream';\nimport { createRequire } from 'node:module';\n// eslint-disable-next-line unicorn/prefer-module\nconst require = createRequire(import.meta.url || `file://${__filename}`);\n\nconst { getConfigFileName } = tools;\n\ninterface CLILogsOptions {\n    /** Whether to show today's full log */\n    complete?: boolean;\n    /** An optional RegExp to filter by */\n    regex?: RegExp;\n}\n\n/** Command ioBroker state ... */\nexport class CLILogs extends CLICommand {\n    private readonly fileSizes = new Map<string, number>();\n    private isReady = false;\n\n    constructor(options: CLICommandOptions) {\n        super(options);\n    }\n\n    /**\n     * Executes a command\n     *\n     * @param args\n     * @param params additional parsed CLI parameters\n     */\n    execute(args: any[], params: Record<string, any>): void {\n        const adapterName = args[0];\n        const watch = params.watch || params.w;\n        const count = params.lines || 1_000;\n\n        const options: CLILogsOptions = {\n            complete: this.options.all,\n        };\n\n        const config = fs.readJSONSync(require.resolve(getConfigFileName()));\n        const logger = toolsLogger(config.log);\n        /** @ts-expect-error todo adjust logger type */\n        let fileName = logger.getFileName();\n        if (fileName) {\n            let lines = fs.readFileSync(fileName).toString('utf-8').split('\\n');\n            lines = lines.filter(line => line);\n            if (lines.length > count) {\n                lines.splice(0, lines.length - count);\n            }\n            let regex: RegExp;\n            if (adapterName) {\n                //2019-03-02 13:26:54.698  - debug: iot.0 [ALEXA] Created ALEXA device: Bad.Hauptlicht.Aktor.STATE [\"turnOn\",\"turnOff\"]\n                regex = new RegExp(`: ${adapterName}\\\\.`);\n                options.regex = regex;\n            }\n            lines.forEach(line => {\n                if (regex && !regex.test(line)) {\n                    return;\n                }\n                console.log(line);\n            });\n\n            if (watch) {\n                fileName = fileName.replace(/\\\\/g, '/');\n                const parts = fileName.split('/');\n                parts.pop();\n                chokidar\n                    .watch(`${parts.join('/')}/iobroker*`, {\n                        awaitWriteFinish: { stabilityThreshold: 500 },\n                        followSymlinks: false,\n                    })\n                    .on('all', this.watchHandler.bind(this, options))\n                    .on('ready', () => (this.isReady = true));\n            }\n        } else {\n            console.log('No log file found');\n        }\n    }\n\n    /**\n     * Called by chokidar when watched files change\n     *\n     * @param options some options\n     * @param event The type of change\n     * @param path Which path has changed\n     * @param stats Information about the file\n     */\n    watchHandler(options: CLILogsOptions, event: string, path: string, stats: Record<string, any>): void {\n        if (event === 'add' || !this.fileSizes.has(path)) {\n            this.fileSizes.set(path, stats.size);\n            if (stats.size > 0 && (this.isReady || (options.complete && this.isTodaysLogfile(path)))) {\n                this.streamChange(path, 0, options);\n            }\n        } else if (event === 'change') {\n            const oldFileSize = this.fileSizes.get(path)!;\n            this.fileSizes.set(path, stats.size);\n            if (this.isReady && stats.size > oldFileSize) {\n                this.streamChange(path, oldFileSize, options);\n            }\n        } else if (event === 'unlink') {\n            this.fileSizes.delete(path);\n        }\n    }\n\n    /**\n     * If the log file belongs to today\n     *\n     * @param path The log file path\n     */\n    isTodaysLogfile(path: string): boolean {\n        const YYYYMMDDDate = new Date().toJSON().slice(0, 10);\n        return path.includes(YYYYMMDDDate);\n    }\n\n    /**\n     * Streams a portion of a file to the console\n     *\n     * @param path The file to stream\n     * @param start The offset in bytes where to start\n     * @param options some options\n     */\n    streamChange(path: string, start: number, options: CLILogsOptions): void {\n        const input = fs.createReadStream(path, {\n            encoding: 'utf8',\n            start,\n            autoClose: true,\n        });\n        if (options.regex) {\n            // Read the input line by line and only include the lines matching the filter\n            input\n                .pipe(es.split())\n                .pipe(es.filterSync(line => options.regex!.test(line)))\n                .pipe(es.mapSync((line: string) => line + os.EOL))\n                .pipe(process.stdout);\n        } else {\n            // just pipe the input through\n            tools.pipeLinewise(input, process.stdout);\n        }\n    }\n}\n", "export const __import_meta_url =\n  typeof document === 'undefined' ? new (require('url'.replace('', '')).URL)('file:' + __filename).href :\n    (document.currentScript && document.currentScript.src || new URL('main.js', document.baseURI).href)\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;ACAO,IAAM,oBACX,OAAO,aAAa,cAAc,KAAK,QAAQ,MAAM,QAAQ,IAAI,EAAE,CAAC,GAAE,IAAK,UAAU,UAAU,EAAE,OAC9F,SAAS,iBAAiB,SAAS,cAAc,OAAO,IAAI,IAAI,WAAW,SAAS,OAAO,EAAE;ADFlG,wBAAmD;AACnD,kCAA6C;AAC7C,sBAAqB;AACrB,sBAAe;AACf,qBAAe;AACf,0BAAe;AACf,yBAA8B;AAE9B,MAAMA,eAAU,kCAAc,qBAAmB,UAAU,UAAU,EAAE;AAEvE,MAAM,EAAE,kBAAiB,IAAK;AAUxB,MAAO,gBAAgB,6BAAU;EAClB,YAAY,oBAAI,IAAG;EAC5B,UAAU;EAElB,YAAY,SAA0B;AAClC,UAAM,OAAO;EACjB;;;;;;;EAQA,QAAQ,MAAa,QAA2B;AAC5C,UAAM,cAAc,KAAK,CAAC;AAC1B,UAAM,QAAQ,OAAO,SAAS,OAAO;AACrC,UAAM,QAAQ,OAAO,SAAS;AAE9B,UAAM,UAA0B;MAC5B,UAAU,KAAK,QAAQ;;AAG3B,UAAM,SAAS,gBAAAC,QAAG,aAAaD,SAAQ,QAAQ,kBAAiB,CAAE,CAAC;AACnE,UAAM,aAAS,4BAAAE,QAAY,OAAO,GAAG;AAErC,QAAI,WAAW,OAAO,YAAW;AACjC,QAAI,UAAU;AACV,UAAI,QAAQ,gBAAAD,QAAG,aAAa,QAAQ,EAAE,SAAS,OAAO,EAAE,MAAM,IAAI;AAClE,cAAQ,MAAM,OAAO,UAAQ,IAAI;AACjC,UAAI,MAAM,SAAS,OAAO;AACtB,cAAM,OAAO,GAAG,MAAM,SAAS,KAAK;MACxC;AACA,UAAI;AACJ,UAAI,aAAa;AAEb,gBAAQ,IAAI,OAAO,KAAK,WAAW,KAAK;AACxC,gBAAQ,QAAQ;MACpB;AACA,YAAM,QAAQ,UAAO;AACjB,YAAI,SAAS,CAAC,MAAM,KAAK,IAAI,GAAG;AAC5B;QACJ;AACA,gBAAQ,IAAI,IAAI;MACpB,CAAC;AAED,UAAI,OAAO;AACP,mBAAW,SAAS,QAAQ,OAAO,GAAG;AACtC,cAAM,QAAQ,SAAS,MAAM,GAAG;AAChC,cAAM,IAAG;AACT,wBAAAE,QACK,MAAM,GAAG,MAAM,KAAK,GAAG,CAAC,cAAc;UACnC,kBAAkB,EAAE,oBAAoB,IAAG;UAC3C,gBAAgB;SACnB,EACA,GAAG,OAAO,KAAK,aAAa,KAAK,MAAM,OAAO,CAAC,EAC/C,GAAG,SAAS,MAAO,KAAK,UAAU,IAAK;MAChD;IACJ,OAAO;AACH,cAAQ,IAAI,mBAAmB;IACnC;EACJ;;;;;;;;;EAUA,aAAa,SAAyB,OAAe,MAAc,OAA0B;AACzF,QAAI,UAAU,SAAS,CAAC,KAAK,UAAU,IAAI,IAAI,GAAG;AAC9C,WAAK,UAAU,IAAI,MAAM,MAAM,IAAI;AACnC,UAAI,MAAM,OAAO,MAAM,KAAK,WAAY,QAAQ,YAAY,KAAK,gBAAgB,IAAI,IAAK;AACtF,aAAK,aAAa,MAAM,GAAG,OAAO;MACtC;IACJ,WAAW,UAAU,UAAU;AAC3B,YAAM,cAAc,KAAK,UAAU,IAAI,IAAI;AAC3C,WAAK,UAAU,IAAI,MAAM,MAAM,IAAI;AACnC,UAAI,KAAK,WAAW,MAAM,OAAO,aAAa;AAC1C,aAAK,aAAa,MAAM,aAAa,OAAO;MAChD;IACJ,WAAW,UAAU,UAAU;AAC3B,WAAK,UAAU,OAAO,IAAI;IAC9B;EACJ;;;;;;EAOA,gBAAgB,MAAY;AACxB,UAAM,gBAAe,oBAAI,KAAI,GAAG,OAAM,EAAG,MAAM,GAAG,EAAE;AACpD,WAAO,KAAK,SAAS,YAAY;EACrC;;;;;;;;EASA,aAAa,MAAc,OAAe,SAAuB;AAC7D,UAAM,QAAQ,gBAAAF,QAAG,iBAAiB,MAAM;MACpC,UAAU;MACV;MACA,WAAW;KACd;AACD,QAAI,QAAQ,OAAO;AAEf,YACK,KAAK,oBAAAG,QAAG,MAAK,CAAE,EACf,KAAK,oBAAAA,QAAG,WAAW,UAAQ,QAAQ,MAAO,KAAK,IAAI,CAAC,CAAC,EACrD,KAAK,oBAAAA,QAAG,QAAQ,CAAC,SAAiB,OAAO,eAAAC,QAAG,GAAG,CAAC,EAChD,KAAK,QAAQ,MAAM;IAC5B,OAAO;AAEH,wCAAM,aAAa,OAAO,QAAQ,MAAM;IAC5C;EACJ;;",
  "names": ["require", "fs", "toolsLogger", "chokidar", "es", "os"]
}
