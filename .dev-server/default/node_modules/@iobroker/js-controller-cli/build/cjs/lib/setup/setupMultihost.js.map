{
  "version": 3,
  "sources": ["../../../../src/lib/setup/setupMultihost.ts"],
  "sourcesContent": ["import fs from 'fs-extra';\nimport path from 'node:path';\nimport readline from 'node:readline';\nimport { tools } from '@iobroker/js-controller-common';\nimport { isLocalObjectsDbServer, isLocalStatesDbServer } from '@iobroker/js-controller-common';\nimport type { Client as ObjectsRedisClient } from '@iobroker/db-objects-redis';\nimport { MHClient, type BrowseResultEntry } from './multihostClient.js';\nimport readlineSync from 'readline-sync';\nimport prompt from 'prompt';\n\ninterface MHParams {\n    secure?: boolean;\n    persist?: boolean;\n    debug?: boolean;\n}\n\nexport interface CLIMultihostOptions {\n    objects: ObjectsRedisClient;\n    params?: MHParams;\n}\n\nexport class Multihost {\n    private readonly configName: string;\n    private params: MHParams;\n    private objects: ObjectsRedisClient;\n\n    constructor(options: CLIMultihostOptions) {\n        this.configName = tools.getConfigFileName();\n        this.params = options.params || {};\n        this.objects = options.objects;\n    }\n\n    /**\n     * Retrieve config (iobroker.json content)\n     */\n    getConfig(): ioBroker.IoBrokerJson {\n        let config;\n        // read actual configuration\n        try {\n            if (fs.existsSync(this.configName)) {\n                config = fs.readJsonSync(this.configName);\n            } else {\n                config = fs.readJsonSync(\n                    path.join(tools.getControllerDir(), 'conf', `${tools.appName.toLowerCase()}-dist.json`),\n                );\n            }\n        } catch {\n            config = fs.readJsonSync(\n                path.join(tools.getControllerDir(), 'conf', `${tools.appName.toLowerCase()}-dist.json`),\n            );\n        }\n        return config;\n    }\n\n    /**\n     * Show hosts on CLI\n     *\n     * @param list list of hosts\n     */\n    showHosts(list: BrowseResultEntry[]): void {\n        if (!list || !list.length) {\n            console.info(\n                'No Multihost server found. Make sure iobroker is running on the host where you enabled multihost discovery (and it is not this host)!',\n            );\n        } else {\n            for (let i = 0; i < list.length; i++) {\n                console.log(\n                    `${i + 1} | ${list[i].hostname!.padStart(20)} | ${list[i].slave ? 'slave' : ' host'} | ${list[\n                        i\n                    ].ip!.padStart(20)} | ${JSON.stringify(list[i].info)}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Start MH browsing\n     */\n    async browse(): Promise<BrowseResultEntry[]> {\n        const mhClient = new MHClient();\n        try {\n            const res = await mhClient.browse(2_000, !!this.params.debug);\n            return res;\n        } catch (e) {\n            throw new Error(`Multihost discovery client: Cannot browse: ${e.message}`);\n        }\n    }\n\n    /**\n     * Show MH state on CLI\n     *\n     * @param config iob config\n     * @param changed if config has changed\n     */\n    private async showMHState(config: ioBroker.IoBrokerJson, changed: boolean): Promise<void> {\n        if (config.multihostService.enabled) {\n            let warningShown = false;\n\n            const hasLocalObjectsServer = await isLocalObjectsDbServer(config.objects.type, config.objects.host, true);\n\n            if (hasLocalObjectsServer) {\n                console.log('Changing objects server to accept connections on all IP addresses.');\n                config.objects.host = tools.getListenAllAddress();\n                changed = true;\n            } else if (config.objects.type === 'redis') {\n                warningShown = true;\n                console.log(\n                    `Please check the binding of redis service. By default it is only local: http://download.redis.io/redis-stable/redis.conf\\nChange \"bind 127.0.0.1\" to \"bind ${tools.getListenAllAddress()}\" or to others.`,\n                );\n            } else {\n                warningShown = true;\n                console.log(\n                    `Please check the binding of the configured ${config.objects.type} server to allow remote connections.`,\n                );\n            }\n\n            const hasLocalStatesServer = await isLocalStatesDbServer(config.states.type, config.states.host, true);\n\n            if (hasLocalStatesServer) {\n                console.log('Changing states server to accept connections on all IP addresses.');\n                config.states.host = tools.getListenAllAddress();\n                changed = true;\n            } else if (config.states.type === 'redis') {\n                !warningShown &&\n                    console.log(\n                        `Please check the binding of redis service. By default it is only local: http://download.redis.io/redis-stable/redis.conf\\nChange \"bind 127.0.0.1\" to \"bind ${tools.getListenAllAddress()}\" or to others.`,\n                    );\n            } else {\n                !warningShown &&\n                    console.log(\n                        `Please check the binding of the configured ${config.states.type} server to allow remote connections.`,\n                    );\n            }\n        }\n        if (!changed) {\n            console.log('No configuration change needed.');\n        } else {\n            fs.writeFileSync(this.configName, JSON.stringify(config, null, 2));\n            console.log('Please restart ioBroker for the changes to take effect: \"iobroker restart\"');\n        }\n        console.log('\\n');\n        console.log(`Multihost discovery server: ${config.multihostService.enabled ? 'enabled' : 'disabled'}`);\n        console.log(`Discovery authentication:   ${config.multihostService.secure ? 'enabled' : 'disabled'}`);\n        console.log(\n            `Persistent activation:      ${\n                config.multihostService.enabled && config.multihostService.persist ? 'enabled' : 'disabled'\n            }`,\n        );\n        console.log(`Objects:                    ${config.objects.type} on ${config.objects.host}`);\n        console.log(`States:                     ${config.states.type} on ${config.states.host}`);\n    }\n\n    /**\n     * Enables or disables the multihost discovery server in the config json\n     *\n     * @param isEnable - if the server should be activated or deactivated\n     * @param callback - callback function to be executed\n     */\n    enable(isEnable: boolean, callback: (err?: Error) => void): void {\n        let changed = false;\n        const config = this.getConfig();\n        config.multihostService = config.multihostService || { enabled: false, secure: true };\n\n        if (isEnable && !config.multihostService.enabled) {\n            changed = true;\n            config.multihostService.enabled = true;\n            config.multihostService.password = '';\n            console.log(\n                'Multihost discovery server activated on this host. If iobroker is currently not running please start befeore trying to discover this host.',\n            );\n            console.log(\n                'Important: Multihost discovery works with UDP packets. Make sure they are routed correctly in your network. If you use Docker you also need to configure this correctly.',\n            );\n            if (!this.params.persist) {\n                console.log(\n                    'Multihost discovery will be automatically deactivated after 15 minutes. If you want to activate it permanently use the --persist flag',\n                );\n            }\n        } else if (!isEnable && config.multihostService.enabled) {\n            changed = true;\n            config.multihostService.enabled = false;\n            config.multihostService.password = '';\n            console.log('Multihost discovery server deactivated on this host.');\n        }\n        if (this.params.secure === undefined) {\n            this.params.secure = true;\n        }\n\n        this.params.persist = !!this.params.persist;\n\n        if (\n            isEnable &&\n            (config.multihostService.secure !== this.params.secure ||\n                (config.multihostService.secure && !config.multihostService.password) ||\n                config.multihostService.persist !== this.params.persist)\n        ) {\n            changed = true;\n            config.multihostService.secure = this.params.secure;\n            config.multihostService.persist = this.params.persist;\n            console.log(`Discovery authentication ${this.params.secure ? 'activated' : 'deactivated'}.`);\n            if (config.multihostService.secure) {\n                prompt.message = '';\n                prompt.delimiter = '';\n                const schema = {\n                    properties: {\n                        password: {\n                            description: 'Enter secret phrase for connection:',\n                            pattern: /^[^'\"]+$/,\n                            message: 'No \" are allowed',\n                            hidden: true,\n                        },\n                        passwordRepeat: {\n                            description: 'Repeat secret phrase for connection:',\n                            pattern: /^[^'\"]+$/,\n                            message: 'No \" are allowed',\n                            hidden: true,\n                        },\n                    },\n                };\n                prompt.start();\n\n                prompt.get(schema, (err, password) => {\n                    if (password?.password) {\n                        if (password.password !== password.passwordRepeat) {\n                            callback(new Error('Secret phrases are not equal!'));\n                        } else {\n                            this.objects.getObject('system.config', (err, obj) => {\n                                config.multihostService.password = tools.encrypt(\n                                    obj!.native.secret,\n                                    password.password as string,\n                                );\n                                this.showMHState(config, changed);\n                                callback();\n                            });\n                        }\n                    } else {\n                        callback(new Error('No secret phrase entered!'));\n                    }\n                });\n            } else {\n                this.showMHState(config, changed);\n                callback();\n            }\n        } else {\n            this.showMHState(config, changed);\n            callback();\n        }\n    }\n\n    /**\n     * Show the MH status\n     */\n    status(): void {\n        const config = this.getConfig();\n        config.multihostService = config.multihostService || { enabled: false, secure: true };\n        this.showMHState(config, false);\n    }\n\n    /**\n     * Read password from cli\n     */\n    readPassword(): string {\n        return readlineSync.question('Enter secret phrase for connection: ', { hideEchoBack: true });\n    }\n\n    /**\n     * Connect to given MH server\n     *\n     * @param mhClient mhclient used for connection\n     * @param ip ip address of server\n     * @param pass password\n     * @param callback\n     */\n    connectHelper(mhClient: MHClient, ip: string, pass: string, callback: (err?: Error) => void): void {\n        mhClient.connect(ip, pass, async (err, oObjects, oStates, ipHost) => {\n            if (err) {\n                callback(new Error(`Cannot connect to \"${ip}\": ${err.message}`));\n            } else if (oObjects && oStates) {\n                const config = this.getConfig();\n                config.objects = oObjects;\n                config.states = oStates;\n\n                const hasLocalObjectsServer = await isLocalObjectsDbServer(\n                    config.objects.type,\n                    config.objects.host,\n                    true,\n                );\n                const hasLocalStatesServer = await isLocalStatesDbServer(config.states.type, config.states.host, true);\n\n                if (hasLocalObjectsServer || hasLocalStatesServer) {\n                    callback(\n                        new Error(\n                            `IP Address of the remote host is ${tools.getLocalAddress()}. Connections from this host will not be accepted. Please change the configuration of this host to accept remote connections.`,\n                        ),\n                    );\n                } else {\n                    if (tools.isListenAllAddress(config.states.host)) {\n                        // TODO: why we set the remote IP only when the local config allows full connectivity?\n                        config.states.host = ipHost ?? '';\n                    }\n                    if (tools.isListenAllAddress(config.objects.host)) {\n                        // TODO: why we set the remote IP only when the local config allows full connectivity?\n                        config.objects.host = ipHost ?? '';\n                    }\n\n                    fs.writeFileSync(this.configName, JSON.stringify(config, null, 2));\n                    console.log('Config ok. Please restart ioBroker: \"iobroker restart\"');\n                    callback();\n                }\n            } else {\n                callback(new Error('No configuration received!'));\n            }\n        });\n    }\n\n    /**\n     * Connect to MH Server\n     *\n     * @param index index of host to connect to\n     * @param pass password\n     * @param callback\n     */\n    async connect(\n        index: number | null,\n        pass: string | null,\n        callback: (err?: Error, list?: BrowseResultEntry[]) => void,\n    ): Promise<void> {\n        if (typeof pass === 'function') {\n            callback = pass;\n            pass = null;\n        }\n        if (typeof index === 'function') {\n            callback = index;\n            index = null;\n        }\n\n        const mhClient = new MHClient();\n        let list: BrowseResultEntry[];\n\n        try {\n            list = await mhClient.browse(2_000, !!this.params.debug);\n        } catch (e) {\n            callback(new Error(`Cannot browse: ${e.message}`));\n            return;\n        }\n\n        this.showHosts(list);\n\n        if (index !== null && index !== undefined && index > 0) {\n            if (list && index < list.length + 1) {\n                if (!pass) {\n                    callback(new Error('No password defined: please use \"multihost connect <NUMBER> <PASSWORD>\"'));\n                } else {\n                    this.connectHelper(mhClient, list[index - 1].ip!, pass, callback);\n                }\n            } else {\n                callback(new Error(`Invalid index: ${index}`));\n            }\n        } else if (list && list.length) {\n            const rl = readline.createInterface({\n                input: process.stdin,\n                output: process.stdout,\n            });\n            rl.question('Please select host [1]: ', answer => {\n                if (answer === '' || answer === null || answer === undefined) {\n                    index = 1;\n                }\n                index = parseInt(answer, 10) - 1;\n                const listEntry = list[index];\n                if (!listEntry) {\n                    rl.close();\n                    callback(new Error(`Invalid index: ${answer}`));\n                } else {\n                    if (listEntry.auth) {\n                        const password = this.readPassword();\n                        if (password) {\n                            this.connectHelper(mhClient, listEntry.ip!, password, callback);\n                        } else {\n                            callback(new Error('No password entered!'));\n                        }\n                    } else {\n                        this.connectHelper(mhClient, listEntry.ip!, '', callback);\n                    }\n                }\n            });\n        } else {\n            callback(undefined, list);\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["import_js_controller_common", "fs", "path", "prompt", "err", "readlineSync", "readline"]
}
