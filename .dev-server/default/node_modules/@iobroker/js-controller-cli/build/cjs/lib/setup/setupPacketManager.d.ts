import { type InternalLogger } from '@iobroker/js-controller-common-db/tools';
declare enum LOG_LEVELS {
    silly = 5,
    debug = 4,
    log = 3,
    info = 2,
    warn = 1,
    error = 0
}
interface Logger extends InternalLogger {
    log(message: string): void;
}
type Manager = 'apt' | 'yum' | '';
interface PacketManagerOptions {
    logLevel: LOG_LEVELS;
    manager?: Manager;
    logger?: Logger;
}
export interface UpgradePacket {
    /** Name of the packet which should be upgraded */
    name: string;
    /** Optional version */
    version?: string;
}
export declare class PacketManager {
    private manager;
    private readonly logger;
    private dpkg;
    private sudo;
    private readonly _readyPromise;
    private readonly COMMANDS;
    constructor(options?: PacketManagerOptions);
    /** Starts the initialization process */
    private _init;
    ready(): Promise<void>;
    /**
     * Tests if the given command can be executed
     *
     * @param cmd The command to test
     * @returns True if the execution was successful, false otherwise
     */
    private _isCmd;
    private _isDpkgAvailable;
    private _isSudoAvailable;
    private _isSudoAvailableForManager;
    /**
     * Detects which package manager is installed. Throws if none can be found
     */
    private _detectManager;
    /**
     * Updates the sources if apt is used
     */
    update(): Promise<void>;
    private _listPackages;
    /**
     * Checks which packages are installed and returns them
     *
     * @param packets The packets to test
     */
    checkInstalled(packets: string[] | string): Promise<string[]>;
    /**
     * Installs a single packet using the configured manager and returns the stdout if there was any
     *
     * @param packet The packet to install
     */
    private _installPacket;
    /**
     * List all packages for which updates are available
     */
    listUpgradeablePackages(): Promise<string[]>;
    /**
     * Installs multiple packets. The returned Promise contains the list of failed packets
     *
     * @param packets list of packets to install
     */
    private _installPackets;
    /**
     * Upgrade given OS packets to given version or newest available version
     *
     * @param packets the packet names and version information
     */
    upgrade(packets: UpgradePacket[]): Promise<void>;
    /**
     * Installs all given packets
     *
     * @param packets list of packets or single packet to upgrade
     */
    install(packets: string[] | string): Promise<void>;
}
export {};
//# sourceMappingURL=setupPacketManager.d.ts.map