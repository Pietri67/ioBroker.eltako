{
  "version": 3,
  "sources": ["../../../../src/lib/setup/setupUpgrade.ts"],
  "sourcesContent": ["import Debug from 'debug';\nimport fs from 'fs-extra';\nimport { tools, EXIT_CODES } from '@iobroker/js-controller-common';\nimport semver from 'semver';\nimport { Upload } from '@/lib/setup/setupUpload.js';\nimport { Install } from '@/lib/setup/setupInstall.js';\nimport rl from 'readline-sync';\nimport tty from 'node:tty';\nimport path from 'node:path';\nimport { getRepository, isVersionIgnored } from '@/lib/setup/utils.js';\nimport type { Client as ObjectsInRedisClient } from '@iobroker/db-objects-redis';\nimport type { Client as StatesInRedisClient } from '@iobroker/db-states-redis';\nimport type { ProcessExitCallback } from '@/lib/_Types.js';\nimport { IoBrokerError } from '@/lib/setup/customError.js';\n\nconst debug = Debug('iobroker:cli');\n\ntype IoPackDependencies = string[] | Record<string, any>[] | Record<string, any>;\n\ninterface CLIUpgradeOptions {\n    processExit: ProcessExitCallback;\n    objects: ObjectsInRedisClient;\n    states: StatesInRedisClient;\n    params: Record<string, any>;\n}\n\nexport class Upgrade {\n    private readonly hostname = tools.getHostName();\n    private readonly upload: Upload;\n    private readonly install: Install;\n    private readonly objects: ObjectsInRedisClient;\n    private readonly processExit: ProcessExitCallback;\n\n    constructor(options: CLIUpgradeOptions) {\n        options = options || {};\n\n        if (!options.processExit) {\n            throw new Error('Invalid arguments: processExit is missing');\n        }\n\n        this.processExit = options.processExit;\n        this.objects = options.objects;\n\n        this.upload = new Upload(options);\n        this.install = new Install(options);\n    }\n\n    /**\n     * Sorts the adapters by their dependencies and then upgrades multiple adapters from the given repository url\n     *\n     * @param repo the repository content\n     * @param list list of adapters to upgrade\n     * @param forceDowngrade flag to force downgrade\n     * @param autoConfirm automatically confirm the tty questions (bypass)\n     */\n    async upgradeAdapterHelper(\n        repo: Record<string, any>,\n        list: string[],\n        forceDowngrade: boolean,\n        autoConfirm: boolean,\n    ): Promise<void> {\n        const relevantAdapters = [];\n        // check which adapters are upgradeable and sort them according to their dependencies\n        for (const adapter of list) {\n            if (repo[adapter].controller) {\n                // skip controller\n                continue;\n            }\n            const adapterDir = tools.getAdapterDir(adapter);\n            if (adapterDir && fs.existsSync(path.join(adapterDir, 'io-package.json'))) {\n                const ioInstalled = fs.readJsonSync(path.join(adapterDir, 'io-package.json'));\n                if (!tools.upToDate(repo[adapter].version, ioInstalled.common.version)) {\n                    // not up to date, we need to put it into account for our dependency check\n                    relevantAdapters.push(adapter);\n                }\n            }\n        }\n\n        if (relevantAdapters.length) {\n            const sortedAdapters = [];\n\n            while (relevantAdapters.length) {\n                let oneAdapterAdded = false;\n                // create an ordered list for upgrades\n                for (let i = relevantAdapters.length - 1; i >= 0; i--) {\n                    const relAdapter = relevantAdapters[i];\n                    // if a new version has no dependencies, we can upgrade\n                    if (!repo[relAdapter].dependencies && !repo[relAdapter].globalDependencies) {\n                        // no deps, simply add it\n                        sortedAdapters.push(relAdapter);\n                        relevantAdapters.splice(relevantAdapters.indexOf(relAdapter), 1);\n                        oneAdapterAdded = true;\n                    } else {\n                        const allDeps: Record<string, string> = {\n                            ...tools.parseDependencies(repo[relAdapter].dependencies),\n                            ...tools.parseDependencies(repo[relAdapter].globalDependencies),\n                        };\n\n                        // we have to check if the deps are there\n                        let conflict = false;\n                        for (const [depName, version] of Object.entries(allDeps)) {\n                            debug(`adapter \"${relAdapter}\" has dependency \"${depName}\": \"${version}\"`);\n                            if (version !== '*') {\n                                // dependency is important because it affects the version range\n                                if (relevantAdapters.includes(depName)) {\n                                    // the dependency is also in the upgrade list and not previously added, we should add the dependency first\n                                    debug(`conflict for dependency \"${depName}\" at adapter \"${relAdapter}\"`);\n                                    conflict = true;\n                                    break;\n                                }\n                            }\n                        }\n                        // we reached here and no conflict, so every dep is satisfied\n                        if (!conflict) {\n                            sortedAdapters.push(relAdapter);\n                            relevantAdapters.splice(relevantAdapters.indexOf(relAdapter), 1);\n                            oneAdapterAdded = true;\n                        }\n                    }\n                }\n\n                if (!oneAdapterAdded) {\n                    // no adapter during this loop -> circular dependency\n                    console.warn(`Circular dependency detected between adapters \"${relevantAdapters.join(', ')}\"`);\n                    sortedAdapters.concat(relevantAdapters);\n                    break; // however, break and try to update\n                }\n            }\n\n            debug(`upgrade order is \"${sortedAdapters.join(', ')}\"`);\n\n            for (const sortedAdapter of sortedAdapters) {\n                if (repo[sortedAdapter]?.controller) {\n                    continue;\n                }\n                await this.upgradeAdapter(repo, sortedAdapter, forceDowngrade, autoConfirm, true);\n            }\n        } else {\n            console.log('All adapters are up to date');\n        }\n    }\n\n    /**\n     * Checks that local and global deps are fulfilled else rejects promise\n     *\n     * @param deps local dependencies - required on this host\n     * @param globalDeps global dependencies - required on one of the hosts\n     */\n    private async _checkDependencies(deps: IoPackDependencies, globalDeps: IoPackDependencies): Promise<void> {\n        if (!deps && !globalDeps) {\n            return Promise.resolve();\n        }\n\n        deps = tools.parseDependencies(deps);\n        globalDeps = tools.parseDependencies(globalDeps);\n        // combine both dependencies\n        const allDeps = { ...deps, ...globalDeps };\n\n        // Get all installed adapters\n        const objs = await this.objects.getObjectViewAsync(\n            'system',\n            'instance',\n            {\n                startkey: 'system.adapter.',\n                endkey: 'system.adapter.\\u9999',\n            },\n            undefined,\n        );\n\n        if (objs?.rows?.length) {\n            for (const dName in allDeps) {\n                if (dName === 'js-controller') {\n                    const version = allDeps[dName];\n                    // Check only if version not *, else we don't have to read io-pack unnecessarily\n                    if (version !== '*') {\n                        const iopkg_ = fs.readJSONSync(`${tools.getControllerDir()}/package.json`);\n                        try {\n                            if (!semver.satisfies(iopkg_.version, version, { includePrerelease: true })) {\n                                return Promise.reject(\n                                    new Error(\n                                        `Invalid version of \"${dName}\". Installed \"${iopkg_.version}\", required \"${version}`,\n                                    ),\n                                );\n                            }\n                        } catch (e) {\n                            console.log(`Can not check js-controller dependency requirement: ${e.message}`);\n                            return Promise.reject(\n                                new Error(\n                                    `Invalid version of \"${dName}\". Installed \"${iopkg_.version}\", required \"${version}`,\n                                ),\n                            );\n                        }\n                    }\n                } else {\n                    let gInstances: ioBroker.GetObjectViewItem<ioBroker.InstanceObject>[] = [];\n                    let locInstances: ioBroker.GetObjectViewItem<ioBroker.InstanceObject>[] = [];\n                    // if global dep get all instances of adapter\n                    if (globalDeps[dName] !== undefined) {\n                        gInstances = objs.rows.filter(obj => obj.value.common && obj.value.common.name === dName);\n                    }\n                    if (deps[dName] !== undefined) {\n                        // local dependencies: get all instances on the same host\n                        locInstances = objs.rows.filter(\n                            obj =>\n                                obj.value.common &&\n                                obj.value.common.name === dName &&\n                                obj.value.common.host === this.hostname,\n                        );\n                        if (locInstances.length === 0) {\n                            return Promise.reject(new Error(`Required dependency \"${dName}\" not found on this host.`));\n                        }\n                    }\n\n                    let isFound = false;\n                    // we check that all instances match - respect different local and global dep versions\n                    for (const instance of locInstances) {\n                        const instanceVersion = instance.value.common.version;\n                        try {\n                            if (\n                                !semver.satisfies(instanceVersion, deps[dName], {\n                                    includePrerelease: true,\n                                })\n                            ) {\n                                return Promise.reject(\n                                    new Error(\n                                        `Invalid version of \"${dName}\". Installed \"${instanceVersion}\", required \"${deps[dName]}`,\n                                    ),\n                                );\n                            }\n                        } catch (e) {\n                            console.log(`Can not check dependency requirement: ${e.message}`);\n                            return Promise.reject(\n                                new Error(\n                                    `Invalid version of \"${dName}\". Installed \"${instanceVersion}\", required \"${deps[dName]}`,\n                                ),\n                            );\n                        }\n                        isFound = true;\n                    }\n\n                    for (const instance of gInstances) {\n                        const instanceVersion = instance.value.common.version;\n                        try {\n                            if (\n                                !semver.satisfies(instanceVersion, globalDeps[dName], {\n                                    includePrerelease: true,\n                                })\n                            ) {\n                                return Promise.reject(\n                                    new Error(\n                                        `Invalid version of \"${dName}\". Installed \"${instanceVersion}\", required \"${globalDeps[dName]}`,\n                                    ),\n                                );\n                            }\n                        } catch (e) {\n                            console.log(`Can not check dependency requirement: ${e.message}`);\n                            return Promise.reject(\n                                new Error(\n                                    `Invalid version of \"${dName}\". Installed \"${instanceVersion}\", required \"${globalDeps[dName]}`,\n                                ),\n                            );\n                        }\n                        isFound = true;\n                    }\n\n                    if (isFound === false) {\n                        return Promise.reject(new Error(`Required dependency \"${dName}\" not found.`));\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Try to async upgrade adapter from a given source with some checks\n     *\n     * @param repoUrlOrObject url of the selected repository or parsed repo, if undefined, use current active repository\n     * @param adapter name of the adapter (can also include version like web@3.0.0)\n     * @param forceDowngrade flag to force downgrade\n     * @param autoConfirm automatically confirm the tty questions (bypass)\n     * @param upgradeAll if true, this is an upgrade all call, we don't do major upgrades if no tty\n     */\n    async upgradeAdapter(\n        repoUrlOrObject: string | Record<string, any> | undefined,\n        adapter: string,\n        forceDowngrade: boolean,\n        autoConfirm: boolean,\n        upgradeAll: boolean,\n    ): Promise<void> {\n        let sources: Record<string, any>;\n        if (!repoUrlOrObject || !tools.isObject(repoUrlOrObject)) {\n            try {\n                sources = await getRepository({ repoName: repoUrlOrObject, objects: this.objects });\n            } catch (e) {\n                console.error(e.message);\n                return this.processExit(e instanceof IoBrokerError ? e.code : e);\n            }\n        } else {\n            sources = repoUrlOrObject;\n        }\n\n        let version: string;\n        if (adapter.includes('@')) {\n            const parts = adapter.split('@');\n            adapter = parts[0];\n            version = parts[1];\n        } else {\n            version = '';\n        }\n        if (version) {\n            forceDowngrade = true;\n        }\n\n        /** Repository entry of this adapter */\n        const repoAdapter: Record<string, any> = sources[adapter];\n\n        // TODO: not really adapter object but close enough\n        const finishUpgrade = async (name: string, ioPack?: ioBroker.AdapterObject): Promise<void> => {\n            if (!ioPack) {\n                const adapterDir = tools.getAdapterDir(name);\n\n                if (!adapterDir) {\n                    console.error(`Cannot find io-package.json in ${adapterDir}`);\n                    return this.processExit(EXIT_CODES.MISSING_ADAPTER_FILES);\n                }\n\n                try {\n                    // close enough to an AdapterObject\n                    ioPack = fs.readJSONSync(path.join(adapterDir, 'io-package.json')) as ioBroker.AdapterObject;\n                } catch {\n                    console.error(`Cannot find io-package.json in ${adapterDir}`);\n                    return this.processExit(EXIT_CODES.MISSING_ADAPTER_FILES);\n                }\n            }\n\n            if (ioPack.common.osDependencies) {\n                // install linux/osx libraries\n                await this.install.installOSPackages(ioPack.common.osDependencies);\n            }\n\n            // Upload www and admin files of adapter\n            await this.upload.uploadAdapter(name, false, true);\n            // extend all adapter instance default configs with current config\n            // (introduce potentially new attributes while keeping current settings)\n            await this.upload.upgradeAdapterObjects(name, ioPack);\n            await this.upload.uploadAdapter(name, true, true);\n        };\n\n        const adapterDir = tools.getAdapterDir(adapter);\n\n        // Read the actual description of installed adapter with a version\n        if (!adapterDir || (!version && !fs.existsSync(path.join(adapterDir, 'io-package.json')))) {\n            return console.log(\n                `Adapter \"${adapter}\"${\n                    adapter.length < 15 ? new Array(15 - adapter.length).join(' ') : ''\n                } is not installed.`,\n            );\n        }\n        // Get the url of io-package.json or direct the version\n        if (!repoAdapter) {\n            console.log(`Adapter \"${adapter}\" is not in the repository and cannot be updated.`);\n            return this.processExit(EXIT_CODES.ADAPTER_NOT_FOUND);\n        }\n        if (repoAdapter.controller) {\n            return console.log(\n                `Cannot update ${adapter} using this command. Please use \"iobroker upgrade self\" instead!`,\n            );\n        }\n\n        // TODO: not 100 % true but should be correct enough\n        let ioInstalled: Pick<ioBroker.AdapterObject, 'common'>;\n        if (adapterDir && fs.existsSync(path.join(adapterDir, 'io-package.json'))) {\n            ioInstalled = fs.readJsonSync(`${adapterDir}/io-package.json`);\n        } else {\n            // @ts-expect-error https://github.com/ioBroker/adapter-core/issues/455\n            ioInstalled = { common: { version: '0.0.0' } };\n        }\n\n        const installedVersion = ioInstalled.common.version;\n\n        /**\n         * We show changelog (news) and ask user if he really wants to upgrade but only if fd is associated with a tty, returns true if upgrade desired\n         *\n         * @param installedVersion - installed version of adapter\n         * @param targetVersion - target version of adapter\n         * @param adapterName - name of the adapter\n         */\n        const showUpgradeDialog = (installedVersion: string, targetVersion: string, adapterName: string): boolean => {\n            // major upgrade or downgrade\n            const isMajor = semver.major(installedVersion) !== semver.major(targetVersion);\n\n            if (autoConfirm || (!tty.isatty(process.stdout.fd) && (!isMajor || !upgradeAll))) {\n                // force flag or script on non-major or single adapter upgrade -> always upgrade\n                return true;\n            }\n\n            if (!tty.isatty(process.stdout.fd) && isMajor && upgradeAll) {\n                // no tty and not forced and multiple adapters, do not upgrade\n                console.log(`Skip major upgrade of ${adapterName} from ${installedVersion} to ${targetVersion}`);\n                return false;\n            }\n\n            const isUpgrade = semver.gt(targetVersion, installedVersion);\n            const isDowngrade = semver.lt(targetVersion, installedVersion);\n\n            // if information in repo files -> show news\n            if (repoAdapter?.news) {\n                const news = repoAdapter.news;\n\n                let first = true;\n                // check if upgrade or downgrade\n                if (isUpgrade) {\n                    for (const version in news) {\n                        try {\n                            if (semver.lte(version, targetVersion) && semver.gt(version, installedVersion)) {\n                                if (first === true) {\n                                    const noMissingNews = news[targetVersion] && news[installedVersion];\n                                    console.log(\n                                        `\\nThis upgrade of \"${adapter}\" will ${\n                                            noMissingNews ? '' : 'at least '\n                                        }introduce the following changes:`,\n                                    );\n                                    console.log(\n                                        '==========================================================================',\n                                    );\n                                    first = false;\n                                } else if (first === false) {\n                                    console.log();\n                                }\n                                console.log(`-> ${version}:`);\n                                console.log(news[version].en);\n                            }\n                        } catch {\n                            // ignore\n                        }\n                    }\n                } else if (isDowngrade) {\n                    for (const version in news) {\n                        try {\n                            if (semver.gt(version, targetVersion) && semver.lte(version, installedVersion)) {\n                                if (first === true) {\n                                    const noMissingNews = news[targetVersion] && news[installedVersion];\n                                    console.log(\n                                        `\\nThis downgrade of \"${adapter}\" will ${\n                                            noMissingNews ? '' : 'at least '\n                                        }remove the following changes:`,\n                                    );\n                                    console.log(\n                                        '==========================================================================',\n                                    );\n                                    first = false;\n                                } else if (first === false) {\n                                    console.log();\n                                }\n                                console.log(`-> ${version}`);\n                                console.log(news[version].en);\n                            }\n                        } catch {\n                            // ignore\n                        }\n                    }\n                }\n                if (first === false) {\n                    console.log('==========================================================================\\n');\n                }\n            }\n\n            let answer;\n\n            // ask user if he really wants to upgrade/downgrade/reinstall - repeat until (y)es or (n)o given\n            do {\n                if (isUpgrade || isDowngrade) {\n                    if (isMajor) {\n                        console.log(\n                            `BE CAREFUL: THIS IS A MAJOR ${\n                                isUpgrade ? 'UPGRADE' : 'DOWNGRADE'\n                            }, WHICH WILL MOST LIKELY INTRODUCE BREAKING CHANGES!`,\n                        );\n                    }\n                    answer = rl.question(\n                        `Would you like to ${\n                            isUpgrade ? 'upgrade' : 'downgrade'\n                        } ${adapter} from @${installedVersion} to @${\n                            version || repoAdapter.version\n                        } now? [(y)es, (n)o]: `,\n                        {\n                            defaultInput: 'n',\n                        },\n                    );\n                } else {\n                    answer = rl.question(\n                        `Would you like to reinstall version ${\n                            version || repoAdapter.version\n                        } of ${adapter} now? [(y)es, (n)o]: `,\n                        {\n                            defaultInput: 'n',\n                        },\n                    );\n                }\n\n                answer = answer.toLowerCase();\n\n                if (answer === 'n' || answer === 'no') {\n                    return false;\n                }\n            } while (answer !== 'y' && answer !== 'yes');\n            return true;\n        };\n\n        // If a version is included in the repository\n        if (repoAdapter.version) {\n            if (!forceDowngrade) {\n                try {\n                    await this._checkDependencies(repoAdapter.dependencies, repoAdapter.globalDependencies);\n                } catch (e) {\n                    return console.error(`Cannot check dependencies: ${e.message}`);\n                }\n            }\n\n            if (\n                !forceDowngrade &&\n                (repoAdapter.version === installedVersion || tools.upToDate(repoAdapter.version, installedVersion))\n            ) {\n                return console.log(\n                    `Adapter \"${adapter}\"${\n                        adapter.length < 15 ? new Array(15 - adapter.length).join(' ') : ''\n                    } is up to date.`,\n                );\n            }\n            const targetVersion = version || repoAdapter.version;\n\n            const isIgnored = await isVersionIgnored({\n                adapterName: adapter,\n                version: targetVersion,\n                objects: this.objects,\n            });\n\n            if (isIgnored) {\n                console.log(\n                    `No upgrade of \"${adapter}\" desired, because version \"${targetVersion}\" is configured to be ignored by the user. Run \"${tools.appNameLowerCase} version ${adapter} --recognize\" to allow this upgrade!`,\n                );\n                return;\n            }\n\n            try {\n                if (!showUpgradeDialog(installedVersion, targetVersion, adapter)) {\n                    console.log(`No upgrade of \"${adapter}\" desired.`);\n                    return;\n                }\n            } catch (e) {\n                console.log(`Can not check version information to display upgrade infos: ${e.message}`);\n            }\n            console.log(`Update ${adapter} from @${installedVersion} to @${targetVersion}`);\n            const npmPacketName = `${tools.appNameLowerCase}.${adapter}`;\n\n            try {\n                if (!semver.diff(installedVersion, targetVersion)) {\n                    console.log(`Uninstall npm packet \"${npmPacketName}\" for a clean re-installation`);\n                    await tools.uninstallNodeModule(npmPacketName, { debug: process.argv.includes('--debug') });\n                }\n            } catch (e) {\n                console.warn(`Could not uninstall npm packet \"${npmPacketName}\": ${e.message}`);\n            }\n\n            // Get the adapter from website\n            const { packetName, stoppedList } = await this.install.downloadPacket(\n                sources,\n                `${adapter}@${targetVersion}`,\n            );\n            await finishUpgrade(packetName);\n            await this.install.enableInstances(stoppedList, true);\n        } else if (repoAdapter.meta) {\n            // Read repository from url or file\n            const ioPack = (await tools.getJsonAsync(repoAdapter.meta)) as ioBroker.AdapterObject;\n            if (!ioPack) {\n                console.error(`Cannot parse file${repoAdapter.meta}`);\n                return;\n            }\n\n            if (!forceDowngrade) {\n                try {\n                    // @ts-expect-error https://github.com/ioBroker/adapter-core/issues/455\n                    await this._checkDependencies(ioPack.common.dependencies, ioPack.common.globalDependencies);\n                } catch (e) {\n                    console.error(`Cannot check dependencies: ${e.message}`);\n                    return;\n                }\n            }\n\n            if (\n                !version &&\n                (ioPack.common.version === installedVersion ||\n                    (!forceDowngrade && tools.upToDate(ioPack.common.version, installedVersion)))\n            ) {\n                console.log(\n                    `Adapter \"${adapter}\"${\n                        adapter.length < 15 ? new Array(15 - adapter.length).join(' ') : ''\n                    } is up to date.`,\n                );\n            } else {\n                // Get the adapter from website\n                const targetVersion = version || ioPack.common.version;\n\n                const isIgnored = await isVersionIgnored({\n                    adapterName: adapter,\n                    version: targetVersion,\n                    objects: this.objects,\n                });\n\n                if (isIgnored) {\n                    console.log(\n                        `No upgrade of \"${adapter}\" desired, because version \"${targetVersion}\" is configured to be ignored by the user. Run \"${tools.appNameLowerCase} version ${adapter} --recognize\" to allow this upgrade!`,\n                    );\n                    return;\n                }\n\n                try {\n                    if (!showUpgradeDialog(installedVersion, targetVersion, adapter)) {\n                        console.log(`No upgrade of \"${adapter}\" desired.`);\n                        return;\n                    }\n                } catch (e) {\n                    console.log(`Can not check version information to display upgrade infos: ${e.message}`);\n                }\n                console.log(`Update ${adapter} from @${installedVersion} to @${targetVersion}`);\n                const { packetName, stoppedList } = await this.install.downloadPacket(\n                    sources,\n                    `${adapter}@${targetVersion}`,\n                );\n                await finishUpgrade(packetName, ioPack);\n                await this.install.enableInstances(stoppedList, true);\n            }\n        } else if (forceDowngrade) {\n            try {\n                if (!showUpgradeDialog(installedVersion, version, adapter)) {\n                    return console.log(`No upgrade of \"${adapter}\" desired.`);\n                }\n            } catch (e) {\n                console.log(`Can not check version information to display upgrade infos: ${e.message}`);\n            }\n            console.warn(`Unable to get version for \"${adapter}\". Update anyway.`);\n            console.log(`Update ${adapter} from @${installedVersion} to @${version}`);\n            // Get the adapter from website\n            const { packetName, stoppedList } = await this.install.downloadPacket(sources, `${adapter}@${version}`);\n            await finishUpgrade(packetName);\n            await this.install.enableInstances(stoppedList, true);\n        } else {\n            return console.error(`Unable to get version for \"${adapter}\".`);\n        }\n    }\n\n    /**\n     * Upgrade the js-controller\n     *\n     * @param repoUrl the repo or url\n     * @param forceDowngrade if downgrades are allowed\n     * @param controllerRunning if controller is currently running\n     */\n    async upgradeController(repoUrl: string, forceDowngrade: boolean, controllerRunning: boolean): Promise<void> {\n        let sources: Record<string, any>;\n\n        try {\n            const result = await getRepository({ repoName: repoUrl, objects: this.objects });\n            if (!result) {\n                return console.warn(`Cannot get repository under \"${repoUrl}\"`);\n            }\n            sources = result;\n        } catch (e) {\n            console.error(e.message);\n            return this.processExit(e instanceof IoBrokerError ? e.code : e);\n        }\n\n        const installed = fs.readJSONSync(`${tools.getControllerDir()}/io-package.json`);\n        if (!installed || !installed.common || !installed.common.version) {\n            return console.error(\n                `Host \"${this.hostname}\"${\n                    this.hostname.length < 15 ? ''.padStart(15 - this.hostname.length) : ''\n                } is not installed.`,\n            );\n        }\n\n        const controllerName = installed.common.name;\n        /** Repository entry of the controller */\n        const repoController = sources[controllerName];\n\n        if (!repoController) {\n            // no info for controller\n            return console.error(`Cannot find this controller \"${controllerName}\" in repository.`);\n        }\n\n        if (repoController.version) {\n            if (\n                !forceDowngrade &&\n                (repoController.version === installed.common.version ||\n                    tools.upToDate(repoController.version, installed.common.version))\n            ) {\n                console.log(\n                    `Host    \"${this.hostname}\"${\n                        this.hostname.length < 15 ? new Array(15 - this.hostname.length).join(' ') : ''\n                    } is up to date.`,\n                );\n            } else if (controllerRunning) {\n                console.warn(`Controller is running. Please stop ioBroker first.`);\n            } else {\n                console.log(`Update ${controllerName} from @${installed.common.version} to @${repoController.version}`);\n                // Get the controller from website\n                await this.install.downloadPacket(sources, `${controllerName}@${repoController.version}`, {\n                    stopDb: true,\n                });\n            }\n        } else {\n            const ioPack = await tools.getJsonAsync(repoController.meta);\n            if ((!ioPack || !ioPack.common) && !forceDowngrade) {\n                return console.warn(\n                    `Cannot read version. Write \"${tools.appName} upgrade self --force\" to upgrade controller anyway.`,\n                );\n            }\n            let version = ioPack?.common ? ioPack.common.version : '';\n            if (version) {\n                version = `@${version}`;\n            }\n\n            if (\n                (ioPack?.common && ioPack.common.version === installed.common.version) ||\n                (!forceDowngrade && ioPack?.common && tools.upToDate(ioPack.common.version, installed.common.version))\n            ) {\n                console.log(\n                    `Host    \"${this.hostname}\"${\n                        this.hostname.length < 15 ? new Array(15 - this.hostname.length).join(' ') : ''\n                    } is up to date.`,\n                );\n            } else if (controllerRunning) {\n                console.warn(`Controller is running. Please stop ioBroker first.`);\n            } else {\n                const name = ioPack?.common?.name || controllerName;\n                console.log(`Update ${name} from @${installed.common.version} to ${version}`);\n                // Get the controller from website\n                await this.install.downloadPacket(sources, name + version, { stopDb: true });\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["Debug", "fs", "path", "semver", "adapterDir", "installedVersion", "tty", "version", "rl"]
}
