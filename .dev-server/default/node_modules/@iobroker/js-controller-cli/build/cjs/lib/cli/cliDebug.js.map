{
  "version": 3,
  "sources": ["../../../../src/lib/cli/cliDebug.ts"],
  "sourcesContent": ["import * as CLI from './messages.js';\nimport { CLICommand, type CLICommandOptions } from './cliCommand.js';\nimport * as CLITools from './cliTools.js';\nimport { tools, EXIT_CODES } from '@iobroker/js-controller-common';\nimport { fork } from 'node:child_process';\n\n/** Command ioBroker debug ... */\nexport class CLIDebug extends CLICommand {\n    constructor(options: CLICommandOptions) {\n        super(options);\n    }\n\n    /**\n     * Checks if the adapter instance is running\n     *\n     * @param adapter adapter name\n     * @param instance instance id\n     */\n    private _isInstanceRunning(adapter: string, instance: string): Promise<boolean> {\n        const { dbConnect } = this.options;\n        return new Promise(resolve => {\n            dbConnect(async ({ states }) => {\n                try {\n                    const state = await states.getStateAsync(`system.adapter.${adapter}.${instance}.alive`);\n                    if (state?.val) {\n                        resolve(true);\n                        return;\n                    }\n                } catch {\n                    // ignore\n                }\n                resolve(false);\n            });\n        });\n    }\n\n    /**\n     * Executes a command\n     *\n     * @param args\n     */\n    async execute(args: any[]): Promise<void> {\n        const { callback, ...params } = this.options;\n        const adapter = args[0];\n        if (!adapter) {\n            CLI.error.requiredArgumentMissing('adaptername', 'debug <adaptername>');\n            return void callback(34);\n        }\n\n        const { name, instance } = CLITools.splitAdapterOrInstanceIdentifierWithVersion(adapter)!;\n\n        if (await this._isInstanceRunning(name, instance || '0')) {\n            CLI.error.instanceAlreadyRunning(`${name}.${instance || '0'}`);\n            return void callback(EXIT_CODES.ADAPTER_ALREADY_RUNNING);\n        }\n\n        const adapterDir = tools.getAdapterDir(adapter);\n        if (!adapterDir) {\n            CLI.error.adapterDirNotFound(adapter);\n            return void callback(34);\n        }\n\n        let mainFile;\n        try {\n            mainFile = await tools.resolveAdapterMainFile(adapter);\n        } catch {\n            CLI.error.mainFileNotFound(adapter);\n            return callback(1);\n        }\n\n        // Start the adapter with force and console logs\n        const adapterArgs = [instance || '0', '--debug'];\n        // Tell node to attach a debugger\n        const nodeArgs = [\n            ...tools.getDefaultNodeArgs(mainFile),\n            // --inspect[-brk][=[ip]:[port]]\n            `--inspect${params.wait ? '-brk' : ''}${!!params.ip || !!params.port ? '=' : ''}${params.ip || ''}${\n                !!params.ip && !!params.port ? ':' : ''\n            }${params.port || ''}`,\n        ];\n        // And wait until the sub process has finished\n        const cp = fork(mainFile, adapterArgs, {\n            cwd: adapterDir,\n            execArgv: nodeArgs,\n        });\n        cp.on('exit', code => callback(code || 0));\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA,UAAqB;AACrB,wBAAmD;AACnD,eAA0B;AAC1B,kCAAkC;AAClC,gCAAqB;AAGf,MAAO,iBAAiB,6BAAU;EACpC,YAAY,SAA0B;AAClC,UAAM,OAAO;EACjB;;;;;;;EAQQ,mBAAmB,SAAiB,UAAgB;AACxD,UAAM,EAAE,UAAS,IAAK,KAAK;AAC3B,WAAO,IAAI,QAAQ,aAAU;AACzB,gBAAU,OAAO,EAAE,OAAM,MAAM;AAC3B,YAAI;AACA,gBAAM,QAAQ,MAAM,OAAO,cAAc,kBAAkB,OAAO,IAAI,QAAQ,QAAQ;AACtF,cAAI,OAAO,KAAK;AACZ,oBAAQ,IAAI;AACZ;UACJ;QACJ,QAAQ;QAER;AACA,gBAAQ,KAAK;MACjB,CAAC;IACL,CAAC;EACL;;;;;;EAOA,MAAM,QAAQ,MAAW;AACrB,UAAM,EAAE,UAAU,GAAG,OAAM,IAAK,KAAK;AACrC,UAAM,UAAU,KAAK,CAAC;AACtB,QAAI,CAAC,SAAS;AACV,UAAI,MAAM,wBAAwB,eAAe,qBAAqB;AACtE,aAAO,KAAK,SAAS,EAAE;IAC3B;AAEA,UAAM,EAAE,MAAM,SAAQ,IAAK,SAAS,4CAA4C,OAAO;AAEvF,QAAI,MAAM,KAAK,mBAAmB,MAAM,YAAY,GAAG,GAAG;AACtD,UAAI,MAAM,uBAAuB,GAAG,IAAI,IAAI,YAAY,GAAG,EAAE;AAC7D,aAAO,KAAK,SAAS,uCAAW,uBAAuB;IAC3D;AAEA,UAAM,aAAa,kCAAM,cAAc,OAAO;AAC9C,QAAI,CAAC,YAAY;AACb,UAAI,MAAM,mBAAmB,OAAO;AACpC,aAAO,KAAK,SAAS,EAAE;IAC3B;AAEA,QAAI;AACJ,QAAI;AACA,iBAAW,MAAM,kCAAM,uBAAuB,OAAO;IACzD,QAAQ;AACJ,UAAI,MAAM,iBAAiB,OAAO;AAClC,aAAO,SAAS,CAAC;IACrB;AAGA,UAAM,cAAc,CAAC,YAAY,KAAK,SAAS;AAE/C,UAAM,WAAW;MACb,GAAG,kCAAM,mBAAmB,QAAQ;;MAEpC,YAAY,OAAO,OAAO,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,MAAM,CAAC,CAAC,OAAO,OAAO,MAAM,EAAE,GAAG,OAAO,MAAM,EAAE,GAC7F,CAAC,CAAC,OAAO,MAAM,CAAC,CAAC,OAAO,OAAO,MAAM,EACzC,GAAG,OAAO,QAAQ,EAAE;;AAGxB,UAAM,SAAK,gCAAK,UAAU,aAAa;MACnC,KAAK;MACL,UAAU;KACb;AACD,OAAG,GAAG,QAAQ,UAAQ,SAAS,QAAQ,CAAC,CAAC;EAC7C;;",
  "names": []
}
