"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var setupVisDebug_exports = {};
__export(setupVisDebug_exports, {
  VisDebug: () => VisDebug
});
module.exports = __toCommonJS(setupVisDebug_exports);
var import_fs_extra = __toESM(require("fs-extra"), 1);
var import_js_controller_common = require("@iobroker/js-controller-common");
var import_node_path = __toESM(require("node:path"), 1);
var import_js_controller_common2 = require("@iobroker/js-controller-common");
class VisDebug {
  objects;
  processExit;
  constructor(options) {
    this.objects = options.objects;
    this.processExit = options.processExit;
  }
  /**
   * Upload widget directory to vis directory
   *
   * @param widgetDir directory of widgets
   * @param adapter name of the adapter
   * @param pathW widgets path
   */
  async uploadWidgets(widgetDir, adapter, pathW) {
    if (!import_fs_extra.default.existsSync(widgetDir)) {
      console.error(`Cannot upload widgets, because folder "${widgetDir}" does not exist`);
      return;
    }
    const dirs = import_fs_extra.default.readdirSync(widgetDir);
    for (const dir of dirs) {
      const stat = import_fs_extra.default.statSync(`${widgetDir}/${dir}`);
      if (stat.isDirectory()) {
        await this.uploadWidgets(`${widgetDir}/${dir}`, adapter, `${pathW}/${dir}`);
      } else {
        console.log(`Upload "${widgetDir}/${dir}"`);
        await this.objects.writeFile(adapter, `${pathW}/${dir}`, import_fs_extra.default.readFileSync(`${widgetDir}/${dir}`));
      }
    }
  }
  /**
   * Activates vis debug for given widget
   *
   * @param widgetset widget to activate vis debug for
   */
  async enableDebug(widgetset) {
    let adapterDir;
    if (widgetset) {
      const adapterNames2Try = [`vis-${widgetset}`, widgetset];
      if (adapterNames2Try[0] === adapterNames2Try[1]) {
        adapterNames2Try.splice(1, 1);
      }
      for (const adapterName of adapterNames2Try) {
        try {
          const adapterDir2Try = import_js_controller_common.tools.getAdapterDir(adapterName);
          const stats = import_fs_extra.default.statSync(adapterDir2Try);
          if (stats.isDirectory()) {
            adapterDir = adapterDir2Try;
            break;
          }
        } catch {
        }
      }
      if (!adapterDir) {
        console.error(`Adapter not found. Tried: ${adapterNames2Try.join(", ")}`);
        return void this.processExit(import_js_controller_common2.EXIT_CODES.MISSING_ADAPTER_FILES);
      }
    }
    const controllerDir = import_js_controller_common.tools.getControllerDir();
    let visDir = `${controllerDir}/node_modules/${import_js_controller_common.tools.appName.toLowerCase()}.vis`;
    if (!import_fs_extra.default.existsSync(visDir)) {
      visDir = `${controllerDir}/node_modules/${import_js_controller_common.tools.appName.toLowerCase()}.vis`;
      if (!import_fs_extra.default.existsSync(visDir)) {
        visDir = `${controllerDir}/../${import_js_controller_common.tools.appName.toLowerCase()}.vis`;
        if (!import_fs_extra.default.existsSync(visDir)) {
          visDir = `${controllerDir}/../${import_js_controller_common.tools.appName.toLowerCase()}.vis`;
          if (!import_fs_extra.default.existsSync(visDir)) {
            console.error(`Cannot find ${import_js_controller_common.tools.appName.toLowerCase()}.vis`);
            return void this.processExit(import_js_controller_common2.EXIT_CODES.MISSING_ADAPTER_FILES);
          }
        }
      }
    }
    if (import_fs_extra.default.existsSync(`${visDir}/www/index.html.original`)) {
      console.log(`Upload "${import_node_path.default.normalize(`${visDir}/www/index.html.original`)}"`);
      const file2 = import_fs_extra.default.readFileSync(`${visDir}/www/index.html.original`, "utf8");
      try {
        await this.objects.writeFile("vis", "index.html", file2);
      } catch (e) {
        console.error(`Cannot save ${visDir}/vis/index.html: ${e.message}`);
      }
    }
    if (import_fs_extra.default.existsSync(`${visDir}/www/edit.html.original`)) {
      console.log(`Upload "${import_node_path.default.normalize(`${visDir}/www/edit.html.original`)}"`);
      const file2 = import_fs_extra.default.readFileSync(`${visDir}/www/edit.html.original`, "utf8");
      try {
        await this.objects.writeFile("vis", "edit.html", file2);
      } catch (e) {
        console.error(`Cannot save ${visDir}/vis/index.html: ${e.message}`);
      }
    }
    if (import_fs_extra.default.existsSync(`${visDir}/www/cache.manifest`)) {
      console.log(`Modify "${import_node_path.default.normalize(`${visDir}/www/cache.manifest`)}"`);
      let file2 = import_fs_extra.default.readFileSync(`${visDir}/www/cache.manifest`, "utf-8");
      if (!file2.toString().trim()) {
        const version = import_fs_extra.default.readJSONSync(`${visDir}/package.json`).version;
        file2 = `CACHE MANIFEST
#
# vis Version ${version}
# dev build 2



NETWORK:
    *


CACHE:
    ./img/disconnect.png

FALLBACK:
    ./index.html ./offline.html
    ./edit.html ./offline.html
`;
      }
      const n = file2.match(/# dev build (\d+)/)[1];
      file2 = file2.replace(`# dev build ${n}`, `# dev build ${parseInt(n, 10) + 1}`);
      import_fs_extra.default.writeFileSync(`${visDir}/www/cache.manifest`, file2);
      try {
        await this.objects.writeFile("vis", "cache.manifest", file2);
      } catch (e) {
        console.error(`Cannot save ${visDir}/www/cache.manifest: ${e.message}`);
      }
    }
    const file = import_fs_extra.default.readJSONSync(import_js_controller_common.tools.getConfigFileName(), "utf8");
    if (!file.objects.noFileCache) {
      file.objects.noFileCache = true;
      import_fs_extra.default.writeFileSync(import_js_controller_common.tools.getConfigFileName(), JSON.stringify(file, null, 2));
      await this.objects.enableFileCacheAsync(false);
      console.log('Disable cache. ioBroker restart required! Execute "iobroker restart"');
    }
    if (widgetset) {
      const { file: file2 } = await this.objects.readFile("vis", "js/config.js", null);
      let content = typeof file2 === "string" ? file2 : file2.toString();
      content = content.replace(/[\r\n]/g, "");
      const json = JSON.parse(content.match(/"widgetSets":\s(.*)};/)[1]);
      let found = false;
      for (const widget of Object.values(json)) {
        if (widget === widgetset || widget.name === widgetset) {
          found = true;
          break;
        }
      }
      if (!found) {
        console.log("Modify config.js");
        const pckg = import_fs_extra.default.readJSONSync(`${adapterDir}/io-package.json`);
        if (pckg.native && pckg.native.dependencies && pckg.native.dependencies.length) {
          json.push({
            name: widgetset,
            depends: pckg.native.dependencies
          });
        } else {
          json.push(widgetset);
        }
        content = content.replace(/"widgetSets":\s+.*};/, `"widgetSets": ${JSON.stringify(json, null, 2)}};`);
        await this.objects.writeFile("vis", "js/config.js", content);
        console.log(`Upload ${adapterDir}/widgets`);
        await this.uploadWidgets(`${adapterDir}/widgets`, "vis", "widgets");
      } else {
        console.log(`Upload "${adapterDir}/widgets"`);
        await this.uploadWidgets(`${adapterDir}/widgets`, "vis", "widgets");
      }
    }
    this.processExit(import_js_controller_common2.EXIT_CODES.NO_ERROR);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  VisDebug
});
//# sourceMappingURL=setupVisDebug.js.map
