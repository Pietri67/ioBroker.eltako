"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cliHost_exports = {};
__export(cliHost_exports, {
  CLIHost: () => CLIHost
});
module.exports = __toCommonJS(cliHost_exports);
var CLI = __toESM(require("./messages.js"), 1);
var import_cliCommand = require("./cliCommand.js");
var import_cliTools = require("./cliTools.js");
var import_js_controller_common = require("@iobroker/js-controller-common");
var import_node_os = __toESM(require("node:os"), 1);
var import_fs_extra = __toESM(require("fs-extra"), 1);
class CLIHost extends import_cliCommand.CLICommand {
  constructor(options) {
    super(options);
  }
  /**
   * Executes a command
   *
   * @param args
   */
  execute(args) {
    const command = args[0];
    switch (command) {
      case "this":
      case "self":
        return this.self(args);
      case "set":
        return this.set(args);
      case "remove":
        return this.remove(args);
      default:
        return this.rename(args);
    }
  }
  /**
   * When in single-host mode, changes the hostname of the host and all instances to the current one
   *
   * @param _args
   */
  self(_args) {
    this.renameHost(void 0, import_node_os.default.hostname());
  }
  /**
   * Changes the current host's hostname to the given one
   *
   * @param args
   */
  set(args) {
    const { callback } = this.options;
    const newHostname = args[1];
    if (!newHostname) {
      CLI.error.requiredArgumentMissing("newHostname", "host set newHostname");
      return void callback(34);
    }
    this.renameHost(import_js_controller_common.tools.getHostName(), newHostname);
  }
  /**
   * Removes the host with the given name
   *
   * @param args
   */
  remove(args) {
    const { callback, dbConnect } = this.options;
    const hostname = args[1];
    if (!hostname) {
      CLI.error.requiredArgumentMissing("hostname", "host remove hostname");
      return void callback(34);
    }
    const newHostname = import_js_controller_common.tools.getHostName();
    if (hostname === newHostname) {
      CLI.error.dontRemoveCurrentHost(hostname);
      return void callback(35);
    }
    dbConnect(async (params) => {
      const { objects, isOffline } = params;
      try {
        if (!isOffline) {
          CLI.error.cannotChangeRunningSystem();
          return void callback(import_js_controller_common.EXIT_CODES.CONTROLLER_RUNNING);
        }
        const hosts = await (0, import_cliTools.enumHosts)(objects);
        const hostToDelete = hosts.find((host) => host?.common.hostname === hostname);
        if (!hostToDelete) {
          CLI.error.hostDoesNotExist(hostname);
          return void callback(30);
        }
        try {
          await objects.delObjectAsync(hostToDelete._id);
        } catch (err) {
          CLI.error.cannotDeleteObject(hostToDelete._id, err.message);
          return void callback(30);
        }
        const hostStates = await (0, import_cliTools.enumObjects)(objects, "state", `system.host.${hostname}.`);
        for (const state of hostStates) {
          try {
            await objects.delObjectAsync(state._id);
            CLI.success.stateDeleted(state._id);
          } catch (err) {
            CLI.error.cannotDeleteObject(state._id, err.message);
          }
        }
        const instances = await (0, import_cliTools.enumInstances)(objects);
        const instancesToRename = instances.filter((i) => i?.common.host === hostname);
        for (const instance of instancesToRename) {
          await changeInstanceHost(objects, instance, newHostname);
        }
        CLI.success.hostDeleted(hostname);
        return void callback(import_js_controller_common.EXIT_CODES.NO_ERROR);
      } catch (err) {
        CLI.error.unknown(err.message);
        return void callback(1);
      }
    });
  }
  /**
   * Renames the host with the given name to the current one (opposite of `set()`)
   *
   * @param args
   */
  rename(args) {
    const { callback } = this.options;
    const oldHostname = args[0];
    if (!oldHostname) {
      CLI.error.requiredArgumentMissing("oldHostname", "host oldHostname");
      return void callback(34);
    }
    this.renameHost(oldHostname, import_node_os.default.hostname());
  }
  /**
   * Renames the host with the hostname `oldHostname` to the hostname `newHostname`
   *
   * @param oldHostname The hostname to rename from or `undefined` to rename all hosts (single-host mode only!)
   * @param newHostname The hostname to rename to
   */
  renameHost(oldHostname, newHostname) {
    const { callback, dbConnect, showHelp } = this.options;
    dbConnect(async (params) => {
      const { isOffline, objects } = params;
      try {
        if (!isOffline) {
          CLI.error.cannotChangeRunningSystem();
          return void callback(import_js_controller_common.EXIT_CODES.CONTROLLER_RUNNING);
        }
        const hosts = await (0, import_cliTools.enumHosts)(objects);
        if (hosts.length > 1 && oldHostname === void 0) {
          CLI.error.noHostThisInMultihost();
          showHelp();
          return void callback(30);
        }
        const hostExists = !!hosts.find((obj) => obj?.common.hostname === newHostname);
        if (hostExists) {
          const instances2 = await (0, import_cliTools.enumInstances)(objects);
          const hasExistingInstances = !!instances2.find((instance) => instance?.common.host === newHostname);
          if (hasExistingInstances) {
            CLI.error.hostAlreadyExists(newHostname);
            return void callback(import_js_controller_common.EXIT_CODES.INSTANCE_ALREADY_EXISTS);
          }
        }
        const configFileName = import_js_controller_common.tools.getConfigFileName();
        const configData = import_fs_extra.default.readJSONSync(configFileName);
        if (configData.system && configData.system.hostname !== newHostname) {
          configData.system.hostname = newHostname;
          import_fs_extra.default.writeFileSync(configFileName, JSON.stringify(configData, null, 2), "utf8");
        }
        for (const host of hosts) {
          const prevHostname = host.common.hostname;
          if (oldHostname && prevHostname !== oldHostname) {
            continue;
          }
          try {
            await objects.delObjectAsync(host._id);
          } catch (err) {
            CLI.error.cannotDeleteObject(host._id, err.message);
            continue;
          }
          Object.assign(host, {
            _id: `system.host.${newHostname}`,
            from: (0, import_cliTools.getObjectFrom)(),
            ts: Date.now()
          });
          Object.assign(host.common, {
            name: host._id,
            hostname: newHostname,
            address: [],
            cmd: "",
            native: { process: {}, os: {}, hardware: {} }
          });
          try {
            await objects.setObjectAsync(host._id, host);
          } catch (err) {
            CLI.error.cannotChangeObject(host._id, err.message);
            continue;
          }
          const hostStateObjects = await (0, import_cliTools.enumObjects)(objects, "state", `system.host.${prevHostname}.`);
          const hostFolders = await (0, import_cliTools.enumObjects)(objects, "folder", `system.host.${prevHostname}.`);
          for (const object of [...hostStateObjects, ...hostFolders]) {
            try {
              await objects.delObjectAsync(object._id);
            } catch (err) {
              CLI.error.cannotDeleteObject(object._id, err.message);
              continue;
            }
            Object.assign(object, {
              _id: object._id.replace(`system.host.${prevHostname}`, `system.host.${newHostname}`),
              from: (0, import_cliTools.getObjectFrom)(),
              ts: Date.now()
            });
            try {
              await objects.setObjectAsync(object._id, object);
            } catch (err) {
              CLI.error.cannotChangeObject(object._id, err.message);
            }
          }
          CLI.success.hostRenamed(prevHostname, newHostname);
        }
        const instances = await (0, import_cliTools.enumInstances)(objects);
        const instancesToRename = oldHostname === void 0 ? instances : instances.filter((i) => i.common.host === oldHostname);
        if (instancesToRename.length > 0) {
          for (const instance of instancesToRename) {
            await changeInstanceHost(objects, instance, newHostname);
          }
        } else {
          CLI.warn.noInstancesFoundOnHost(oldHostname);
        }
        return void callback(import_js_controller_common.EXIT_CODES.NO_ERROR);
      } catch (err) {
        CLI.error.unknown(err.message);
        return void callback(1);
      }
    });
  }
}
async function changeInstanceHost(objects, instance, newHostname) {
  const oldInstanceHost = instance.common.host;
  instance.from = (0, import_cliTools.getObjectFrom)();
  instance.ts = Date.now();
  instance.common.host = newHostname;
  try {
    await objects.setObjectAsync(instance._id, instance);
    CLI.success.instanceHostChanged(instance._id, oldInstanceHost, newHostname);
  } catch (e) {
    CLI.error.cannotChangeObject(instance._id, e.message);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CLIHost
});
//# sourceMappingURL=cliHost.js.map
