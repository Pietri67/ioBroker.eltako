{
  "version": 3,
  "sources": ["../../../../src/lib/cli/messages.ts"],
  "sourcesContent": ["import { tools } from '@iobroker/js-controller-common';\n\nconst errorMessages = Object.freeze({\n    stateNotFound: (stateID: string, error?: string) =>\n        `The state ${stateID} was not found!${error ? ` Reason: ${error}` : ''}`,\n    stateNotBinary: (stateId: string) => `State \"${stateId}\" is not binary.`,\n    stateBinaryGetUnsupported: (stateId: string) => `State \"${stateId}\" is a binary state, please use getBinary.`,\n    stateBinarySetUnsupported: (stateId: string) => `State \"${stateId}\" is a binary state and cannot be set via cli.`,\n    objectNotFound: (objectID: string, error?: string) =>\n        `The object ${objectID} was not found!${error ? ` Reason: ${error}` : ''}`,\n    cannotUpdateObject: (objectID: string, error?: string) =>\n        `The object ${objectID} could not be updated!${error ? ` Reason: ${error}` : ''}`,\n    cannotDeleteObject: (objectID: string, error?: string) =>\n        `The object ${objectID} cannot be deleted!${error ? ` Reason: ${error}` : ''}`,\n    cannotDeleteObjectFromEnums: (objectID: string, error?: string) =>\n        `The object ${objectID} could not be deleted from enums!${error ? ` Reason: ${error}` : ''}`,\n    cannotChangeObject: (objectID: string, error?: string) =>\n        `The object ${objectID} cannot be changed!${error ? ` Reason: ${error}` : ''}`,\n    objectPropertyNotFound: (objectID: string, propPath: string) =>\n        `The requested property \"${propPath}\" or one of its parents was not found in the object \"${objectID}\"!`,\n    invalidPropertyOrValue: () => `The property path or value is not valid. Please make sure the value is valid JSON.`,\n    invalidJSONValue: () => `The given value is not valid JSON.`,\n\n    unknownCommand: (prefix: string, command: string) => `Unknown command \"${prefix} ${command}\"!`,\n    requiredArgumentMissing: (argName: string, exampleCommand?: string) =>\n        `The required argument \"${argName}\" is missing!${exampleCommand ? ` Example: \"${exampleCommand}\"` : ''}`,\n\n    noInstancesFound: (adapter: string) => `Cannot find any instances of \"${adapter}\"!`,\n    invalidInstance: (instance: string) => `The instance \"${instance}\" does not exist!`,\n    specifyInstance: (adapter: string, adapterInstances: string[]) =>\n        `The adapter \"${adapter}\" has multiple instances! Please specify which one should be started: \"${adapterInstances.join(\n            '\", \"',\n        )}\".`,\n    adapterDirNotFound: (adapter: string) => `Cannot find the installation dir for adapter \"${adapter}\"!`,\n    mainFileNotFound: (adapter: string) => `Cannot find the main file for adapter \"${adapter}\"!`,\n    cannotLoadIoPackage: (adapter: string) => `Cannot load the io-package.json file for adapter \"${adapter}\"!`,\n\n    wrongCommandPrefix: (wrongPrefix: string, command: string, correctPrefix?: string) =>\n        `The command ${command} is not intended to be used with ${wrongPrefix}!${\n            correctPrefix ? ` Please use \"${correctPrefix} ${command}\" instead.` : ''\n        }`,\n    unknown: (err: string) => `An unknown error occurred: ${err}`,\n\n    cannotChangeRunningSystem: () => `Cannot execute changes on running system. Stop ${tools.appName} first.`,\n    noHostThisInMultihost: () => `Cannot use this command in multihost!`,\n    hostAlreadyExists: (hostname: string) => `A host with the name \"${hostname}\" already exists!`,\n    hostDoesNotExist: (hostname: string) => `The host \"${hostname}\" does not exist!`,\n    dontRemoveCurrentHost: (hostname: string) => `Cannot remove host \"${hostname}\" from itself!`,\n\n    pluginNotDefined: (pluginName: string, host: string, instance: string) =>\n        `The plugin \"${pluginName}\" does not exist for ${host ? `host \"${host}\"` : `instance \"${instance}\"`}!`,\n\n    cert: (certName: string) => `Certificate \"${certName}\" not found or error parsing certificate information.`,\n    instanceAlreadyRunning: (instance: string) =>\n        `The instance \"${instance}\" is already running, please stop instance first.`,\n});\n\nconst successMessages = Object.freeze({\n    objectUpdated: (objectID: string) => `The object \"${objectID}\" was updated successfully.`,\n    objectDeleted: (objectID: string) => `The object \"${objectID}\" was deleted.`,\n    stateUpdated: (stateID: string, value: any, ack?: boolean) =>\n        `The state \"${stateID}\" was set to \"${value}\"${ack === undefined ? '' : ` with flag ack=${ack}`}`,\n    stateDeleted: (stateID: string) => `The state \"${stateID}\" was deleted.`,\n    adapterStarted: (adapter: string) => `The adapter \"${adapter}\" was started.`,\n    adapterStopped: (adapter: string) => `The adapter \"${adapter}\" was stopped.`,\n    adapterRestarted: (adapter: string) => `The adapter \"${adapter}\" was restarted.`,\n    systemStatus: (isRunning: boolean) =>\n        isRunning ? `At least one ${tools.appName} host is running.` : `No ${tools.appName} host is running.`,\n    controllerStatus: (isRunning: boolean) => `${tools.appName} is ${isRunning ? '' : 'not '}running on this host.`,\n    messageSent: (adapter: string, command: string, message: string) =>\n        `The command \"${command}\" was sent to \"${adapter}\" with the message \"${message}\".`,\n    hostRenamed: (from: string, to: string) => `Host \"${from}\" successfully renamed to \"${to}\".`,\n    instanceHostChanged: (instance: string, from: string, to: string) =>\n        `The host for instance \"${instance}\" was changed from \"${from}\" to \"${to}\".`,\n    hostDeleted: (hostname: string) => `The host \"${hostname}\" was deleted.`,\n\n    pluginEnabledOrDisabled: (pluginName: string, host: string, instance: string, status: boolean) =>\n        `The plugin \"${pluginName}\" was successfully ${status ? 'enabled' : 'disabled'} for ${\n            host ? `host \"${host}\"` : `instance \"${instance}\"`\n        }.`,\n    pluginStatus: (pluginName: string, host: string, instance: string, status: boolean) =>\n        `The plugin \"${pluginName}\" is ${status ? 'enabled' : 'disabled'} for ${\n            host ? `host \"${host}\"` : `instance \"${instance}\"`\n        }.`,\n});\n\nconst warnings = Object.freeze({\n    noInstancesFoundOnHost: (hostname?: string) =>\n        hostname ? `No instances found for host \"${hostname}\"!` : `No instances found!`,\n});\n\n// Capsule success messages in console.log\n/** Prints predefined success messages on the CLI */\nexport const success = {} as typeof successMessages;\nfor (const method of Object.keys(successMessages)) {\n    // @ts-expect-error we are only using keys of sucessMessages so method is keyof\n    success[method] = (...args: string[]) => console.log(successMessages[method](...args));\n}\n// warnings in console.warning\nexport const warn = {} as typeof warnings;\nfor (const method of Object.keys(warnings)) {\n    // @ts-expect-error we are only using keys of sucessMessages so method is keyof\n    warn[method] = (...args) => console.log(warnings[method](...args));\n}\n\n// error messages in console.error\n/** Prints predefined error messages on the CLI */\nexport const error = {} as typeof errorMessages;\nfor (const method of Object.keys(errorMessages)) {\n    // @ts-expect-error we are only using keys of sucessMessages so method is keyof\n    error[method] = (...args) => console.error(errorMessages[method](...args));\n}\n"],
  "mappings": "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",
  "names": ["error"]
}
