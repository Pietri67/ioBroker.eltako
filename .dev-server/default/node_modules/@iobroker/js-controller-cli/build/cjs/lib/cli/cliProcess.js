"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cliProcess_exports = {};
__export(cliProcess_exports, {
  CLIProcess: () => CLIProcess
});
module.exports = __toCommonJS(cliProcess_exports);
var import_fs_extra = __toESM(require("fs-extra"), 1);
var import_node_path = __toESM(require("node:path"), 1);
var import_node_os = __toESM(require("node:os"), 1);
var import_node_child_process = require("node:child_process");
var import_deep_clone = __toESM(require("deep-clone"), 1);
var import_promises = require("node:timers/promises");
var import_js_controller_common = require("@iobroker/js-controller-common");
var import_js_controller_common2 = require("@iobroker/js-controller-common");
var CLI = __toESM(require("../../lib/cli/messages.js"), 1);
var import_cliCommand = require("../../lib/cli/cliCommand.js");
var import_cliTools = require("../../lib/cli/cliTools.js");
const TRY_KILL_WAIT_MS = 5e3;
const rootDir = import_js_controller_common2.tools.getControllerDir();
const killAllScriptPath = import_node_path.default.join(rootDir, "killall.sh");
class CLIProcess extends import_cliCommand.CLICommand {
  constructor(options) {
    super(options);
  }
  // These CLI commands have no subcommands, but belong together thematically
  // (start/stop/restart/status)
  /**
   * Starts one or more adapters or the js-controller
   *
   * @param args parsed cli arguments
   */
  async start(args) {
    const adapterName = (0, import_cliTools.normalizeAdapterName)(args[0]);
    if (!adapterName) {
      await this.startJSController();
      this.options.callback();
    } else if (adapterName === "all") {
      this.setAllAdaptersEnabled(true);
    } else if (/\.\d+$/.test(adapterName)) {
      this.setAdapterInstanceEnabled(adapterName, true);
    } else {
      this.setAdapterEnabled(adapterName, true);
    }
  }
  /**
   * Restarts one or more instances or the js-controller
   *
   * @param args parsed cli arguments
   */
  async restart(args) {
    const adapterName = (0, import_cliTools.normalizeAdapterName)(args[0]);
    if (!adapterName) {
      await this.restartJSController();
      this.options.callback();
    } else if (/\.\d+$/.test(adapterName)) {
      this.setAdapterInstanceEnabled(
        adapterName,
        true,
        /* restartIfRunning */
        true
      );
    } else {
      this.setAdapterEnabled(
        adapterName,
        true,
        /* restartIfRunning */
        true
      );
    }
  }
  /**
   * Stops one or more adapters or the js-controller
   *
   * @param args parsed cli arguments
   */
  async stop(args) {
    const adapterName = (0, import_cliTools.normalizeAdapterName)(args[0]);
    if (adapterName === void 0) {
      await CLIProcess.stopJSController();
      this.options.callback();
    } else if (adapterName === "all") {
      this.setAllAdaptersEnabled(false);
    } else if (/\.\d+$/.test(adapterName)) {
      this.setAdapterInstanceEnabled(adapterName, false);
    } else {
      this.setAdapterEnabled(adapterName, false);
    }
  }
  /**
   * Starts or stops all adapters
   *
   * @param enabled if adapters should be started or stopped
   */
  setAllAdaptersEnabled(enabled) {
    const { callback, dbConnect } = this.options;
    dbConnect(async (params) => {
      const { objects } = params;
      const instances = await (0, import_js_controller_common.getInstancesOrderedByStartPrio)(objects, console);
      const instancePromises = instances.filter((obj) => obj.common.enabled !== enabled).map((obj) => setInstanceEnabled(objects, obj, enabled));
      await Promise.all(instancePromises);
      callback();
    });
  }
  /**
   * Starts or stops a single or all instances of adapter.
   * If there are multiple instances, all will be started/stopped/restarted
   *
   * @param adapter The adapter to start
   * @param enabled If adapter should be started or stopped
   * @param [restartIfRunning] Whether running instances should be restarted
   */
  setAdapterEnabled(adapter, enabled, restartIfRunning) {
    const { callback, dbConnect } = this.options;
    dbConnect(async (params) => {
      const { objects } = params;
      try {
        const adapterInstances = await (0, import_cliTools.enumInstances)(objects, adapter);
        if (adapterInstances.length === 0) {
          CLI.error.noInstancesFound(adapter);
          return void callback(import_js_controller_common2.EXIT_CODES.UNKNOWN_ERROR);
        }
        for (const instance of adapterInstances) {
          await setInstanceEnabled(objects, instance, enabled, restartIfRunning);
        }
        return void callback();
      } catch (e) {
        CLI.error.unknown(e.message);
        return void callback(import_js_controller_common2.EXIT_CODES.UNKNOWN_ERROR);
      }
    });
  }
  /**
   * Starts or stops a specific adapter instance
   *
   * @param instance The instance to start, e.g. "adaptername.0"
   * @param enabled If the instance should be started or stopped
   * @param [restartIfRunning] Whether running instances should be restarted
   */
  setAdapterInstanceEnabled(instance, enabled, restartIfRunning) {
    const { callback, dbConnect } = this.options;
    dbConnect(async (params) => {
      const { objects } = params;
      const obj = await objects.getObject(`system.adapter.${instance}`);
      if (!obj || obj.type !== "instance") {
        CLI.error.invalidInstance(instance);
        return void callback();
      }
      try {
        await setInstanceEnabled(objects, obj, enabled, restartIfRunning);
        return void callback();
      } catch (e) {
        CLI.error.unknown(e.message);
        return void callback(import_js_controller_common2.EXIT_CODES.UNKNOWN_ERROR);
      }
    });
  }
  /**
   * Starts the JS controller
   */
  async startJSController() {
    let memoryLimitMB = 0;
    try {
      const config = import_fs_extra.default.readJSONSync(import_js_controller_common2.tools.getConfigFileName(), { encoding: "utf-8" });
      if (config?.system?.memoryLimitMB) {
        memoryLimitMB = Math.round(config.system.memoryLimitMB);
      }
    } catch {
      console.warn("Cannot read memoryLimitMB");
      console.warn(`May be config file does not exist.
Please call "${import_js_controller_common2.tools.appName} setup first" to initialize the settings.`);
    }
    let pid;
    try {
      pid = await import_js_controller_common2.tools.getControllerPid();
    } catch (e) {
      console.error(`Could not read pid file: ${e.message}`);
    }
    if (pid) {
      console.log(`Controller is already running with pid ${pid}`);
      return;
    }
    const args = [import_node_path.default.join(rootDir, "controller.js")];
    if (memoryLimitMB) {
      args.push(`--max-old-space-size=${memoryLimitMB}`);
    }
    const child = (0, import_node_child_process.spawn)(process.execPath, args, {
      env: process.env,
      detached: true,
      stdio: ["ignore", "ignore", "ignore", "ipc"],
      windowsHide: true,
      cwd: rootDir
    });
    child.unref();
  }
  /**
   * Stops the JS controller
   */
  static async stopJSController() {
    let pid;
    try {
      pid = await import_js_controller_common2.tools.getControllerPid();
    } catch (e) {
      console.error(`Could not read pid file: ${e.message}`);
    }
    if (!pid) {
      return;
    }
    await tryKill(pid);
    if (import_node_os.default.platform() !== "win32") {
      let data = "";
      if (import_fs_extra.default.existsSync(killAllScriptPath)) {
        import_fs_extra.default.chmodSync(killAllScriptPath, "777");
        const child = (0, import_node_child_process.spawn)(killAllScriptPath, [], { windowsHide: true });
        child.stdout.on("data", (_data) => data += _data.toString().replace(/\n/g, ""));
        child.stderr.on("data", (_data) => data += _data.toString().replace(/\n/g, ""));
        return new Promise((resolve) => {
          child.on("exit", (exitCode) => {
            console.log(`Exit code for "killall.sh": ${exitCode}`);
            resolve();
          });
        });
      }
      console.log('No "killall.sh" script found. Just stop.');
    }
    try {
      import_fs_extra.default.unlinkSync(import_js_controller_common2.tools.getPidsFileName());
    } catch {
    }
  }
  /** Restarts the JS controller */
  async restartJSController() {
    await CLIProcess.stopJSController();
    await this.startJSController();
  }
  /**
   * Checks if ioBroker is running or not
   *
   * @param args parsed cli arguments
   */
  status(args) {
    const { callback, dbConnect } = this.options;
    const adapterName = (0, import_cliTools.normalizeAdapterName)(args[0]);
    const showEntireConfig = adapterName === "all";
    dbConnect(async (params) => {
      const { objects, states, config, isOffline } = params;
      if (!adapterName || showEntireConfig) {
        const hostAlive = await states.getState(`system.host.${import_js_controller_common2.tools.getHostName()}.alive`);
        const alive = hostAlive ? hostAlive.val : false;
        CLI.success.controllerStatus(alive);
        console.log();
        const hasLocalStatesServer = await (0, import_js_controller_common.isLocalStatesDbServer)(config.states.type, config.states.host);
        const hasLocalObjectsServer = await (0, import_js_controller_common.isLocalObjectsDbServer)(config.objects.type, config.objects.host);
        if (!hasLocalStatesServer && !hasLocalObjectsServer) {
          CLI.success.systemStatus(!isOffline);
        }
        console.log();
        if (showEntireConfig) {
          await showAllInstancesStatus(states, objects);
          console.log();
          showConfig(config);
        } else {
          console.log(`Objects type: ${config.objects.type}`);
          console.log(`States  type: ${config.states.type}`);
        }
        return void callback(isOffline ? import_js_controller_common2.EXIT_CODES.CONTROLLER_NOT_RUNNING : void 0);
      }
      if (/\.\d+$/.test(adapterName)) {
        await showInstanceStatus(states, adapterName);
        return void callback();
      }
      const adapterInstances = await (0, import_cliTools.enumInstances)(objects, adapterName);
      if (adapterInstances.length > 1) {
        CLI.error.specifyInstance(adapterName, adapterInstances.map((obj) => obj._id.substring("system.adapter.".length)));
        return void callback(import_js_controller_common2.EXIT_CODES.INVALID_ADAPTER_ID);
      } else if (adapterInstances.length === 0) {
        CLI.error.noInstancesFound(adapterName);
        return void callback(import_js_controller_common2.EXIT_CODES.UNKNOWN_ERROR);
      }
      const instanceId = adapterInstances[0]._id.split(".").pop();
      await showInstanceStatus(states, `${adapterName}.${instanceId}`);
      return void callback();
    });
  }
}
async function showAllInstancesStatus(states, objects) {
  const allInstances = await (0, import_cliTools.enumInstances)(objects);
  for (const instance of allInstances) {
    const instanceId = instance._id.split(".").pop();
    await showInstanceStatus(states, `${instance.common.name}.${instanceId}`);
  }
  return Promise.resolve();
}
async function showInstanceStatus(states, adapterInstance) {
  const state = await states.getState(`system.adapter.${adapterInstance}.alive`);
  if (state?.val === true) {
    console.log(`Instance "${adapterInstance}" is running`);
  } else {
    console.log(`Instance "${adapterInstance}" is not running`);
  }
}
function showConfig(config, root) {
  if (!import_js_controller_common2.tools.isObject(config)) {
    return;
  }
  root = root || [];
  const prefix = root.join("/").toUpperCase();
  for (const attr of Object.keys(config)) {
    if (attr.match(/comment$/i)) {
      continue;
    }
    if (typeof config[attr] === "object") {
      const nextRoot = (0, import_deep_clone.default)(root);
      nextRoot.push(attr);
      showConfig(config[attr], nextRoot);
    } else {
      console.log(`${prefix}${(prefix ? "/" : "") + attr}: ${config[attr]}`);
    }
  }
}
async function setInstanceEnabled(objects, instanceObj, enabled, force) {
  if (!force && instanceObj.common.enabled === enabled) {
    return;
  }
  instanceObj.common.enabled = enabled;
  instanceObj.from = (0, import_cliTools.getObjectFrom)();
  instanceObj.ts = Date.now();
  await objects.setObject(instanceObj._id, instanceObj);
  const instanceName = (0, import_cliTools.getInstanceName)(instanceObj._id);
  if (enabled) {
    CLI.success.adapterStarted(instanceName);
  } else {
    CLI.success.adapterStopped(instanceName);
  }
}
async function tryKill(pid) {
  try {
    process.kill(pid, "SIGTERM");
  } catch (e) {
    console.warn(`Could not send "SIGTERM" to process ${pid}: ${e.message}`);
  }
  await (0, import_promises.setTimeout)(TRY_KILL_WAIT_MS);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CLIProcess
});
//# sourceMappingURL=cliProcess.js.map
