/**
 *      Setup
 *
 *      Copyright 2013-2024 bluefox <dogafox@gmail.com>
 *
 *      MIT License
 *
 */
import type { CleanDatabaseHandler, IoPackage, ProcessExitCallback, RestartController } from '../../lib/_Types.js';
import { EXIT_CODES } from '@iobroker/js-controller-common';
export interface CLISetupOptions {
    cleanDatabase: CleanDatabaseHandler;
    processExit: ProcessExitCallback;
    params: Record<string, any>;
    restartController: RestartController;
}
export interface SetupCommandOptions {
    /** Callback called afterward */
    callback: (isCreated?: boolean) => void;
    /** Used for setup first run, does setup process even though config file already exists */
    ignoreIfExist: boolean;
    /** If redis should be setup */
    useRedis: boolean;
}
export declare class Setup {
    /** Object IDs which are not allowed to exist but could be generated due to errors in the past */
    private readonly KNOWN_GARBAGE_OBJECT_IDS;
    /** Adapter core version supported by this js-controller */
    private readonly SUPPORTED_ADAPTER_CORE_VERSION;
    /** Default name for redis sentinels */
    private readonly DEFAULT_SENTINEL_NAME;
    private readonly processExit;
    private states;
    private objects;
    private readonly params;
    private readonly cleanDatabase;
    private readonly restartController;
    constructor(options: CLISetupOptions);
    informAboutPlugins(systemConfig?: ioBroker.SystemConfigObject | null): Promise<void>;
    /**
     * Called after io-package objects are created (hence object view functionalities are now available)
     *
     * @param systemConfig the system config object
     * @param callback callback function
     */
    setupReady(systemConfig: ioBroker.SystemConfigObject | undefined | null, callback: () => void): Promise<void>;
    dbSetup(iopkg: IoPackage, ignoreExisting: boolean, callback: () => void): Promise<void>;
    /**
     * Fix the config object if existing
     *
     * @param configObj the current system.config object
     */
    private fixConfig;
    /**
     * Creates objects and does object related cleanup
     *
     * @param callback callback function
     * @param checkCertificateOnly if only certificate check is desired
     */
    setupObjects(callback: () => void, checkCertificateOnly?: boolean): Promise<void>;
    /**
     * Asks the user if he wants to migrate objects if it makes sense and performs migration according to input
     *
     * @param newConfig - updated config
     * @param oldConfig - previous config
     */
    migrateObjects(newConfig: ioBroker.IoBrokerJson, oldConfig: ioBroker.IoBrokerJson): Promise<EXIT_CODES>;
    setupCustom(): Promise<EXIT_CODES>;
    /**
     * Checks if single host setup and if so migrates and activates Redis Sets Usage
     */
    private _maybeMigrateSets;
    /**
     * Ensure that host object exists
     */
    private _ensureHostObject;
    /**
     * Add adapter-core in supported version in the overrides field of the root package.json and call install there to apply it
     */
    private addAdapterCoreRequirement;
    /**
     * Create the adapters object per host if not yet existing
     */
    private _ensureAdaptersPerHostObject;
    /**
     * Replace the `controller.js` file in the root directory to work with ESM
     */
    _fixWindowsControllerJs(): Promise<void>;
    /**
     * Perform multiple cleanup operations, to clean up inconsistent states due to past bugs or edge case errors
     */
    private _cleanupInstallation;
    /**
     * Cleanup adapter objects from already removed adapters, which are still there due to errors or past bugs
     */
    private _cleanupLeftoverAdapters;
    /**
     * Cleanup all states and objects which contain forbidden chars in their id
     */
    private _cleanupForbiddenIds;
    /**
     * Cleanup objects which are known to be created on accident in the past by adapters or controller
     */
    private _cleanupGarbageObjects;
    /**
     * Removes all binary state related objects and states
     */
    private _cleanupBinaryStates;
    /**
     * Removes non-existing users from groups
     */
    private _cleanupInvalidGroupAssignments;
    /**
     * Setup the installation with config file, host object, scripts etc
     *
     * @param options setup options
     */
    setup(options: SetupCommandOptions): void;
}
//# sourceMappingURL=setupSetup.d.ts.map