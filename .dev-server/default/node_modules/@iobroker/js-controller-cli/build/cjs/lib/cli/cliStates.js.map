{
  "version": 3,
  "sources": ["../../../../src/lib/cli/cliStates.ts"],
  "sourcesContent": ["import { tools } from '@iobroker/js-controller-common';\nimport { CLICommand, type CLICommandOptions } from './cliCommand.js';\nimport type { Client as ObjectsClient } from '@iobroker/db-objects-redis';\nimport * as CLI from '@/lib/cli/messages.js';\nimport { formatValue } from '@/lib/cli/cliTools.js';\nimport * as rl from 'readline-sync';\n\nconst ALIAS_STARTS_WITH = 'alias.';\n\ntype ResultTransform = (input: ioBroker.State) => string;\n\n/** Command iobroker state ... */\nexport class CLIStates extends CLICommand {\n    constructor(options: CLICommandOptions) {\n        super(options);\n    }\n\n    /**\n     * Executes a command\n     *\n     * @param args parsed cli args\n     */\n    execute(args: any[]): void {\n        const { callback, pretty, showHelp } = this.options;\n        const command = args[0];\n        let resultTransform: ResultTransform;\n\n        switch (command) {\n            case 'get':\n                resultTransform = obj => formatValue(obj, pretty);\n                return this.get_(args, resultTransform);\n            case 'getPlain':\n            case 'getplain':\n                resultTransform = obj => {\n                    if (!obj) {\n                        return 'null';\n                    }\n\n                    return [obj.val, obj.ack, obj.from, obj.ts, obj.lc].map(line => formatValue(line)).join('\\n');\n                };\n                return this.get_(args, resultTransform);\n            case 'getValue':\n            case 'getvalue':\n                resultTransform = obj => (obj ? formatValue(obj.val, pretty) : 'null');\n                return this.get_(args, resultTransform);\n            case 'set':\n                return this.set_(args);\n            case 'chmod':\n            case 'chown':\n                CLI.error.wrongCommandPrefix('state', command, 'object');\n                return void callback(3);\n            case 'delete':\n            case 'del':\n                return this.delete(args);\n            case 'getDBVersion':\n                return this.getDBVersion();\n            case 'setDBVersion':\n                return this.setDBVersion();\n            default:\n                CLI.error.unknownCommand('state', command);\n                showHelp();\n                return void callback(3);\n        }\n    }\n\n    /**\n     * Get the protocol version\n     */\n    getDBVersion(): void {\n        const { callback, dbConnect } = this.options;\n        dbConnect(async params => {\n            const { states } = params;\n            const version = await states.getProtocolVersion();\n            console.log(`Current States DB protocol version: ${version}`);\n            return void callback(0);\n        });\n    }\n\n    /**\n     * Set protocol version\n     */\n    setDBVersion(): void {\n        const { callback, dbConnect } = this.options;\n        dbConnect(async params => {\n            const { states } = params;\n\n            let answer = rl.question('Changing the protocol version will restart all hosts! Continue? [N/y]', {\n                limit: /^(yes|y|n|no)$/i,\n                defaultInput: 'no',\n            });\n\n            answer = answer.toLowerCase();\n\n            if (answer !== 'y' && answer !== 'yes') {\n                console.log('Protocol version has not been changed!');\n                return void callback(0);\n            }\n\n            try {\n                await states.setProtocolVersion(this.options.version);\n            } catch (e) {\n                console.error(`Cannot update protocol version: ${e.message}`);\n                return void callback(1);\n            }\n            console.log(`States DB protocol updated to version ${this.options.version}`);\n            return void callback(0);\n        });\n    }\n\n    /**\n     * Checks if state is a binary state\n     *\n     * @param id id of the state\n     * @param objects the objects db\n     * @param _obj cached object\n     */\n    private async _isBinary(id: string, objects: ObjectsClient, _obj?: ioBroker.AnyObject | null): Promise<boolean> {\n        const obj = _obj || (await objects.getObjectAsync(id));\n\n        return !!(obj && ('binary' in obj || (obj.common && 'type' in obj.common && obj.common.type === 'file')));\n    }\n\n    /**\n     * Returns the value of a state\n     *\n     * @param args parsed cli arguments\n     * @param resultTransform transform function for result\n     */\n    get_(args: any[], resultTransform: ResultTransform): void {\n        const { callback, dbConnect } = this.options;\n        const id = args[1];\n\n        if (!id) {\n            CLI.error.stateNotFound(id);\n            return;\n        }\n\n        dbConnect(async params => {\n            const { states, objects } = params;\n\n            if (id.startsWith(ALIAS_STARTS_WITH)) {\n                objects.getObject(id, (err, targetObj) => {\n                    // alias\n                    if (targetObj && targetObj.common && 'alias' in targetObj.common && targetObj.common.alias.id) {\n                        const aliasId =\n                            typeof targetObj.common.alias.id.read === 'string'\n                                ? targetObj.common.alias.id.read\n                                : targetObj.common.alias.id;\n                        objects.getObject(aliasId, async (_err, sourceObj) => {\n                            // read target\n                            try {\n                                if (await this._isBinary(aliasId, objects, targetObj)) {\n                                    CLI.error.stateBinaryGetUnsupported(aliasId);\n                                    return void callback(1);\n                                }\n\n                                const state = await states.getStateAsync(aliasId);\n                                if (!state) {\n                                    CLI.error.stateNotFound(id);\n                                } else {\n                                    tools.formatAliasValue({\n                                        sourceCommon: sourceObj?.common as ioBroker.StateCommon | undefined,\n                                        targetCommon: targetObj.common as ioBroker.StateCommon,\n                                        state,\n                                        logger: console,\n                                        logNamespace: '',\n                                        sourceId: sourceObj?._id,\n                                        targetId: targetObj._id,\n                                    });\n                                    console.log(resultTransform(state));\n                                }\n                            } catch (e) {\n                                CLI.error.unknown(e);\n                            }\n                            return void callback(0);\n                        });\n                    } else {\n                        CLI.error.unknown(err?.message || `Alias ${id} has no target`);\n                        return void callback(1); // ?\n                    }\n                });\n            } else {\n                try {\n                    if (await this._isBinary(id, objects)) {\n                        CLI.error.stateBinaryGetUnsupported(id);\n                        return void callback(1);\n                    }\n                    const state = await states.getStateAsync(id);\n                    if (!state) {\n                        CLI.error.stateNotFound(id);\n                    } else {\n                        console.log(resultTransform(state));\n                    }\n                } catch (e) {\n                    CLI.error.unknown(e);\n                }\n                return void callback(0);\n            }\n        });\n    }\n\n    /**\n     * Set state in database\n     *\n     * @param args parsed cli arguments\n     */\n    set_(args: any[]): void {\n        const { callback, dbConnect, showHelp } = this.options;\n        // eslint-disable-next-line prefer-const\n        let [id, val, ack] = args.slice(1) as [string, any, any];\n        const force = args.includes('--force') || args.includes('-f');\n\n        if (val === undefined) {\n            CLI.error.requiredArgumentMissing('value');\n            showHelp();\n            return void callback(0);\n        }\n\n        if (ack !== undefined) {\n            ack = ack === 'true' || ack === '1' || ack === 1 || ack === true;\n        }\n\n        dbConnect(params => {\n            const { states, objects } = params;\n            const newVal = ack === undefined ? { val, ack: false } : { val, ack: !!ack };\n\n            if (id.startsWith(ALIAS_STARTS_WITH)) {\n                objects.getObject(id, async (_err, obj) => {\n                    if (await this._isBinary(id, objects, obj)) {\n                        CLI.error.stateBinarySetUnsupported(id);\n                        return void callback(1);\n                    }\n                    // alias\n                    if (obj && obj.common && obj.common.alias && obj.common.alias.id) {\n                        const aliasId =\n                            typeof obj.common.alias.id.write === 'string'\n                                ? obj.common.alias.id.write\n                                : obj.common.alias.id;\n\n                        objects.getObject(aliasId, (err, targetObj) => {\n                            if (err) {\n                                CLI.error.unknown(err.message);\n                                return void callback(1); // access error\n                            }\n                            if (!obj && !force) {\n                                CLI.error.objectNotFound(id, 'null');\n                                return void callback(1); // object not exists\n                            }\n\n                            if (obj?.common?.type) {\n                                if (obj.common.type === 'string') {\n                                    newVal.val = newVal.val.toString();\n                                } else if (obj.common.type === 'number') {\n                                    newVal.val = parseFloat(newVal.val);\n                                } else if (obj.common.type === 'boolean') {\n                                    newVal.val = newVal.val.toString();\n                                    newVal.val =\n                                        newVal.val === 'true' ||\n                                        newVal.val === '1' ||\n                                        newVal.val === 'ON' ||\n                                        newVal.val === 'on';\n                                }\n                            }\n\n                            // write target\n                            states.setState(\n                                aliasId,\n                                tools.formatAliasValue({\n                                    sourceCommon: obj.common as ioBroker.StateCommon,\n                                    targetCommon: targetObj?.common as ioBroker.StateCommon | undefined,\n                                    state: newVal as ioBroker.State,\n                                    logger: console,\n                                    logNamespace: '',\n                                    sourceId: obj._id,\n                                    targetId: targetObj?._id,\n                                }),\n                                err => {\n                                    if (err) {\n                                        CLI.error.unknown(err.message);\n                                        return void callback(1); // ?\n                                    }\n                                    CLI.success.stateUpdated(id, val, !!ack);\n                                    return void callback(0);\n                                },\n                            );\n                        });\n                    } else {\n                        CLI.error.unknown(`Alias ${id} has no target`);\n                        return void callback(1); // ?\n                    }\n                });\n            } else {\n                objects.getObject(id, async (err, obj) => {\n                    if (err) {\n                        CLI.error.unknown(err.message);\n                        return void callback(1); // access error\n                    }\n\n                    if (await this._isBinary(id, objects, obj)) {\n                        CLI.error.stateBinarySetUnsupported(id);\n                        return void callback(1);\n                    }\n\n                    if (!obj && !force) {\n                        CLI.error.objectNotFound(id, 'null');\n                        return void callback(1); // object not exists\n                    }\n\n                    if (obj && obj.common && obj.common.type) {\n                        if (obj.common.type === 'string') {\n                            newVal.val = newVal.val.toString();\n                        } else if (obj.common.type === 'number') {\n                            newVal.val = parseFloat(newVal.val);\n                        } else if (obj.common.type === 'boolean') {\n                            newVal.val = newVal.val.toString();\n                            newVal.val =\n                                newVal.val === 'true' ||\n                                newVal.val === '1' ||\n                                newVal.val === 'ON' ||\n                                newVal.val === 'on';\n                        }\n                    }\n\n                    states.setState(id, newVal, err => {\n                        if (err) {\n                            CLI.error.unknown(err.message);\n                            return void callback(1); // ?\n                        }\n                        CLI.success.stateUpdated(id, val, !!ack);\n                        return void callback(0);\n                    });\n                });\n            }\n        });\n    }\n\n    /**\n     * Deletes a state\n     *\n     * @param args parsed cli arguments\n     */\n    delete(args: any[]): void {\n        const { callback, dbConnect } = this.options;\n        const id: string = args[1];\n        if (!id) {\n            CLI.error.requiredArgumentMissing('id', 'state delete id');\n            return void callback(1);\n        }\n\n        dbConnect(params => {\n            const { states } = params;\n\n            states.delState(id, err => {\n                if (err) {\n                    CLI.error.stateNotFound(id, err.message);\n                    return void callback(3);\n                }\n                CLI.success.stateDeleted(id);\n                return void callback(0);\n            });\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": ["err"]
}
