"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var log_exports = {};
__export(log_exports, {
  Log: () => Log
});
module.exports = __toCommonJS(log_exports);
class Log {
  namespaceLog;
  level;
  // TODO: this should be a winston.Logger, but the exported types will mess up because of https://github.com/microsoft/rushstack/issues/2220
  logger;
  /**
   * @param namespaceLog Logging namespace to prefix
   * @param level The log level
   * @param logger logger instance
   */
  constructor(namespaceLog, level, logger) {
    this.namespaceLog = namespaceLog;
    this.level = level;
    this.logger = logger;
    this.silly = this.silly.bind(this);
    this.debug = this.debug.bind(this);
    this.info = this.info.bind(this);
    this.error = this.error.bind(this);
    this.warn = this.warn.bind(this);
  }
  silly(msg) {
    this.logger.silly(`${this.namespaceLog} ${msg}`);
  }
  debug(msg) {
    this.logger.debug(`${this.namespaceLog} ${msg}`);
  }
  info(msg) {
    this.logger.info(`${this.namespaceLog} ${msg}`);
  }
  error(msg) {
    this.logger.error(`${this.namespaceLog} ${msg}`);
  }
  warn(msg) {
    this.logger.warn(`${this.namespaceLog} ${msg}`);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Log
});
//# sourceMappingURL=log.js.map
