import type { Client as StatesInRedisClient } from '@iobroker/db-states-redis';
import type { AdapterClass } from '../../lib/adapter/adapter.js';
import type { UserInterfaceClientRemoveMessage, UserInterfaceClientSubscribeHandler, UserInterfaceClientSubscribeReturnType, UserInterfaceClientUnsubscribeHandler } from '../../lib/_Types.js';
export interface HeartbeatTimer {
    /** The actual timer */
    timer: NodeJS.Timeout;
    /** The heartbeat interval */
    heartbeat: number;
}
export interface MessagingControllerOptions {
    /** The adapter using this messaging controller */
    adapter: AdapterClass;
    /** Callback to call if successfully subscribed */
    subscribeCallback?: UserInterfaceClientSubscribeHandler;
    /** Callback to call if successfully unsubscribed */
    unsubscribeCallback?: UserInterfaceClientUnsubscribeHandler;
}
export interface SendToClientOptions {
    /** ID of the client to send the message to, will send to all if omitted */
    clientId: string;
    /** Data to send to the client */
    data: unknown;
    /** The states db */
    states: StatesInRedisClient;
}
export type SendToAllClientOptions = Omit<SendToClientOptions, 'clientId'>;
export interface ClientHandler {
    /** The session id of the client connection */
    sid: string;
    /** Name of the subscriber */
    from: string;
    /** Individual type which can be specified */
    type: string;
}
export declare class UserInterfaceMessagingController {
    /** The adapter using this messaging controller */
    private readonly adapter;
    /** Callback to call if successfully subscribed */
    private readonly unsubscribeCallback?;
    /** Callback to call if successfully unsubscribed */
    private readonly subscribeCallback?;
    /** All currently registered client handlers */
    private readonly handlers;
    /** Collection of current heartbeat timers */
    private heartbeatTimers;
    constructor(options: MessagingControllerOptions);
    /**
     * Send a message to the given clientId
     *
     * @param options Data, states and client information
     */
    sendToClient(options: SendToClientOptions): Promise<void>;
    /**
     * Send a message to all active clients
     *
     * @param options Data and states options
     */
    sendToAllClients(options: SendToAllClientOptions): Promise<void>;
    /**
     * Register subscription from new client
     *
     * @param msg The subscribe message
     */
    registerClientSubscribeByMessage(msg: ioBroker.Message): Promise<UserInterfaceClientSubscribeReturnType | undefined>;
    /**
     * Remove a client subscription, issued by message
     * It contains an array of types which should be unsubscribed
     *
     * @param msg The unsubscribe message
     */
    removeClientSubscribeByMessage(msg: UserInterfaceClientRemoveMessage): void;
    /**
     * Convert handler to id
     *
     * @param handler the client handler to creat the id for
     */
    private handlerToId;
    /**
     * Extract the client handler from a given message
     *
     * @param msg the subscribe or unsubscribe message
     */
    private extractHandlerFromMessage;
    /**
     * Handle expired heartbeat
     *
     * @param clientId the id of the expired client
     */
    private heartbeatExpired;
}
//# sourceMappingURL=userInterfaceMessagingController.d.ts.map