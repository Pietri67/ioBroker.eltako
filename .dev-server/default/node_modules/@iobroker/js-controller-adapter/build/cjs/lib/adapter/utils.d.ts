import { type SupportedFeature } from '../../lib/adapter/constants.js';
interface EncryptArrayOptions {
    /** The objects whose values should be en/decrypted */
    obj: Record<string, unknown>;
    /** Keys which need to be en/decrypted */
    keys: string[];
    /** Secret to use for en/decryption */
    secret: string;
}
interface GetScopedPackageIdentifierOptions {
    /** Name of the node module */
    moduleName: string;
    /** Adapter namespace */
    namespace: string;
}
/**
 * Check if messagebox is configured for given instance
 * This means, at least one of the properties has a value different from false
 *
 * @param instanceCommon Instance common
 */
export declare function isMessageboxSupported(instanceCommon: ioBroker.InstanceCommon): boolean;
/**
 * Get the supported features for the current running controller
 */
export declare function getSupportedFeatures(): SupportedFeature[];
/**
 * Encrypt given keys of given object
 *
 * @param options keys, object and secret information
 */
export declare function encryptArray(options: EncryptArrayOptions): void;
/**
 * Decrypt given keys of given object
 *
 * @param options keys, object and secret information
 */
export declare function decryptArray(options: EncryptArrayOptions): void;
/**
 * Transform a npm moduleName to the adapter scoped name, like `axios` to `@iobroker-javascript.0/axios`
 *
 * @param options name of the node module and namespace information
 */
export declare function getAdapterScopedPackageIdentifier(options: GetScopedPackageIdentifierOptions): string;
/**
 * List all packages installed in the given adapter namespace
 *
 * @param namespace namespace to check installed modules for
 */
export declare function listInstalledNodeModules(namespace: string): Promise<string[]>;
/**
 * Request a module name by given url using `npm view`
 *
 * @param url the url to the package which should be installed via npm
 */
export declare function requestModuleNameByUrl(url: string): Promise<string>;
export {};
//# sourceMappingURL=utils.d.ts.map