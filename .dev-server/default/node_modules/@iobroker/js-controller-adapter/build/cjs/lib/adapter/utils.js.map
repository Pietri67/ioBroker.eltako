{
  "version": 3,
  "sources": ["../../../../src/lib/adapter/utils.ts"],
  "sourcesContent": ["import {\n    isObject,\n    isControllerUiUpgradeSupported,\n    encrypt,\n    decrypt,\n    appNameLowerCase,\n    getRootDir,\n    execAsync,\n} from '@iobroker/js-controller-common-db/tools';\nimport { SUPPORTED_FEATURES, type SupportedFeature } from '@/lib/adapter/constants.js';\nimport path from 'node:path';\nimport fs from 'fs-extra';\n\ninterface EncryptArrayOptions {\n    /** The objects whose values should be en/decrypted */\n    obj: Record<string, unknown>;\n    /** Keys which need to be en/decrypted */\n    keys: string[];\n    /** Secret to use for en/decryption */\n    secret: string;\n}\n\ninterface GetScopedPackageIdentifierOptions {\n    /** Name of the node module */\n    moduleName: string;\n    /** Adapter namespace */\n    namespace: string;\n}\n\n/**\n * Check if messagebox is configured for given instance\n * This means, at least one of the properties has a value different from false\n *\n * @param instanceCommon Instance common\n */\nexport function isMessageboxSupported(instanceCommon: ioBroker.InstanceCommon): boolean {\n    if (!isObject(instanceCommon.supportedMessages)) {\n        return !!instanceCommon.messagebox;\n    }\n\n    return Object.values(instanceCommon.supportedMessages).find(val => val !== false) !== undefined;\n}\n\n/**\n * Get the supported features for the current running controller\n */\nexport function getSupportedFeatures(): SupportedFeature[] {\n    if (!isControllerUiUpgradeSupported()) {\n        const idx = SUPPORTED_FEATURES.indexOf('CONTROLLER_UI_UPGRADE');\n        if (idx !== -1) {\n            SUPPORTED_FEATURES.splice(idx, 1);\n        }\n    }\n\n    return SUPPORTED_FEATURES;\n}\n\n/**\n * Encrypt given keys of given object\n *\n * @param options keys, object and secret information\n */\nexport function encryptArray(options: EncryptArrayOptions): void {\n    const { secret, obj, keys } = options;\n\n    for (const attr of keys) {\n        const val = obj[attr];\n        if (typeof val === 'string') {\n            obj[attr] = encrypt(secret, val);\n        }\n    }\n}\n\n/**\n * Decrypt given keys of given object\n *\n * @param options keys, object and secret information\n */\nexport function decryptArray(options: EncryptArrayOptions): void {\n    const { secret, obj, keys } = options;\n\n    for (const attr of keys) {\n        const val = obj[attr];\n        if (typeof val === 'string') {\n            obj[attr] = decrypt(secret, val);\n        }\n    }\n}\n\n/**\n * Transform a npm moduleName to the adapter scoped name, like `axios` to `@iobroker-javascript.0/axios`\n *\n * @param options name of the node module and namespace information\n */\nexport function getAdapterScopedPackageIdentifier(options: GetScopedPackageIdentifierOptions): string {\n    const { moduleName, namespace } = options;\n\n    let internalModuleName = moduleName;\n    if (internalModuleName.startsWith('@')) {\n        internalModuleName = internalModuleName.substring(1).replace(/\\//g, '-');\n    }\n\n    return `@${appNameLowerCase}-${namespace}/${internalModuleName}`;\n}\n\n/**\n * List all packages installed in the given adapter namespace\n *\n * @param namespace namespace to check installed modules for\n */\nexport async function listInstalledNodeModules(namespace: string): Promise<string[]> {\n    const packJson = (await fs.readJson(path.join(getRootDir(), 'package.json'))) as {\n        dependencies: Record<string, string>;\n    };\n    const dependencies: string[] = [];\n\n    for (const [dependency, versionInfo] of Object.entries(packJson.dependencies)) {\n        if (!dependency.startsWith(`@${appNameLowerCase}-${namespace}/`)) {\n            continue;\n        }\n\n        let realDependencyName: string;\n        // remove npm: and version after last @\n        if (versionInfo.startsWith('npm:')) {\n            realDependencyName = versionInfo.substring(4, versionInfo.lastIndexOf('@'));\n        } else {\n            realDependencyName = await requestModuleNameByUrl(versionInfo);\n        }\n\n        dependencies.push(realDependencyName);\n    }\n\n    return dependencies;\n}\n\n/**\n * Request a module name by given url using `npm view`\n *\n * @param url the url to the package which should be installed via npm\n */\nexport async function requestModuleNameByUrl(url: string): Promise<string> {\n    const res = await execAsync(`npm view ${url} name`);\n\n    if (typeof res.stdout !== 'string') {\n        throw new Error(\n            `Could not determine module name for url \"${url}\". Unexpected stdout: \"${res.stdout ? res.stdout.toString() : ''}\"`,\n        );\n    }\n\n    return res.stdout.trim();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAAA,mBAQO;AACP,uBAA0D;AAC1D,uBAAiB;AACjB,sBAAe;AAwBT,SAAU,sBAAsB,gBAAuC;AACzE,MAAI,KAAC,uBAAS,eAAe,iBAAiB,GAAG;AAC7C,WAAO,CAAC,CAAC,eAAe;EAC5B;AAEA,SAAO,OAAO,OAAO,eAAe,iBAAiB,EAAE,KAAK,SAAO,QAAQ,KAAK,MAAM;AAC1F;AAKM,SAAU,uBAAoB;AAChC,MAAI,KAAC,6CAA8B,GAAI;AACnC,UAAM,MAAM,oCAAmB,QAAQ,uBAAuB;AAC9D,QAAI,QAAQ,IAAI;AACZ,0CAAmB,OAAO,KAAK,CAAC;IACpC;EACJ;AAEA,SAAO;AACX;AAOM,SAAU,aAAa,SAA4B;AACrD,QAAM,EAAE,QAAQ,KAAK,KAAI,IAAK;AAE9B,aAAW,QAAQ,MAAM;AACrB,UAAM,MAAM,IAAI,IAAI;AACpB,QAAI,OAAO,QAAQ,UAAU;AACzB,UAAI,IAAI,QAAI,sBAAQ,QAAQ,GAAG;IACnC;EACJ;AACJ;AAOM,SAAU,aAAa,SAA4B;AACrD,QAAM,EAAE,QAAQ,KAAK,KAAI,IAAK;AAE9B,aAAW,QAAQ,MAAM;AACrB,UAAM,MAAM,IAAI,IAAI;AACpB,QAAI,OAAO,QAAQ,UAAU;AACzB,UAAI,IAAI,QAAI,sBAAQ,QAAQ,GAAG;IACnC;EACJ;AACJ;AAOM,SAAU,kCAAkC,SAA0C;AACxF,QAAM,EAAE,YAAY,UAAS,IAAK;AAElC,MAAI,qBAAqB;AACzB,MAAI,mBAAmB,WAAW,GAAG,GAAG;AACpC,yBAAqB,mBAAmB,UAAU,CAAC,EAAE,QAAQ,OAAO,GAAG;EAC3E;AAEA,SAAO,IAAI,6BAAgB,IAAI,SAAS,IAAI,kBAAkB;AAClE;AAOA,eAAsB,yBAAyB,WAAiB;AAC5D,QAAM,WAAY,MAAM,gBAAAA,QAAG,SAAS,iBAAAC,QAAK,SAAK,yBAAU,GAAI,cAAc,CAAC;AAG3E,QAAM,eAAyB,CAAA;AAE/B,aAAW,CAAC,YAAY,WAAW,KAAK,OAAO,QAAQ,SAAS,YAAY,GAAG;AAC3E,QAAI,CAAC,WAAW,WAAW,IAAI,6BAAgB,IAAI,SAAS,GAAG,GAAG;AAC9D;IACJ;AAEA,QAAI;AAEJ,QAAI,YAAY,WAAW,MAAM,GAAG;AAChC,2BAAqB,YAAY,UAAU,GAAG,YAAY,YAAY,GAAG,CAAC;IAC9E,OAAO;AACH,2BAAqB,MAAM,uBAAuB,WAAW;IACjE;AAEA,iBAAa,KAAK,kBAAkB;EACxC;AAEA,SAAO;AACX;AAOA,eAAsB,uBAAuB,KAAW;AACpD,QAAM,MAAM,UAAM,wBAAU,YAAY,GAAG,OAAO;AAElD,MAAI,OAAO,IAAI,WAAW,UAAU;AAChC,UAAM,IAAI,MACN,4CAA4C,GAAG,0BAA0B,IAAI,SAAS,IAAI,OAAO,SAAQ,IAAK,EAAE,GAAG;EAE3H;AAEA,SAAO,IAAI,OAAO,KAAI;AAC1B;",
  "names": ["fs", "path"]
}
