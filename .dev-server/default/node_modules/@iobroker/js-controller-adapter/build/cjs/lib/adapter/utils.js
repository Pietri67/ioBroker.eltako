"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  decryptArray: () => decryptArray,
  encryptArray: () => encryptArray,
  getAdapterScopedPackageIdentifier: () => getAdapterScopedPackageIdentifier,
  getSupportedFeatures: () => getSupportedFeatures,
  isMessageboxSupported: () => isMessageboxSupported,
  listInstalledNodeModules: () => listInstalledNodeModules,
  requestModuleNameByUrl: () => requestModuleNameByUrl
});
module.exports = __toCommonJS(utils_exports);
var import_tools = require("@iobroker/js-controller-common-db/tools");
var import_constants = require("../../lib/adapter/constants.js");
var import_node_path = __toESM(require("node:path"), 1);
var import_fs_extra = __toESM(require("fs-extra"), 1);
function isMessageboxSupported(instanceCommon) {
  if (!(0, import_tools.isObject)(instanceCommon.supportedMessages)) {
    return !!instanceCommon.messagebox;
  }
  return Object.values(instanceCommon.supportedMessages).find((val) => val !== false) !== void 0;
}
function getSupportedFeatures() {
  if (!(0, import_tools.isControllerUiUpgradeSupported)()) {
    const idx = import_constants.SUPPORTED_FEATURES.indexOf("CONTROLLER_UI_UPGRADE");
    if (idx !== -1) {
      import_constants.SUPPORTED_FEATURES.splice(idx, 1);
    }
  }
  return import_constants.SUPPORTED_FEATURES;
}
function encryptArray(options) {
  const { secret, obj, keys } = options;
  for (const attr of keys) {
    const val = obj[attr];
    if (typeof val === "string") {
      obj[attr] = (0, import_tools.encrypt)(secret, val);
    }
  }
}
function decryptArray(options) {
  const { secret, obj, keys } = options;
  for (const attr of keys) {
    const val = obj[attr];
    if (typeof val === "string") {
      obj[attr] = (0, import_tools.decrypt)(secret, val);
    }
  }
}
function getAdapterScopedPackageIdentifier(options) {
  const { moduleName, namespace } = options;
  let internalModuleName = moduleName;
  if (internalModuleName.startsWith("@")) {
    internalModuleName = internalModuleName.substring(1).replace(/\//g, "-");
  }
  return `@${import_tools.appNameLowerCase}-${namespace}/${internalModuleName}`;
}
async function listInstalledNodeModules(namespace) {
  const packJson = await import_fs_extra.default.readJson(import_node_path.default.join((0, import_tools.getRootDir)(), "package.json"));
  const dependencies = [];
  for (const [dependency, versionInfo] of Object.entries(packJson.dependencies)) {
    if (!dependency.startsWith(`@${import_tools.appNameLowerCase}-${namespace}/`)) {
      continue;
    }
    let realDependencyName;
    if (versionInfo.startsWith("npm:")) {
      realDependencyName = versionInfo.substring(4, versionInfo.lastIndexOf("@"));
    } else {
      realDependencyName = await requestModuleNameByUrl(versionInfo);
    }
    dependencies.push(realDependencyName);
  }
  return dependencies;
}
async function requestModuleNameByUrl(url) {
  const res = await (0, import_tools.execAsync)(`npm view ${url} name`);
  if (typeof res.stdout !== "string") {
    throw new Error(`Could not determine module name for url "${url}". Unexpected stdout: "${res.stdout ? res.stdout.toString() : ""}"`);
  }
  return res.stdout.trim();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decryptArray,
  encryptArray,
  getAdapterScopedPackageIdentifier,
  getSupportedFeatures,
  isMessageboxSupported,
  listInstalledNodeModules,
  requestModuleNameByUrl
});
//# sourceMappingURL=utils.js.map
