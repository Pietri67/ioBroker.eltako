type Callback = (...args: any[]) => void | Promise<void>;
type OptionalCallback = undefined | Callback;
type Pattern = string | string[];
export interface ValidateIdOptions {
    /** in maintenance mode, we can access invalid ids to delete them, only works with the admin user */
    maintenance?: boolean;
    /** User used to check for access rights */
    user?: string;
}
export declare class Validator {
    private readonly objects;
    private readonly states;
    private readonly namespaceLog;
    private readonly log;
    private readonly namespace;
    private readonly namespaceRegExp;
    /**
     * Validator for internal adapter.js usage
     *
     * @param objects - Objects DB
     * @param states - States DB
     * @param namespaceLog - Log prefix
     * @param logger - Logger instance
     * @param namespace - the namespace of the adapter
     * @param namespaceRegExp - the namespace RegExp of the adapter `adapter.0`
     */
    constructor(objects: any, states: any, namespaceLog: string, logger: any, namespace: string, namespaceRegExp: RegExp);
    /**
     * Performs the strict object check, which includes checking object existence, read-only logic, type and min/max
     * additionally it rounds state values whose objects have a `common.step` attribute defined
     *
     * @param id - id of the state
     * @param state - ioBroker setState object
     */
    performStrictObjectCheck(id: string, state: ioBroker.SettableState): Promise<void>;
    /**
     * Checks if a passed ID is valid. Throws an error if id is invalid
     *
     * @param id id to check or object with properties device, channel and state
     * @param isForeignId true&false if the ID is a foreign/full ID or only an "adapter local" id
     * @param options optional
     * @throws Error when id is invalid
     */
    validateId(id: any, isForeignId: boolean, options?: ValidateIdOptions | null): asserts id is string;
    /**
     * Look up the error description for an error code
     *
     * @param code error code
     * @returns error description
     */
    static getErrorText(code: number): string;
    /**
     * Throws if a type is not matching the expected type
     *
     * @param value value to check a type of
     * @param name name of the parameter for logging
     */
    static assertString(value: unknown, name: string): asserts value is string;
    /**
     * Throws if a type is not a pattern
     *
     * @param value value to check a type of
     * @param name name of the parameter for logging
     */
    static assertPattern(value: unknown, name: string): asserts value is Pattern;
    /**
     * Throws if a type is not matching the expected type
     *
     * @param value value to check a type of
     * @param name name of the parameter for logging
     */
    static assertBoolean(value: unknown, name: string): asserts value is boolean;
    /**
     * Throws if a type is not matching the expected type
     *
     * @param value value to check a type of
     * @param name name of the parameter for logging
     */
    static assertNumber(value: unknown, name: string): asserts value is number;
    /**
     * Throws if a type is not matching the expected type
     *
     * @param value value to check a type of
     * @param name name of the parameter for logging
     */
    static assertObject<T extends Record<string, any> = Record<string, any>>(value: unknown, name: string): asserts value is T;
    /**
     * Throws if a type is not an optional callback
     *
     * @param value value to check a type of
     * @param name name of the parameter for logging
     */
    static assertBuffer(value: unknown, name: string): asserts value is Buffer;
    /**
     * Throws if a type is not an optional callback
     *
     * @param value value to check a type of
     * @param name name of the parameter for logging
     */
    static assertOptionalCallback(value: unknown, name: string): asserts value is OptionalCallback;
    /**
     * Throws if a type is not an optional callback
     *
     * @param value value to check a type of
     * @param name name of the parameter for logging
     */
    static assertCallback(value: unknown, name: string): asserts value is Callback;
    /**
     * Adds the namespace to the ID if it is missing, if an object is passed it will be converted to an id string
     *
     * @param id id which will be fixed
     * @param isPattern if the id is a pattern
     */
    fixId(id: string | ioBroker.IdObject, isPattern?: boolean): string;
    /**
     * Validates the object-type argument that is passed to setState
     *
     * @param obj object to validate
     */
    validateSetStateObjectArgument(obj: Record<string, any>): void;
    /**
     * Validates that the timeout is not exceeding a 32-bit signed integer
     *
     * @param ms milliseconds to validate
     */
    static assertTimeout(ms: number): void;
}
export {};
//# sourceMappingURL=validator.d.ts.map