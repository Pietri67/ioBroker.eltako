/**
 * Constants needed for adapter.js
 */
export const DEFAULT_SECRET = 'Zgfr56gFe87jJOM';
export const ALIAS_STARTS_WITH = 'alias.';
export const SYSTEM_ADMIN_USER = 'system.user.admin';
export const SYSTEM_ADMIN_GROUP = 'system.group.administrator';
export const ERROR_PERMISSION = 'permissionError';
export const ACCESS_GROUP_READ = 0x40;
export const ACCESS_GROUP_WRITE = 0x20;
export const ACCESS_EVERY_WRITE = 0x2;
export const ACCESS_EVERY_READ = 0x4;
export const ACCESS_USER_READ = 0x400;
export const ACCESS_USER_WRITE = 0x200;
export const NO_PROTECT_ADAPTERS = ['admin', 'iot', 'cloud', 'discovery'];
/** Two-way mapping for state quality ("q" attribute of a state) */
export var STATE_QUALITY;
(function (STATE_QUALITY) {
    /** The default value for a state */
    STATE_QUALITY[STATE_QUALITY["GOOD"] = 0] = "GOOD";
    /** General problem */
    STATE_QUALITY[STATE_QUALITY["BAD"] = 1] = "BAD";
    /** The instance cannot establish a connection */
    STATE_QUALITY[STATE_QUALITY["CONNECTION_PROBLEM"] = 2] = "CONNECTION_PROBLEM";
    /** Substitute value from controller. Do not set this in adapters */
    STATE_QUALITY[STATE_QUALITY["SUBSTITUTE_FROM_CONTROLLER"] = 16] = "SUBSTITUTE_FROM_CONTROLLER";
    /** Quality for default values */
    STATE_QUALITY[STATE_QUALITY["SUBSTITUTE_INITIAL_VALUE"] = 32] = "SUBSTITUTE_INITIAL_VALUE";
    /** Substitute value from instance or device */
    STATE_QUALITY[STATE_QUALITY["SUBSTITUTE_DEVICE_INSTANCE_VALUE"] = 64] = "SUBSTITUTE_DEVICE_INSTANCE_VALUE";
    /** Substitute value from a sensor */
    STATE_QUALITY[STATE_QUALITY["SUBSTITUTE_SENSOR_VALUE"] = 128] = "SUBSTITUTE_SENSOR_VALUE";
    /** General problem by instance */
    STATE_QUALITY[STATE_QUALITY["GENERAL_INSTANCE_PROBLEM"] = 17] = "GENERAL_INSTANCE_PROBLEM";
    /** General problem by device */
    STATE_QUALITY[STATE_QUALITY["GENERAL_DEVICE_PROBLEM"] = 65] = "GENERAL_DEVICE_PROBLEM";
    /** General problem by sensor */
    STATE_QUALITY[STATE_QUALITY["GENERAL_SENSOR_PROBLEM"] = 129] = "GENERAL_SENSOR_PROBLEM";
    /** The instance is not connected */
    STATE_QUALITY[STATE_QUALITY["INSTANCE_NOT_CONNECTED"] = 18] = "INSTANCE_NOT_CONNECTED";
    /** The device is not connected */
    STATE_QUALITY[STATE_QUALITY["DEVICE_NOT_CONNECTED"] = 66] = "DEVICE_NOT_CONNECTED";
    /** The sensor is not connected */
    STATE_QUALITY[STATE_QUALITY["SENSOR_NOT_CONNECTED"] = 130] = "SENSOR_NOT_CONNECTED";
    /** The device has reported an error */
    STATE_QUALITY[STATE_QUALITY["DEVICE_ERROR_REPORT"] = 68] = "DEVICE_ERROR_REPORT";
    /** The sensor has reported an error */
    STATE_QUALITY[STATE_QUALITY["SENSOR_ERROR_REPORT"] = 132] = "SENSOR_ERROR_REPORT";
})(STATE_QUALITY || (STATE_QUALITY = {}));
/** Using the const array just for type inference */
const SUPPORTED_FEATURES_INTERNAL = [
    'ALIAS', // Alias Feature supported, Since `js-controller` 2.0
    'ALIAS_SEPARATE_READ_WRITE_ID', // Alias support separated ids for read and write, Since `js-controller` 3.0
    'ADAPTER_GETPORT_BIND', // getPort method of adapter supports second parameter to bind to a special network interface, Since js-controller 2.0
    'ADAPTER_DEL_OBJECT_RECURSIVE', // delObject supports options.recursive flag to delete objects structures recursive, Since js-controller 2.2
    'ADAPTER_SET_OBJECT_SETS_DEFAULT_VALUE', // setObject(*) methods set the default (def) value via setState after the object is created. Since js-controller 2.0
    'ADAPTER_AUTO_DECRYPT_NATIVE', // all native attributes that are listed in an array `encryptedNative` in io-pack will be automatically decrypted and encrypted. Since js-controller 3.0
    'PLUGINS', // configurable plugins supported. Since `js-controller` 3.0
    'CONTROLLER_NPM_AUTO_REBUILD', // Automatic rebuild when node version mismatch is detected. Since `js-controller` 3.0
    'CONTROLLER_READWRITE_BASE_SETTINGS', // If base settings could be read and written. Since js-controller 3.0
    'CONTROLLER_MULTI_REPO', // Controller supports multiple repositories
    'CONTROLLER_LICENSE_MANAGER', // Controller can read licenses from iobroker.net. Since js-controller 4.0
    'CONTROLLER_OS_PACKAGE_UPGRADE', // Controller can upgrade OS packages
    'DEL_INSTANCE_CUSTOM', // instances/adapter can be deleted with --custom flag to remove corresponding custom of all objects. Since js-controller 4.0
    'CUSTOM_FULL_VIEW', // `getObjectView('system', 'custom-full', ...)` will return full objects and not only `common.custom` part. Since `js-controller` 5.0
    'ADAPTER_GET_OBJECTS_BY_ARRAY', // getForeignObjects supports an array of ids too. Since js-controller 5.0
    'CONTROLLER_UI_UPGRADE', // Controller can be updated via sendToHost('upgradeController', ...)
    'ADAPTER_WEBSERVER_UPGRADE', // Controller supports upgrading adapter and provides a webserver (triggered via sendToHost). Since `js-controller` 5.0
];
export const SUPPORTED_FEATURES = [...SUPPORTED_FEATURES_INTERNAL];
/** Maximum possible value for 32-bit signed integer */
export const MAX_TIMEOUT = 2 ** 32 / 2 - 1;
//# sourceMappingURL=constants.js.map