{
  "version": 3,
  "sources": ["../../../../src/lib/common/states.ts"],
  "sourcesContent": ["import fs from 'fs-extra';\nimport { tools } from '@iobroker/js-controller-common';\nimport type { Client as StatesClient, interview } from '@iobroker/db-states-redis';\n\nexport async function getStatesConstructor(): Promise<typeof StatesClient> {\n    const config = fs.readJSONSync(tools.getConfigFileName());\n    if (!config.states) {\n        config.states = { type: 'jsonl' };\n    }\n\n    try {\n        const Client = (await import(`@iobroker/db-states-${config.states.type}`)).Client;\n        return Client;\n    } catch (e) {\n        console.error(e.stack);\n        console.error(`Installation broken or unknown states type: ${config.states.type} configured.`);\n        process.exit(101);\n    }\n}\n\n/**\n * Allows to find out if a given states dbType offers a server or not\n *\n * @param dbType database type\n * @returns true if a server class is available\n */\nexport async function statesDbHasServer(dbType: string): Promise<boolean> {\n    try {\n        const states = await import(`@iobroker/db-states-${dbType}`);\n        return !!states.Server;\n    } catch {\n        throw new Error(`Installation error or unknown states database type: ${dbType}`);\n    }\n}\n\n/**\n * Allows to find out if a given states dbType offers a server which runs on this host and listens (locally or globally/by IP)\n *\n * @param dbType database type\n * @param host configured db host - multihost (array) will always return false\n * @param checkIfLocalOnly if true the method checks if the server listens to local connections only; else also external connection options are checked\n * @returns true if a server listens on this host (locally or globally/by IP)\n */\nexport async function isLocalStatesDbServer(\n    dbType: string,\n    host: string | string[],\n    checkIfLocalOnly = false,\n): Promise<boolean> {\n    const hasServer = await statesDbHasServer(dbType);\n    if (!hasServer) {\n        return false; // if no server it can not be a local server\n    }\n\n    if (Array.isArray(host)) {\n        return false;\n    }\n\n    let result = host === 'localhost' || tools.isLocalAddress(host); // reachable locally only\n    if (!checkIfLocalOnly && !Array.isArray(host)) {\n        const ownIps = tools.findIPs();\n        result = result || tools.isListenAllAddress(host) || ownIps.includes(host);\n    }\n\n    return result;\n}\n\ninterface PerformStatesInterviewOptions {\n    /** The partial states db options */\n    config: ioBroker.StatesDatabaseOptions;\n    /** Db type, like redis */\n    dbType: string;\n}\n\n/**\n * Perform the states interview if one has been provided\n *\n * @param options db type and partial config\n * @returns the database options obtained by the answered questionnaire\n */\nexport async function performStatesInterview(\n    options: PerformStatesInterviewOptions,\n): Promise<ioBroker.StatesDatabaseOptions> {\n    const { dbType, config } = options;\n\n    const states = await import(`@iobroker/db-states-${dbType}`);\n    if (!states.interview) {\n        return config;\n    }\n\n    return states.interview(config satisfies Parameters<typeof interview>[0]);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAAA,sBAAe;AACf,kCAAsB;AAGtB,eAAsB,uBAAoB;AACtC,QAAM,SAAS,gBAAAA,QAAG,aAAa,kCAAM,kBAAiB,CAAE;AACxD,MAAI,CAAC,OAAO,QAAQ;AAChB,WAAO,SAAS,EAAE,MAAM,QAAO;EACnC;AAEA,MAAI;AACA,UAAM,UAAU,MAAM,OAAO,uBAAuB,OAAO,OAAO,IAAI,KAAK;AAC3E,WAAO;EACX,SAAS,GAAG;AACR,YAAQ,MAAM,EAAE,KAAK;AACrB,YAAQ,MAAM,+CAA+C,OAAO,OAAO,IAAI,cAAc;AAC7F,YAAQ,KAAK,GAAG;EACpB;AACJ;AAQA,eAAsB,kBAAkB,QAAc;AAClD,MAAI;AACA,UAAM,SAAS,MAAM,OAAO,uBAAuB,MAAM;AACzD,WAAO,CAAC,CAAC,OAAO;EACpB,QAAQ;AACJ,UAAM,IAAI,MAAM,uDAAuD,MAAM,EAAE;EACnF;AACJ;AAUA,eAAsB,sBAClB,QACA,MACA,mBAAmB,OAAK;AAExB,QAAM,YAAY,MAAM,kBAAkB,MAAM;AAChD,MAAI,CAAC,WAAW;AACZ,WAAO;EACX;AAEA,MAAI,MAAM,QAAQ,IAAI,GAAG;AACrB,WAAO;EACX;AAEA,MAAI,SAAS,SAAS,eAAe,kCAAM,eAAe,IAAI;AAC9D,MAAI,CAAC,oBAAoB,CAAC,MAAM,QAAQ,IAAI,GAAG;AAC3C,UAAM,SAAS,kCAAM,QAAO;AAC5B,aAAS,UAAU,kCAAM,mBAAmB,IAAI,KAAK,OAAO,SAAS,IAAI;EAC7E;AAEA,SAAO;AACX;AAeA,eAAsB,uBAClB,SAAsC;AAEtC,QAAM,EAAE,QAAQ,OAAM,IAAK;AAE3B,QAAM,SAAS,MAAM,OAAO,uBAAuB,MAAM;AACzD,MAAI,CAAC,OAAO,WAAW;AACnB,WAAO;EACX;AAEA,SAAO,OAAO,UAAU,MAAgD;AAC5E;",
  "names": ["fs"]
}
