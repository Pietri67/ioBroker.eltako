"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var states_exports = {};
__export(states_exports, {
  getStatesConstructor: () => getStatesConstructor,
  isLocalStatesDbServer: () => isLocalStatesDbServer,
  performStatesInterview: () => performStatesInterview,
  statesDbHasServer: () => statesDbHasServer
});
module.exports = __toCommonJS(states_exports);
var import_fs_extra = __toESM(require("fs-extra"), 1);
var import_js_controller_common = require("@iobroker/js-controller-common");
async function getStatesConstructor() {
  const config = import_fs_extra.default.readJSONSync(import_js_controller_common.tools.getConfigFileName());
  if (!config.states) {
    config.states = { type: "jsonl" };
  }
  try {
    const Client = (await import(`@iobroker/db-states-${config.states.type}`)).Client;
    return Client;
  } catch (e) {
    console.error(e.stack);
    console.error(`Installation broken or unknown states type: ${config.states.type} configured.`);
    process.exit(101);
  }
}
async function statesDbHasServer(dbType) {
  try {
    const states = await import(`@iobroker/db-states-${dbType}`);
    return !!states.Server;
  } catch {
    throw new Error(`Installation error or unknown states database type: ${dbType}`);
  }
}
async function isLocalStatesDbServer(dbType, host, checkIfLocalOnly = false) {
  const hasServer = await statesDbHasServer(dbType);
  if (!hasServer) {
    return false;
  }
  if (Array.isArray(host)) {
    return false;
  }
  let result = host === "localhost" || import_js_controller_common.tools.isLocalAddress(host);
  if (!checkIfLocalOnly && !Array.isArray(host)) {
    const ownIps = import_js_controller_common.tools.findIPs();
    result = result || import_js_controller_common.tools.isListenAllAddress(host) || ownIps.includes(host);
  }
  return result;
}
async function performStatesInterview(options) {
  const { dbType, config } = options;
  const states = await import(`@iobroker/db-states-${dbType}`);
  if (!states.interview) {
    return config;
  }
  return states.interview(config);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getStatesConstructor,
  isLocalStatesDbServer,
  performStatesInterview,
  statesDbHasServer
});
//# sourceMappingURL=states.js.map
