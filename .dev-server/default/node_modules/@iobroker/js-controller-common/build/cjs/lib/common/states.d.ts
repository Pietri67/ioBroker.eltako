import type { Client as StatesClient } from '@iobroker/db-states-redis';
export declare function getStatesConstructor(): Promise<typeof StatesClient>;
/**
 * Allows to find out if a given states dbType offers a server or not
 *
 * @param dbType database type
 * @returns true if a server class is available
 */
export declare function statesDbHasServer(dbType: string): Promise<boolean>;
/**
 * Allows to find out if a given states dbType offers a server which runs on this host and listens (locally or globally/by IP)
 *
 * @param dbType database type
 * @param host configured db host - multihost (array) will always return false
 * @param checkIfLocalOnly if true the method checks if the server listens to local connections only; else also external connection options are checked
 * @returns true if a server listens on this host (locally or globally/by IP)
 */
export declare function isLocalStatesDbServer(dbType: string, host: string | string[], checkIfLocalOnly?: boolean): Promise<boolean>;
interface PerformStatesInterviewOptions {
    /** The partial states db options */
    config: ioBroker.StatesDatabaseOptions;
    /** Db type, like redis */
    dbType: string;
}
/**
 * Perform the states interview if one has been provided
 *
 * @param options db type and partial config
 * @returns the database options obtained by the answered questionnaire
 */
export declare function performStatesInterview(options: PerformStatesInterviewOptions): Promise<ioBroker.StatesDatabaseOptions>;
export {};
//# sourceMappingURL=states.d.ts.map