"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var tools_exports = {};
__export(tools_exports, {
  getInstancesOrderedByStartPrio: () => getInstancesOrderedByStartPrio,
  isInstalledFromNpm: () => isInstalledFromNpm
});
module.exports = __toCommonJS(tools_exports);
var import_tools = require("@iobroker/js-controller-common-db/tools");
async function getInstancesOrderedByStartPrio(objects, logger, logPrefix = "") {
  const instances = { 1: [], 2: [], 3: [], admin: [] };
  const allowedTiers = [1, 2, 3];
  if (logPrefix) {
    logPrefix += " ";
  }
  let doc = { rows: [] };
  try {
    doc = await objects.getObjectViewAsync("system", "instance", {
      startkey: "system.adapter.",
      endkey: "system.adapter.\u9999"
    });
  } catch (e) {
    if (e.message?.startsWith("Cannot find ")) {
      logger.error(`${logPrefix} _design/system missing - call node ${import_tools.appName}.js setup`);
    } else {
      logger.error(`${logPrefix} Can not get instances: ${e.message}`);
    }
  }
  if (!doc.rows || doc.rows.length === 0) {
    logger.info(`${logPrefix} no instances found`);
  } else {
    for (const row of doc.rows) {
      if (row?.value) {
        if (row.value._id.startsWith("system.adapter.admin")) {
          instances.admin.push(row.value);
        } else if (row.value.common?.tier !== void 0 && allowedTiers.includes(Math.round(row.value.common.tier))) {
          instances[row.value.common.tier].push(row.value);
        } else {
          instances["3"].push(row.value);
        }
      }
    }
  }
  return [...instances.admin, ...instances["1"], ...instances["2"], ...instances["3"]];
}
function isInstalledFromNpm(options) {
  const { adapterName, installedFrom } = options;
  if (installedFrom === void 0) {
    return true;
  }
  return installedFrom.startsWith(`${import_tools.appName.toLowerCase()}.${adapterName}`);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getInstancesOrderedByStartPrio,
  isInstalledFromNpm
});
//# sourceMappingURL=tools.js.map
