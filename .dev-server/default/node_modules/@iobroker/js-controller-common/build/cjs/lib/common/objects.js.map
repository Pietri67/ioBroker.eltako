{
  "version": 3,
  "sources": ["../../../../src/lib/common/objects.ts"],
  "sourcesContent": ["import fs from 'fs-extra';\nimport { tools } from '@iobroker/js-controller-common';\nimport type { Client as ObjectsClient, interview } from '@iobroker/db-objects-redis';\n\nexport async function getObjectsConstructor(): Promise<typeof ObjectsClient> {\n    const config = fs.readJSONSync(tools.getConfigFileName());\n    if (!config.objects) {\n        config.objects = { type: 'jsonl' };\n    }\n\n    try {\n        const Client = (await import(`@iobroker/db-objects-${config.objects.type}`)).Client;\n        return Client;\n    } catch (e) {\n        console.error(e.stack);\n        console.error(`Installation broken or unknown objects type: ${config.objects.type} configured`);\n        process.exit(101);\n    }\n}\n\n/**\n * Allows to find out if a given objects dbType offers a server which runs on this host and listens (locally or globally/by IP)\n *\n * @param dbType database type\n * @param host configured db host - multihost (array) will always return false\n * @param checkIfLocalOnly if true the method checks if the server listens to local connections only; else also external connection options are checked\n * @returns true if a server listens on this host (locally or globally/by IP)\n */\nexport async function isLocalObjectsDbServer(\n    dbType: string,\n    host: string | string[],\n    checkIfLocalOnly: boolean = false,\n): Promise<boolean> {\n    const hasServer = await objectsDbHasServer(dbType);\n    if (!hasServer) {\n        return false; // if no server it can not be a local server\n    }\n\n    if (Array.isArray(host)) {\n        return false;\n    }\n\n    let result = host === 'localhost' || tools.isLocalAddress(host); // reachable locally only\n    if (!checkIfLocalOnly) {\n        const ownIps = tools.findIPs();\n        result = result || tools.isListenAllAddress(host) || ownIps.includes(host);\n    }\n\n    return result;\n}\n\n/**\n * Allows to find out if a given objects dbType offers a server or not\n *\n * @param dbType database type\n * @returns true if a server class is available\n */\nexport async function objectsDbHasServer(dbType: string): Promise<boolean> {\n    try {\n        const objects = await import(`@iobroker/db-objects-${dbType}`);\n        return !!objects.Server;\n    } catch (e) {\n        console.error(e);\n        throw new Error(`Installation error or unknown objects database type: ${dbType}`);\n    }\n}\n\ninterface PerformObjectsInterviewOptions {\n    /** The partial states db options */\n    config: ioBroker.ObjectsDatabaseOptions;\n    /** Db type, like redis */\n    dbType: string;\n}\n\n/**\n * Perform the objects interview if one has been provided\n *\n * @param options dbtype and the partial config\n * @returns the database options obtained by the answered questionnaire\n */\nexport async function performObjectsInterview(\n    options: PerformObjectsInterviewOptions,\n): Promise<ioBroker.ObjectsDatabaseOptions> {\n    const { dbType, config } = options;\n\n    const objects = await import(`@iobroker/db-objects-${dbType}`);\n    if (!objects.interview) {\n        return config;\n    }\n\n    return objects.interview(config satisfies Parameters<typeof interview>[0]);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAAA,sBAAe;AACf,kCAAsB;AAGtB,eAAsB,wBAAqB;AACvC,QAAM,SAAS,gBAAAA,QAAG,aAAa,kCAAM,kBAAiB,CAAE;AACxD,MAAI,CAAC,OAAO,SAAS;AACjB,WAAO,UAAU,EAAE,MAAM,QAAO;EACpC;AAEA,MAAI;AACA,UAAM,UAAU,MAAM,OAAO,wBAAwB,OAAO,QAAQ,IAAI,KAAK;AAC7E,WAAO;EACX,SAAS,GAAG;AACR,YAAQ,MAAM,EAAE,KAAK;AACrB,YAAQ,MAAM,gDAAgD,OAAO,QAAQ,IAAI,aAAa;AAC9F,YAAQ,KAAK,GAAG;EACpB;AACJ;AAUA,eAAsB,uBAClB,QACA,MACA,mBAA4B,OAAK;AAEjC,QAAM,YAAY,MAAM,mBAAmB,MAAM;AACjD,MAAI,CAAC,WAAW;AACZ,WAAO;EACX;AAEA,MAAI,MAAM,QAAQ,IAAI,GAAG;AACrB,WAAO;EACX;AAEA,MAAI,SAAS,SAAS,eAAe,kCAAM,eAAe,IAAI;AAC9D,MAAI,CAAC,kBAAkB;AACnB,UAAM,SAAS,kCAAM,QAAO;AAC5B,aAAS,UAAU,kCAAM,mBAAmB,IAAI,KAAK,OAAO,SAAS,IAAI;EAC7E;AAEA,SAAO;AACX;AAQA,eAAsB,mBAAmB,QAAc;AACnD,MAAI;AACA,UAAM,UAAU,MAAM,OAAO,wBAAwB,MAAM;AAC3D,WAAO,CAAC,CAAC,QAAQ;EACrB,SAAS,GAAG;AACR,YAAQ,MAAM,CAAC;AACf,UAAM,IAAI,MAAM,wDAAwD,MAAM,EAAE;EACpF;AACJ;AAeA,eAAsB,wBAClB,SAAuC;AAEvC,QAAM,EAAE,QAAQ,OAAM,IAAK;AAE3B,QAAM,UAAU,MAAM,OAAO,wBAAwB,MAAM;AAC3D,MAAI,CAAC,QAAQ,WAAW;AACpB,WAAO;EACX;AAEA,SAAO,QAAQ,UAAU,MAAgD;AAC7E;",
  "names": ["fs"]
}
