{
  "version": 3,
  "sources": ["../../../../src/lib/common/password.ts"],
  "sourcesContent": ["/**\n *\n *      password hash and check\n *\n *      7'2014-2024 Bluefox <dogafox@gmail.com>\n *             2014 hobbyquaker <hq@ccu.io>\n *\n *      derived from https://github.com/florianheinemann/password-hash-and-salt/ (MIT License)\n *\n *      The created hash is of the following format: <algorithm>$<iterations>$<hash>$<salt>\n *\n *      Usage Example:\n \n var password = require('./lib/password.js');\n \n password('test').hash(null, null, function (err, res) {\n    console.log(res);\n \n    password('test').check(res, function (err, res) {\n        console.log('test: ' + res);\n    });\n \n    password('muh').check(res, function (err, res) {\n        console.log('muh: ' + res);\n    });\n \n });\n \n *\n */\n\nimport crypto from 'node:crypto';\n\nexport interface PasswordReturnValue {\n    complexity: (password: string, callback: (isComplex: boolean) => void) => boolean;\n    check: (hashedPassword: string, callback: (err?: Error | null, isOk?: boolean) => void) => void;\n    hash: (\n        salt: string | null,\n        iterations: number | null,\n        callback: (err?: Error | null, hash?: string) => void,\n    ) => void;\n}\n\nexport function password(pw: string): PasswordReturnValue {\n    return {\n        hash: (salt, iterations, callback) => {\n            salt = salt || crypto.randomBytes(16).toString('hex');\n            iterations = iterations || 10_000;\n\n            crypto.pbkdf2(pw, salt, iterations, 256, 'sha256', (err, key) => {\n                if (err) {\n                    return callback(err);\n                }\n\n                callback(null, `pbkdf2$${iterations}$${key.toString('hex')}$${salt}`);\n            });\n        },\n        check: function (hashedPassword, callback) {\n            if (!hashedPassword) {\n                return callback(null, false);\n            }\n            const key = hashedPassword.split('$');\n            if (key.length !== 4 || !key[2] || !key[3]) {\n                return callback(new Error('Hash not formatted correctly'));\n            }\n            if (key[0] !== 'pbkdf2') {\n                return callback(new Error('Unknown'));\n            }\n\n            this.hash(key[3], parseInt(key[1], 10), (error, newHash) => {\n                if (error) {\n                    callback(error);\n                } else {\n                    callback(null, newHash === hashedPassword);\n                }\n            });\n        },\n        complexity: (password, callback) => {\n            let result = false;\n            if (typeof password === 'string') {\n                result =\n                    password.length >= 8 && // minimum length is 8\n                    /\\d/.test(password) && // contains at least one digit\n                    /[a-z]/.test(password) && // contains at least one lower case letter\n                    /[A-Z]/.test(password); // contains at least one upper case letter\n            }\n            typeof callback === 'function' && callback(result);\n            return result; // true if the complexity OK\n        },\n    };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AA+BA,yBAAmB;AAYb,SAAU,SAAS,IAAU;AAC/B,SAAO;IACH,MAAM,CAAC,MAAM,YAAY,aAAY;AACjC,aAAO,QAAQ,mBAAAA,QAAO,YAAY,EAAE,EAAE,SAAS,KAAK;AACpD,mBAAa,cAAc;AAE3B,yBAAAA,QAAO,OAAO,IAAI,MAAM,YAAY,KAAK,UAAU,CAAC,KAAK,QAAO;AAC5D,YAAI,KAAK;AACL,iBAAO,SAAS,GAAG;QACvB;AAEA,iBAAS,MAAM,UAAU,UAAU,IAAI,IAAI,SAAS,KAAK,CAAC,IAAI,IAAI,EAAE;MACxE,CAAC;IACL;IACA,OAAO,SAAU,gBAAgB,UAAQ;AACrC,UAAI,CAAC,gBAAgB;AACjB,eAAO,SAAS,MAAM,KAAK;MAC/B;AACA,YAAM,MAAM,eAAe,MAAM,GAAG;AACpC,UAAI,IAAI,WAAW,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG;AACxC,eAAO,SAAS,IAAI,MAAM,8BAA8B,CAAC;MAC7D;AACA,UAAI,IAAI,CAAC,MAAM,UAAU;AACrB,eAAO,SAAS,IAAI,MAAM,SAAS,CAAC;MACxC;AAEA,WAAK,KAAK,IAAI,CAAC,GAAG,SAAS,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,YAAW;AACvD,YAAI,OAAO;AACP,mBAAS,KAAK;QAClB,OAAO;AACH,mBAAS,MAAM,YAAY,cAAc;QAC7C;MACJ,CAAC;IACL;IACA,YAAY,CAACC,WAAU,aAAY;AAC/B,UAAI,SAAS;AACb,UAAI,OAAOA,cAAa,UAAU;AAC9B,iBACIA,UAAS,UAAU;QACnB,KAAK,KAAKA,SAAQ;QAClB,QAAQ,KAAKA,SAAQ;QACrB,QAAQ,KAAKA,SAAQ;MAC7B;AACA,aAAO,aAAa,cAAc,SAAS,MAAM;AACjD,aAAO;IACX;;AAER;",
  "names": ["crypto", "password"]
}
