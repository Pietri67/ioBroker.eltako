{
  "version": 3,
  "sources": ["../../../../src/lib/common/session.ts"],
  "sourcesContent": ["type Session = any;\n\n// TODO: in the long term move this file somewhere where we have types access it is nowhere used in controller itself and just exported for adapters so it should go to js-controller-adapter package\ninterface AdapterStoreOptions {\n    /** The ioBroker adapter */\n    adapter: any;\n    /** The cookie */\n    cookie: any;\n}\n\n/**\n * Function to create an AdapterStore constructor\n *\n * @param session The session object\n * @param defaultTtl the default time to live\n * @returns the constructor to create a new AdapterStore\n */\nexport function createAdapterStore(session: Session, defaultTtl = 3600): any {\n    const Store = session.Store;\n\n    class AdapterStore extends Store {\n        constructor(options: AdapterStoreOptions) {\n            super(options);\n\n            this.adapter = options.adapter;\n\n            options = options || {};\n            if (!options.cookie) {\n                options.cookie = { maxAge: defaultTtl };\n            }\n            Store.call(this, options);\n        }\n\n        /**\n         * Attempt to fetch session by the given `sid`.\n         *\n         * @param sid Session ID\n         * @param fn callback\n         */\n        get(sid: string, fn: (err?: any, obj?: any) => void): void {\n            this.adapter.getSession(sid, (obj: any) => {\n                if (obj) {\n                    if (fn) {\n                        return fn(null, obj);\n                    }\n                } else {\n                    if (fn) {\n                        return fn();\n                    }\n                }\n            });\n        }\n\n        /**\n         * Commit the given `sess` object associated with the given `sid`.\n         *\n         * @param sid Session ID\n         * @param ttl Time to live\n         * @param sess the session\n         * @param fn callback\n         */\n        set(sid: string, ttl: number, sess: Session, fn: (args: any) => void): void {\n            if (typeof ttl === 'object') {\n                fn = sess;\n                sess = ttl;\n                // analyse if the session is stored directly from express session\n                ttl =\n                    sess && sess.cookie && sess.cookie.originalMaxAge\n                        ? Math.round(sess.cookie.originalMaxAge / 1000)\n                        : defaultTtl;\n            }\n            ttl = ttl || defaultTtl;\n            this.adapter.setSession(sid, ttl, sess, function () {\n                // @ts-expect-error fix later\n                // eslint-disable-next-line prefer-rest-params\n                fn && fn.apply(this, arguments);\n            }); // do not use here => !!!\n        }\n\n        /**\n         * Destroy the session associated with the given `sid`.\n         *\n         * @param sid Session ID\n         * @param fn callback\n         */\n        destroy(sid: string, fn: () => void): void {\n            this.adapter.destroySession(sid, fn);\n        }\n    }\n\n    return AdapterStore;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAUA;;;;;AAOM,SAAU,mBAAmB,SAAkB,aAAa,MAAI;AAClE,QAAM,QAAQ,QAAQ;EAEtB,MAAM,qBAAqB,MAAK;IAC5B,YAAY,SAA4B;AACpC,YAAM,OAAO;AAEb,WAAK,UAAU,QAAQ;AAEvB,gBAAU,WAAW,CAAA;AACrB,UAAI,CAAC,QAAQ,QAAQ;AACjB,gBAAQ,SAAS,EAAE,QAAQ,WAAU;MACzC;AACA,YAAM,KAAK,MAAM,OAAO;IAC5B;;;;;;;IAQA,IAAI,KAAa,IAAkC;AAC/C,WAAK,QAAQ,WAAW,KAAK,CAAC,QAAY;AACtC,YAAI,KAAK;AACL,cAAI,IAAI;AACJ,mBAAO,GAAG,MAAM,GAAG;UACvB;QACJ,OAAO;AACH,cAAI,IAAI;AACJ,mBAAO,GAAE;UACb;QACJ;MACJ,CAAC;IACL;;;;;;;;;IAUA,IAAI,KAAa,KAAa,MAAe,IAAuB;AAChE,UAAI,OAAO,QAAQ,UAAU;AACzB,aAAK;AACL,eAAO;AAEP,cACI,QAAQ,KAAK,UAAU,KAAK,OAAO,iBAC7B,KAAK,MAAM,KAAK,OAAO,iBAAiB,GAAI,IAC5C;MACd;AACA,YAAM,OAAO;AACb,WAAK,QAAQ,WAAW,KAAK,KAAK,MAAM,WAAA;AAGpC,cAAM,GAAG,MAAM,MAAM,SAAS;MAClC,CAAC;IACL;;;;;;;IAQA,QAAQ,KAAa,IAAc;AAC/B,WAAK,QAAQ,eAAe,KAAK,EAAE;IACvC;;AAGJ,SAAO;AACX;",
  "names": []
}
