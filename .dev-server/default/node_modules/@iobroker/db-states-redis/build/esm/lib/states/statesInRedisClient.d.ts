/**
 *      States DB in redis - Client
 *
 *      Copyright 2013-2024 bluefox <dogafox@gmail.com>
 *      Copyright 2013-2014 hobbyquaker
 *
 *      MIT License
 *
 */
import type { InternalLogger } from '@iobroker/js-controller-common-db/tools';
import type { DbStatus, ConnectionOptions } from '@iobroker/db-base/inMemFileDB';
interface LogObject {
    /** id of the source instance */
    from: string;
    /** log level */
    severity: string;
    /** timestamp */
    ts: number;
    /** actual content */
    message: string;
}
type UserChangeFunction = (id: string, state: ioBroker.State | null) => void;
type ChangeFunction = (id: string, state: ioBroker.State | ioBroker.Message | null) => void;
export interface StatesSettings {
    connected?: () => void;
    disconnected?: () => void;
    changeUser?: UserChangeFunction;
    change?: ChangeFunction;
    connection: ConnectionOptions;
    autoConnect?: boolean;
    logger?: InternalLogger;
    hostname?: string;
    namespace?: string;
    metaNamespace?: string;
    namespaceSession?: string;
    namespaceLog?: string;
    namespaceMsg?: string;
    redisNamespace?: string;
}
export declare class StateRedisClient {
    private settings;
    private readonly namespaceRedis;
    private readonly namespaceRedisL;
    namespaceMsg: string;
    private readonly namespaceLog;
    private readonly namespaceSession;
    private readonly metaNamespace;
    private globalMessageId;
    private globalLogId;
    private readonly namespace;
    private readonly supportedProtocolVersions;
    private stop;
    private client;
    /** Client for user events */
    private sub;
    /** Client for system events */
    private subSystem;
    private log;
    private activeProtocolVersion?;
    private readonly userSubscriptions;
    /** System level subscriptions value true means messagebox is subscribed */
    private readonly systemSubscriptions;
    constructor(settings: StatesSettings);
    /**
     * Checks if we are allowed to start and sets the protocol version accordingly
     *
     */
    _determineProtocolVersion(): Promise<void>;
    connectDb(): void;
    getStatus(): DbStatus;
    setState(id: string, state: ioBroker.SettableState | ioBroker.StateValue): Promise<string>;
    /** @deprecated migrate to promisified version (without callback) */
    setState(id: string, state: ioBroker.SettableState | ioBroker.StateValue, callback: (err: Error | null | undefined, id: string) => void): Promise<void>;
    /**
     * Promise-version of setState
     *
     * @param id
     * @param state
     * @deprecated use version without `Async` postfix
     */
    setStateAsync(id: string, state: ioBroker.SettableState | ioBroker.StateValue): Promise<string>;
    setRawState(id: string, state: ioBroker.SettableState): Promise<string>;
    getState(id: string): ioBroker.GetStatePromise;
    getState(id: string, callback?: (err: Error | null | undefined, state?: ioBroker.State | null) => void): Promise<ioBroker.CallbackReturnTypeOf<ioBroker.GetStateCallback> | void>;
    /**
     * Promise-version of getState
     *
     * @param id
     */
    getStateAsync(id: string): Promise<ioBroker.CallbackReturnTypeOf<ioBroker.GetStateCallback> | void>;
    getStates(keys: string[], callback?: undefined, dontModify?: boolean): Promise<(ioBroker.State | null)[]>;
    getStates(keys: string[], callback: (err: Error | undefined | null, states?: (ioBroker.State | null)[]) => void, dontModify?: boolean): Promise<void>;
    getStates(keys: string[], callback: (err: Error | undefined | null, states?: (ioBroker.State | null)[]) => void, dontModify?: boolean): Promise<void>;
    /**
     * @param keys - array of keys which will be deleted from db
     * @param callback function to be executed after keys have been deleted
     */
    _destroyDBHelper(keys: string[], callback?: ioBroker.ErrorCallback): Promise<void>;
    /**
     * @param callback cb function to be executed after DB has been destroyed
     */
    destroyDB(callback?: ioBroker.ErrorCallback): Promise<void>;
    destroy(): Promise<void>;
    delState(id: string, callback?: ioBroker.DeleteStateCallback): Promise<ioBroker.CallbackReturnTypeOf<ioBroker.DeleteStateCallback> | void>;
    getKeys(pattern: string, callback?: undefined, dontModify?: boolean): Promise<ioBroker.CallbackReturnTypeOf<ioBroker.GetKeysCallback>>;
    getKeys(pattern: string, callback: ioBroker.GetKeysCallback, dontModify?: boolean): Promise<void>;
    subscribe(pattern: string, callback?: ioBroker.ErrorCallback): Promise<void>;
    subscribe(pattern: string, asUser: boolean, callback?: ioBroker.ErrorCallback): Promise<void>;
    /**
     * @param pattern
     * @param callback callback function (optional)
     */
    subscribeUser(pattern: string, callback?: ioBroker.ErrorCallback): Promise<void>;
    unsubscribe(pattern: string, asUser: boolean, callback?: ioBroker.ErrorCallback): Promise<void>;
    unsubscribe(pattern: string, callback?: ioBroker.ErrorCallback): Promise<void>;
    /**
     * @param pattern
     * @param callback callback function (optional)
     */
    unsubscribeUser(pattern: string, callback?: ioBroker.ErrorCallback): Promise<void>;
    pushMessage(id: string, message: ioBroker.SendableMessage): Promise<void>;
    subscribeMessage(id: string, callback?: ioBroker.ErrorCallback): Promise<void>;
    unsubscribeMessage(id: string, callback?: ioBroker.ErrorCallback): Promise<void>;
    pushLog(id: string, log: LogObject, callback?: (err: Error | undefined | null, id?: string) => void): Promise<string | void>;
    subscribeLog(id: string, callback?: ioBroker.ErrorCallback): Promise<void>;
    unsubscribeLog(id: string, callback?: ioBroker.ErrorCallback): Promise<void>;
    getSession(id: string, callback: (err: Error | undefined | null, session?: Record<string, any> | null) => void): Promise<Record<string, any> | null | void>;
    setSession(id: string, expireS: number, obj: Record<string, any>, callback?: ioBroker.ErrorCallback): Promise<void>;
    destroySession(id: string, callback?: ioBroker.ErrorCallback): Promise<void>;
    /**
     * Returns the protocol version from DB
     *
     */
    getProtocolVersion(): Promise<string | null>;
    /**
     * Sets the protocol version to the DB
     *
     * @param version - protocol version
     */
    setProtocolVersion(version: number): Promise<void>;
}
export {};
//# sourceMappingURL=statesInRedisClient.d.ts.map