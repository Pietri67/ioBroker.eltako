"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var objectsInMemServerClass_exports = {};
__export(objectsInMemServerClass_exports, {
  ObjectsInMemoryServerClass: () => ObjectsInMemoryServerClass
});
module.exports = __toCommonJS(objectsInMemServerClass_exports);
var import_db_objects_redis = require("@iobroker/db-objects-redis");
var import_objectsInMemServerRedis = require("./objectsInMemServerRedis.js");
class ObjectsInMemoryServerClass extends import_db_objects_redis.Client {
  constructor(settings) {
    settings.autoConnect = false;
    super(settings);
    const serverSettings = {
      namespace: settings.namespace ? `${settings.namespace}-Server` : "Server",
      connection: settings.connection,
      logger: settings.logger,
      hostname: settings.hostname,
      connected: () => {
        this.connectDb();
      }
    };
    this.objectsServer = new import_objectsInMemServerRedis.ObjectsInMemoryServer(serverSettings);
  }
  async destroy() {
    await super.destroy();
    await this.objectsServer.destroy();
  }
  getStatus() {
    return this.objectsServer.getStatus();
  }
  syncFileDirectory(limitId) {
    return this.objectsServer.syncFileDirectory(limitId);
  }
  dirExists(id, name) {
    return this.objectsServer.dirExists(id, name);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ObjectsInMemoryServerClass
});
//# sourceMappingURL=objectsInMemServerClass.js.map
