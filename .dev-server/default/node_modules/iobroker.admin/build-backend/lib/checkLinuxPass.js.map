{"version":3,"file":"checkLinuxPass.js","sourceRoot":"","sources":["../../src/lib/checkLinuxPass.ts"],"names":[],"mappings":"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","sourcesContent":["import { spawn } from 'child_process';\n\nconst WELL_KNOWN_CREDENTIALS = [\n    ['root', 'root'],\n    ['admin', 'admin'],\n    ['admin', 'default'],\n    ['root', 'default'],\n    ['iob', '2024=smart!'],\n    ['pi', 'pi'],\n    ['pi', '12345'],\n    ['pi', 'raspberry'],\n    ['pi', 'default'],\n    ['pi', 'pi12345'],\n];\n\n// Function to execute 'su' command and provide password\nfunction checkLinuxPassword(login: string, password: string): Promise<boolean> {\n    // Check the os\n    if (process.platform !== 'linux') {\n        console.error('This function is only available on Linux');\n        return Promise.resolve(false);\n    }\n\n    if (login === 'Password:' || login === 'failure') {\n        console.error('This function requires a login name');\n        return Promise.resolve(false);\n    }\n    console.log(`\\n[LOG] -------- Check ${login}/${password}`);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const su = spawn('su', [login]);\n            let closed = false;\n            let result = false;\n            let responseTimeout: NodeJS.Timeout | null = setTimeout(() => {\n                closed = true;\n                responseTimeout = null;\n                su.kill();\n            }, 3000);\n\n            function _checkPassword(data: string): void {\n                if (!responseTimeout || closed) {\n                    return;\n                }\n                data = data.replace(/\\r/g, ' ').replace(/\\n/g, ' ').trim();\n                console.log(`[STDX] \"${data}\"`);\n                if (data.endsWith(':')) {\n                    try {\n                        su.stdin?.write(`${password}\\n`);\n                    } catch {\n                        return;\n                    }\n                    setTimeout(() => {\n                        if (!responseTimeout || closed) {\n                            return;\n                        }\n                        console.log(`[LOG] write whoami`);\n                        try {\n                            su.stdin?.write(`whoami\\n`);\n                        } catch {\n                            // ignore\n                        }\n                    }, 50);\n                } else if (data === login) {\n                    result = true;\n                    su.kill();\n                    // todo: add ru, uk, pt,....\n                } else if (data.toLowerCase().includes('failure') || data.toLowerCase().includes('fehler')) {\n                    su.kill();\n                }\n            }\n            su.stdin?.on('error', (): void => {\n                closed = true;\n            });\n            su.stdout?.on('error', (): void => {\n                closed = true;\n            });\n            su.stderr?.on('error', (): void => {\n                closed = true;\n            });\n            su.stdin?.on('finish', (): void => {\n                closed = true;\n            });\n            su.stdout?.on('finish', (): void => {\n                closed = true;\n            });\n            su.stderr?.on('finish', (): void => {\n                closed = true;\n            });\n            su.stdin?.on('close', (): void => {\n                closed = true;\n            });\n            su.stdout?.on('close', (): void => {\n                closed = true;\n            });\n            su.stderr?.on('close', (): void => {\n                closed = true;\n            });\n\n            // Listen for data on stdout\n            su.stdout.on('data', data => {\n                if (data && responseTimeout) {\n                    _checkPassword(data.toString());\n                }\n            });\n\n            // Listen for data on stderr\n            su.stderr.on('data', data => {\n                if (data && responseTimeout) {\n                    _checkPassword(data.toString());\n                }\n            });\n\n            // Listen for the close event\n            su.on('close', () => {\n                closed = true;\n                console.log(`[LOG] -------- closed with result: ${result}\\n`);\n                if (responseTimeout) {\n                    clearTimeout(responseTimeout);\n                    responseTimeout = null;\n                }\n                resolve(result);\n            });\n        } catch (e: unknown) {\n            closed = true;\n            console.error(`[LOG] -------- Error by execution: ${(e as Error).message}\\n`);\n            reject(new Error(e as string));\n        }\n    });\n}\n\n/** Check if the system has well-known passwords */\nexport async function checkWellKnownPasswords(): Promise<{ login: string; password: string } | null> {\n    // Check the os\n    if (process.platform !== 'linux') {\n        console.error('This function is only available on Linux');\n        throw new Error('This function is only available on Linux');\n    }\n    for (const [login, password] of WELL_KNOWN_CREDENTIALS) {\n        if (await checkLinuxPassword(login, password)) {\n            return { login, password };\n        }\n    }\n    return null;\n}\n\n/*\npi@NanoPi-R5S:/opt$ su pi\nPassword: [OLD PASSWORD]\\n\n\npi@NanoPi-R5S:/opt$ passwd\nChanging password for pi.\nCurrent password: [OLD PASSWORD]\\n\n\nNew password: [NEW PASSWORD]\\n\n\nRetype new password: [NEW PASSWORD]\\n\n\nThe password has not been changed.\n\nNew password:\nRetype new password:\n\nYou must choose a longer password.\n\nNew password:\nRetype new password:\n\npasswd: password updated successfully\npi@NanoPi-R5S:/opt$ exit\n*/\n\n/*\nÄndern des Passworts für pi.\nGeben Sie das aktuelle Passwort ein:\npasswd: Fehler beim Ändern des Authentifizierungstoken\npasswd: Passwort nicht geändert\npi@NanoPi-R5S:~$ passwd pi\nÄndern des Passworts für pi.\nGeben Sie das aktuelle Passwort ein:\nGeben Sie ein neues Passwort ein:\nGeben Sie das neue Passwort erneut ein:\npasswd: Passwort erfolgreich geändert\n\n */\nconst STATES = {\n    S_0_SU_WAIT_PROMPT: 0,\n    S_1_PASSWD_WAIT_PROMPT_CURRENT_PASSWORD: 1,\n    S_2_PASSWD_WAIT_PROMPT_NEW_PASSWORD: 2,\n    S_3_PASSWD_WAIT_PROMPT_RETYPE_NEW_PASSWORD: 3,\n    S_4_PASSWD_WAIT_RESPONSE: 4,\n};\n\nexport function setLinuxPassword(login: string, oldPassword: string, newPassword: string): Promise<true | string> {\n    return new Promise(resolve => {\n        if (WELL_KNOWN_CREDENTIALS.find(item => item[0] === newPassword || item[1] === newPassword)) {\n            resolve('New password is well-known too');\n            return;\n        }\n        try {\n            const su = spawn('su', [login]);\n            let result: true | string = 'Cannot change password';\n            let responseTimeout = setTimeout(() => {\n                responseTimeout = null;\n                result = 'Timeout';\n                su.kill();\n            }, 3000);\n\n            let state = STATES.S_0_SU_WAIT_PROMPT;\n\n            function _checkPassword(data: string): void {\n                data = data.replace(/\\r/g, ' ').replace(/\\n/g, ' ').trim();\n                console.log(`[STDX]: ${data}`);\n                if (state === STATES.S_0_SU_WAIT_PROMPT) {\n                    // Password: [OLD PASSWORD]\\n\n                    if (data.endsWith(':')) {\n                        console.log(`[LOG]: received request to enter old password`);\n                        su.stdin.write(`${oldPassword}\\n`);\n                        setTimeout(() => {\n                            state = STATES.S_1_PASSWD_WAIT_PROMPT_CURRENT_PASSWORD;\n                            su.stdin.write(`passwd\\n`);\n                        }, 50);\n                        // todo: add ru, uk, pt,....\n                    } else if (data.toLowerCase().includes('failure') || data.toLowerCase().includes('fehler')) {\n                        console.log(`[LOG]: received failure message`);\n                        result = 'Old password not accepted';\n                        su.kill();\n                    }\n                } else if (state === STATES.S_1_PASSWD_WAIT_PROMPT_CURRENT_PASSWORD) {\n                    // Changing password for pi.\n                    // Current password: [OLD PASSWORD]\\n\n                    if (data.endsWith(':')) {\n                        console.log(`[LOG]: received request to enter new password`);\n                        state = STATES.S_2_PASSWD_WAIT_PROMPT_NEW_PASSWORD;\n                        su.stdin.write(`${oldPassword}\\n`);\n                    }\n                } else if (state === STATES.S_2_PASSWD_WAIT_PROMPT_NEW_PASSWORD) {\n                    // New password: [NEW PASSWORD]\\n\n                    if (data.endsWith(':')) {\n                        console.log(`[LOG]: received request to enter new password`);\n                        state = STATES.S_3_PASSWD_WAIT_PROMPT_RETYPE_NEW_PASSWORD;\n                        su.stdin.write(`${newPassword}\\n`);\n                    }\n                } else if (state === STATES.S_3_PASSWD_WAIT_PROMPT_RETYPE_NEW_PASSWORD) {\n                    // Retype new password: [NEW PASSWORD]\\n\n                    if (data.endsWith(':')) {\n                        console.log(`[LOG]: received request to repeat new password`);\n                        state = STATES.S_4_PASSWD_WAIT_RESPONSE;\n                        su.stdin.write(`${newPassword}\\n`);\n                    }\n                } else if (state === STATES.S_4_PASSWD_WAIT_RESPONSE) {\n                    // todo: add ru, uk, pt,....\n                    if (data.toLowerCase().includes('successfully') || data.toLowerCase().includes('erfolgreich')) {\n                        result = true;\n                    } else {\n                        // failure\n                        result = data;\n                    }\n                    su.kill();\n                }\n            }\n\n            // Listen for data on stdout\n            su.stdout.on('data', data => _checkPassword(data.toString()));\n\n            // Listen for data on stderr\n            su.stderr.on('data', data => _checkPassword(data.toString()));\n\n            // Listen for the close event\n            su.on('close', () => {\n                responseTimeout && clearTimeout(responseTimeout);\n                responseTimeout = null;\n                resolve(result);\n            });\n        } catch (e) {\n            console.error(`Cannot change password: ${e.toString()}`);\n            throw new Error(e);\n        }\n    });\n}\n"]}