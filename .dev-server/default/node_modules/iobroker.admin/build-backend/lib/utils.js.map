{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/lib/utils.ts"],"names":[],"mappings":"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","sourcesContent":["/** Url where controller changelog is reachable */\nexport const CONTROLLER_CHANGELOG_URL = 'https://github.com/ioBroker/ioBroker.js-controller/blob/master/CHANGELOG.md';\n\n/** All possible auto upgrade settings */\nexport const AUTO_UPGRADE_SETTINGS: ioBroker.AutoUpgradePolicy[] = ['none', 'patch', 'minor', 'major'];\n\n/** Mapping to make it more understandable which upgrades are allowed */\nexport const AUTO_UPGRADE_OPTIONS_MAPPING: Record<ioBroker.AutoUpgradePolicy, string> = {\n    none: 'none',\n    patch: 'patch',\n    minor: 'patch & minor',\n    major: 'patch, minor & major',\n};\n\nfunction ip2int(ip: string): number {\n    return ip.split('.').reduce((ipInt, octet) => (ipInt << 8) + parseInt(octet, 10), 0) >>> 0;\n}\n\nfunction findNetworkAddressOfHost(obj: ioBroker.HostObject, localIp: string): null | string {\n    const networkInterfaces = obj?.native?.hardware?.networkInterfaces;\n    if (!networkInterfaces) {\n        return null;\n    }\n\n    let hostIp;\n    for (const networkInterface of Object.values(networkInterfaces)) {\n        if (!networkInterface) {\n            continue;\n        }\n        for (let i = 0; i < networkInterface.length; i++) {\n            const ip = networkInterface[i];\n            if (ip.internal) {\n                return;\n            }\n            if (localIp.includes(':') && ip.family !== 'IPv6') {\n                return;\n            }\n            if (localIp.includes('.') && !localIp.match(/[^.\\d]/) && ip.family !== 'IPv4') {\n                return;\n            }\n            if (localIp === '127.0.0.0' || localIp === 'localhost' || localIp.match(/[^.\\d]/)) {\n                // if DNS name\n                hostIp = ip.address;\n            } else if (\n                ip.family === 'IPv4' &&\n                localIp.includes('.') &&\n                (ip2int(localIp) & ip2int(ip.netmask)) === (ip2int(ip.address) & ip2int(ip.netmask))\n            ) {\n                hostIp = ip.address;\n            } else {\n                hostIp = ip.address;\n            }\n        }\n    }\n\n    if (!hostIp) {\n        for (const networkInterface of Object.values(networkInterfaces)) {\n            if (!networkInterface) {\n                continue;\n            }\n            for (let i = 0; i < networkInterface.length; i++) {\n                const ip = networkInterface[i];\n                if (ip.internal) {\n                    return;\n                }\n                if (localIp.includes(':') && ip.family !== 'IPv6') {\n                    return;\n                }\n                if (localIp.includes('.') && !localIp.match(/[^.\\d]/) && ip.family !== 'IPv4') {\n                    return;\n                }\n                if (localIp === '127.0.0.0' || localIp === 'localhost' || localIp.match(/[^.\\d]/)) {\n                    // if DNS name\n                    hostIp = ip.address;\n                } else {\n                    hostIp = ip.address;\n                }\n            }\n        }\n    }\n\n    if (!hostIp) {\n        for (const networkInterface of Object.values(networkInterfaces)) {\n            if (!networkInterface) {\n                continue;\n            }\n            for (let i = 0; i < networkInterface.length; i++) {\n                const ip = networkInterface[i];\n                if (ip.internal) {\n                    return;\n                }\n                hostIp = ip.address;\n            }\n        }\n    }\n\n    return hostIp;\n}\n\nfunction getHostname(\n    instanceObj: ioBroker.InstanceObject,\n    objects: Record<string, ioBroker.InstanceObject>,\n    hosts: Record<string, ioBroker.HostObject>,\n    currentHostname: string,\n    adminInstance: string,\n): string {\n    if (!instanceObj || !instanceObj.common) {\n        return null;\n    }\n\n    let hostname;\n    // check if the adapter from the same host as admin\n    const adminHost = objects[`system.adapter.${adminInstance}`]?.common?.host;\n    if (instanceObj.common.host !== adminHost) {\n        // find IP address\n        const host = hosts[`system.host.${instanceObj.common.host}`];\n        if (host) {\n            const ip = findNetworkAddressOfHost(host, currentHostname);\n            if (ip) {\n                hostname = ip;\n            } else {\n                console.warn(`Cannot find suitable IP in host ${instanceObj.common.host} for ${instanceObj._id}`);\n                return null;\n            }\n        } else {\n            console.warn(`Cannot find host ${instanceObj.common.host} for ${instanceObj._id}`);\n            return null;\n        }\n    } else {\n        hostname = currentHostname;\n    }\n\n    return hostname;\n}\n\n// internal use\nfunction _replaceLink(\n    link: string,\n    objects: Record<string, ioBroker.InstanceObject>,\n    adapterInstance: string,\n    attr: string,\n    placeholder: string,\n    hosts: Record<string, ioBroker.HostObject>,\n    hostname: string,\n    adminInstance: string,\n): string {\n    if (attr === 'protocol') {\n        attr = 'secure';\n    }\n\n    try {\n        const object = objects[`system.adapter.${adapterInstance}`];\n\n        if (link && object) {\n            if (attr === 'secure') {\n                link = link.replace(`%${placeholder}%`, object.native[attr] ? 'https' : 'http');\n            } else {\n                let value = object.native[attr];\n                // workaround for port\n                if ((attr === 'webinterfacePort' || attr === 'port') && (!value || value === '0')) {\n                    if (object.native.secure === true) {\n                        value = 443;\n                    } else {\n                        value = 80;\n                    }\n                }\n\n                if (attr === 'bind' || attr === 'ip') {\n                    let ip = object.native.bind || object.native.ip;\n                    if (ip === '0.0.0.0') {\n                        ip = getHostname(object, objects, hosts, hostname, adminInstance);\n                    }\n                    if (!link.includes(`%${placeholder}%`)) {\n                        link = link.replace(`%native_${placeholder}%`, ip || '');\n                    } else {\n                        link = link.replace(`%${placeholder}%`, ip || '');\n                    }\n                } else if (!link.includes(`%${placeholder}%`)) {\n                    link = link.replace(`%native_${placeholder}%`, value);\n                } else {\n                    link = link.replace(`%${placeholder}%`, value);\n                }\n            }\n        } else {\n            console.log(`Cannot get link ${attr}`);\n            link = link.replace(`%${placeholder}%`, '');\n        }\n    } catch (error) {\n        console.log(error);\n    }\n    return link;\n}\n\n/**\n * Convert the template link to string\n *\n * Possible placeholders:\n * `%ip%` - `native.bind` or `native.ip` of this adapter. If it is '0.0.0.0', we are trying to find the host IP that is reachable from the current browser.\n * `%protocol%` - `native.protocol` or `native.secure` of this adapter. The result is 'http' or 'https'.\n * `%s%` - `native.protocol` or `native.secure` of this adapter. The result is '' or 's'. The idea is to use the pattern like \"http%s%://...\"\n * `%instance%` - instance number\n * `%adapterName_nativeAttr%` - Takes the native value `nativeAttr` of all instances of adapterName. This generates many links if more than one instance installed\n * `%adapterName.x_nativeAttr%` - Takes the native value `nativeAttr` of adapterName.x instance\n *\n * @param link pattern for link\n * @param adapter adapter name\n * @param instance adapter instance number\n * @param context Context object\n * @param context.instances Object with all instances\n * @param context.hostname Actual host name\n * @param context.adminInstance Actual admin instance\n * @param context.hosts Object with all hosts\n */\nexport function replaceLink(\n    link: string,\n    adapter: string,\n    instance: number,\n    context: {\n        instances: Record<string, ioBroker.InstanceObject>;\n        hostname: string;\n        adminInstance: string;\n        hosts: Record<string, ioBroker.HostObject>;\n    },\n): {\n    url: string;\n    port: number;\n    instance?: string;\n}[] {\n    const _urls: {\n        url: string;\n        port: number;\n        instance?: string;\n    }[] = [];\n    let port: number;\n\n    if (link) {\n        const instanceObj = context.instances[`system.adapter.${adapter}.${instance}`];\n        const native = instanceObj?.native || {};\n\n        const placeholders = link.match(/%(\\w+)%/g);\n\n        if (placeholders) {\n            for (let p = 0; p < placeholders.length; p++) {\n                let placeholder = placeholders[p];\n\n                if (placeholder === '%ip%') {\n                    let ip: string = (native.bind || native.ip) as string;\n                    if (!ip || ip === '0.0.0.0') {\n                        // Check host\n                        ip = getHostname(\n                            instanceObj,\n                            context.instances,\n                            context.hosts,\n                            context.hostname,\n                            context.adminInstance,\n                        );\n                    }\n\n                    if (_urls.length) {\n                        _urls.forEach(item => (item.url = item.url.replace('%ip%', ip)));\n                    } else {\n                        link = link.replace('%ip%', ip || '');\n                    }\n                } else if (placeholder === '%protocol%') {\n                    const protocolVal: string | boolean = native.secure === undefined ? native.protocol : native.secure;\n                    let protocol: 'http' | 'https';\n                    if (protocolVal === true || protocolVal === 'true') {\n                        protocol = 'https';\n                    } else if (protocolVal === false || protocolVal === 'false' || !protocolVal) {\n                        protocol = 'http';\n                    } else {\n                        protocol = protocolVal.toString().replace(/:$/, '') as 'http' | 'https';\n                    }\n\n                    if (_urls.length) {\n                        _urls.forEach(item => (item.url = item.url.replace('%protocol%', protocol)));\n                    } else {\n                        link = link.replace('%protocol%', protocol);\n                    }\n                } else if (placeholder === '%s%') {\n                    const protocolVal: string | boolean = native.secure === undefined ? native.protocol : native.secure;\n                    let protocol: '' | 's';\n                    if (protocolVal === true || protocolVal === 'true') {\n                        protocol = 's';\n                    } else if (protocolVal === false || protocolVal === 'false' || !protocolVal) {\n                        protocol = '';\n                    } else {\n                        protocol = protocolVal.toString().replace(/:$/, '') as '' | 's';\n                    }\n\n                    if (_urls.length) {\n                        _urls.forEach(item => (item.url = item.url.replace('%s%', protocol)));\n                    } else {\n                        link = link.replace('%s%', protocol);\n                    }\n                } else if (placeholder === '%instance%') {\n                    link = link.replace('%instance%', instance.toString());\n                    if (_urls.length) {\n                        _urls.forEach(item => (item.url = item.url.replace('%instance%', instance.toString())));\n                    } else {\n                        link = link.replace('%instance%', instance.toString());\n                    }\n                } else {\n                    // remove %%\n                    placeholder = placeholder.replace(/%/g, '');\n\n                    if (placeholder.startsWith('native_')) {\n                        placeholder = placeholder.substring(7);\n                    }\n\n                    // like web.0_port or web_protocol\n                    if (!placeholder.includes('_')) {\n                        // if only one instance\n                        const adapterInstance = `${adapter}.${instance}`;\n                        if (_urls.length) {\n                            _urls.forEach(\n                                item =>\n                                    (item.url = _replaceLink(\n                                        item.url,\n                                        context.instances,\n                                        adapterInstance,\n                                        placeholder,\n                                        placeholder,\n                                        context.hosts,\n                                        context.hostname,\n                                        context.adminInstance,\n                                    )),\n                            );\n                        } else {\n                            link = _replaceLink(\n                                link,\n                                context.instances,\n                                adapterInstance,\n                                placeholder,\n                                placeholder,\n                                context.hosts,\n                                context.hostname,\n                                context.adminInstance,\n                            );\n                            port = context.instances[`system.adapter.${adapterInstance}`]?.native?.port;\n                        }\n                    } else {\n                        const [adapterInstance, attr] = placeholder.split('_');\n\n                        // if instance number not found\n                        if (!adapterInstance.match(/\\.[0-9]+$/)) {\n                            // list all possible instances\n                            let ids: string[];\n                            if (adapter === adapterInstance) {\n                                // take only this one instance and that's all\n                                ids = [`${adapter}.${instance}`];\n                            } else {\n                                ids = Object.keys(context.instances)\n                                    .filter(\n                                        id =>\n                                            id.startsWith(`system.adapter.${adapterInstance}.`) &&\n                                            context.instances[id].common.enabled,\n                                    )\n                                    .map(id => id.substring(15));\n\n                                // try to get disabled instances\n                                if (!ids.length) {\n                                    ids = Object.keys(context.instances)\n                                        .filter(id => id.startsWith(`system.adapter.${adapterInstance}.`))\n                                        .map(id => id.substring(15));\n                                }\n                            }\n\n                            for (const id of ids) {\n                                if (_urls.length) {\n                                    const item = _urls.find(t => t.instance === id);\n                                    if (item) {\n                                        item.url = _replaceLink(\n                                            item.url,\n                                            context.instances,\n                                            id,\n                                            attr,\n                                            placeholder,\n                                            context.hosts,\n                                            context.hostname,\n                                            context.adminInstance,\n                                        );\n                                    } else {\n                                        // add new\n                                        const _link = _replaceLink(\n                                            link,\n                                            context.instances,\n                                            id,\n                                            attr,\n                                            placeholder,\n                                            context.hosts,\n                                            context.hostname,\n                                            context.adminInstance,\n                                        );\n                                        const _port: number = context.instances[`system.adapter.${id}`]?.native\n                                            ?.port as number;\n\n                                        _urls.push({ url: _link, port: _port, instance: id });\n                                    }\n                                } else {\n                                    const _link = _replaceLink(\n                                        link,\n                                        context.instances,\n                                        id,\n                                        attr,\n                                        placeholder,\n                                        context.hosts,\n                                        context.hostname,\n                                        context.adminInstance,\n                                    );\n\n                                    const _port: number = context.instances[`system.adapter.${id}`]?.native\n                                        ?.port as number;\n                                    _urls.push({ url: _link, port: _port, instance: id });\n                                }\n                            }\n                        } else {\n                            link = _replaceLink(\n                                link,\n                                context.instances,\n                                adapterInstance,\n                                attr,\n                                placeholder,\n                                context.hosts,\n                                context.hostname,\n                                context.adminInstance,\n                            );\n\n                            port = context.instances[`system.adapter.${adapterInstance}`]?.native?.port as number;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (_urls.length) {\n        return _urls;\n    }\n    return [{ url: link, port }];\n}\n"]}