{"version":3,"file":"passportSocket.js","sourceRoot":"","sources":["../../src/lib/passportSocket.ts"],"names":[],"mappings":"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","sourcesContent":["// Originally taken from here: https://github.com/jfromaniello/passport.socketio/blob/master/lib/index.js\n// Copyright Licensed under the MIT-License. 2012-2013 Jos√© F. Romaniello.\n\ninterface AuthRequest {\n    signedCookies?: Record<string, string>;\n    cookies?: Record<string, string>;\n    headers: {\n        cookie: string;\n    };\n}\n\nfunction parseCookie(\n    auth: {\n        cookieParser: (\n            secret: string,\n        ) => (req: AuthRequest, options: Record<string, any>, cb: (err: string) => void) => void;\n        secret: string;\n    },\n    cookieHeader: string,\n): Record<string, string> {\n    const cookieParser = auth.cookieParser(auth.secret);\n    const req: AuthRequest = {\n        headers: {\n            cookie: cookieHeader,\n        },\n    };\n\n    let result;\n\n    cookieParser(req, {}, err => {\n        if (err) {\n            throw new Error(err);\n        }\n        result = req.signedCookies || req.cookies;\n    });\n\n    return result;\n}\n\nfunction getQuery(url: string): Record<string, string> {\n    const query = url.split('?')[1] || '';\n    const parts = query.split('&');\n    const result: Record<string, string> = {};\n    for (let p = 0; p < parts.length; p++) {\n        const parts1 = parts[p].split('=');\n        result[parts1[0]] = parts1[1];\n    }\n    return result;\n}\n\nfunction authorize(options: {\n    passport: { _key: string };\n    cookieParser: (\n        secret: string,\n    ) => (req: AuthRequest, options: Record<string, any>, cb: (err: string) => void) => void;\n    checkUser?: (user: string, pass: string, cb: (error: Error | null, result: Record<string, any>) => void) => void;\n    fail: (data: any, message: string, critical: boolean, accept: (err: Error | null) => void) => void;\n    success: (data: any, accept: (err: Error | null) => void) => void;\n}) {\n    const defaults: { key: string; secret: null | string; store: any; userProperty: 'user' } = {\n        key: 'connect.sid',\n        secret: null,\n        store: null,\n        userProperty: 'user',\n    };\n\n    const auth = Object.assign({}, defaults, options);\n\n    if (!auth.passport) {\n        throw new Error(\"passport is required to use require('passport'), please install passport\");\n    }\n\n    if (!auth.cookieParser) {\n        throw new Error(\n            \"cookieParser is required use require('cookie-parser'), connect.cookieParser or express.cookieParser\",\n        );\n    }\n\n    return function (\n        data: {\n            headers: {\n                cookie: string;\n            };\n            url: string;\n            query: Record<string, string>;\n            cookie: Record<string, string>;\n            sessionID: string;\n            user: { logged_in: boolean };\n        },\n        accept: (err: Error | null) => void,\n    ) {\n        data.query = getQuery(data.url);\n\n        if (options.checkUser && data.query.user && data.query.pass) {\n            return options.checkUser(\n                data.query.user,\n                data.query.pass,\n                (error: Error | null, result?: { logged_in: boolean }) => {\n                    if (error) {\n                        return auth.fail(data, 'Cannot check user', false, accept);\n                    }\n                    if (!result) {\n                        return auth.fail(data, 'User not found', false, accept);\n                    }\n\n                    data[auth.userProperty] = result;\n                    data[auth.userProperty].logged_in = true;\n                    auth.success(data, accept);\n                },\n            );\n        }\n\n        data.cookie = parseCookie(auth, data.headers.cookie || '');\n        data.sessionID = data.cookie[auth.key] || '';\n        data[auth.userProperty] = {\n            logged_in: false,\n        };\n\n        auth.store.get(data.sessionID, (err: Error, session: Record<string, { user: { logged_in: boolean } }>) => {\n            if (err) {\n                return auth.fail(data, `Error in session store:\\n${err.message}`, true, accept);\n            }\n            if (!session) {\n                return auth.fail(data, 'No session found', false, accept);\n            }\n            if (!session[auth.passport._key]) {\n                return auth.fail(data, 'Passport was not initialized', true, accept);\n            }\n\n            const userKey = session[auth.passport._key].user;\n\n            if (typeof userKey === 'undefined') {\n                return auth.fail(\n                    data,\n                    'User not authorized through passport. (User Property not found)',\n                    false,\n                    accept,\n                );\n            }\n\n            data[auth.userProperty] = userKey;\n            data[auth.userProperty].logged_in = true;\n            auth.success(data, accept);\n        });\n    };\n}\n\nexports.authorize = authorize;\n"]}