{"version":3,"file":"static/js/8222.98910e8b.chunk.js","mappings":"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","sources":["tabs/Config.tsx","components/EasyModeCard.tsx","tabs/EasyMode.tsx"],"sourcesContent":["import React, { Component, type JSX } from 'react';\n\nimport { green, grey, orange, red } from '@mui/material/colors';\n\nimport {\n    AppBar,\n    Tooltip,\n    Paper,\n    Fab,\n    Toolbar,\n    Typography,\n    Checkbox,\n    FormControl,\n    FormControlLabel,\n    FormHelperText,\n    IconButton,\n    InputLabel,\n    MenuItem,\n    Select,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n} from '@mui/material';\n\nimport {\n    Help as HelpIcon,\n    Pause as PauseIcon,\n    PlayArrow as PlayArrowIcon,\n    Refresh as RefreshIcon,\n    Edit as EditIcon,\n    ArrowBack,\n} from '@mui/icons-material';\n\nimport {\n    Icon,\n    DialogConfirm,\n    type IobTheme,\n    type AdminConnection,\n    type ThemeName,\n    type ThemeType,\n    type Translate,\n} from '@iobroker/adapter-react-v5';\n\nimport { type DeviceManagerPropsProps, JsonConfig } from '@iobroker/json-config';\nimport DeviceManager from '@iobroker/dm-gui-components';\n\nimport AdminUtils from '../helpers/AdminUtils';\n\nconst arrayLogLevel: ioBroker.LogLevel[] = ['silly', 'debug', 'info', 'warn', 'error'];\n\ndeclare global {\n    interface Window {\n        // @deprecated\n        attachEvent: any;\n        // @deprecated\n        detachEvent: any;\n    }\n}\n\nconst styles: Record<string, any> = {\n    root: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n    },\n    scroll: {\n        height: '100%',\n        overflowY: 'auto',\n    },\n    instanceIcon: {\n        width: 42,\n        height: 42,\n        marginRight: 16,\n        verticalAlign: 'middle',\n    },\n    button: {\n        marginRight: 5,\n        width: 36,\n        height: 36,\n    },\n    version: {\n        fontSize: 12,\n        opacity: 0.8,\n        marginLeft: 20,\n        marginRight: 10,\n    },\n    versionAliveConnected: (theme: IobTheme) => ({\n        color: theme.palette.mode === 'dark' ? '#23a623' : '#60ff60',\n    }),\n    versionAliveNotConnected: {\n        color: '#a67223',\n    },\n    buttonControl: {\n        padding: '5px',\n        transition: 'opacity 0.2s',\n        height: 34,\n    },\n    enabled: {\n        color: green[400],\n        '&:hover': {\n            backgroundColor: green[200],\n        },\n    },\n    disabled: {\n        color: red[400],\n        '&:hover': {\n            backgroundColor: red[200],\n        },\n    },\n    hide: {\n        visibility: 'hidden',\n    },\n    formControl: {\n        width: '100%',\n        marginBottom: 5,\n    },\n    logLevel: {\n        fontSize: 12,\n        marginLeft: 10,\n    },\n    green: {\n        color: green[700],\n    },\n    red: {\n        color: red[700],\n    },\n    grey: {\n        color: grey[700],\n    },\n    blue: {\n        color: '#0055a9',\n    },\n    orange: {\n        color: orange[400],\n    },\n    orangeDevice: {\n        color: orange[300],\n    },\n    tooltip: {\n        pointerEvents: 'none',\n    },\n};\n\ninterface ConfigProps {\n    adapter: string;\n    instance: number;\n    materialize: boolean;\n    tab?: boolean;\n    expertMode: boolean;\n    jsonConfig: boolean;\n    socket: AdminConnection;\n    themeName: ThemeName;\n    themeType: ThemeType;\n    t: Translate;\n    isFloatComma: boolean;\n    dateFormat: string;\n    style: Record<string, React.CSSProperties>;\n    icon: string;\n    lang: ioBroker.Languages;\n    easyMode?: boolean;\n    adminInstance: string;\n    onRegisterIframeRef: (ref: HTMLIFrameElement) => void;\n    onUnregisterIframeRef: (ref: HTMLIFrameElement) => void;\n    configStored: (allStored: boolean) => void;\n    theme: IobTheme;\n    width: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n    version?: string;\n    handleNavigation: (tab: string, subTab?: string, param?: string) => void;\n}\n\ninterface ConfigState {\n    checkedExist: boolean | string;\n    showStopAdminDialog: boolean;\n    running: boolean;\n    canStart: boolean;\n    alive: boolean;\n    connected: boolean | null;\n    connectedToHost: boolean;\n    logOnTheFlyValue: boolean;\n    logLevel: ioBroker.LogLevel;\n    logLevelValue: ioBroker.LogLevel;\n    tempLogLevel: ioBroker.LogLevel;\n    common?: Record<string, any>;\n    native?: Record<string, any>;\n    adapterDocLangs?: ioBroker.Languages[];\n    extension?: boolean | null;\n    showLogLevelDialog: boolean;\n}\n\nclass Config extends Component<ConfigProps, ConfigState> {\n    private refIframe: HTMLIFrameElement | null;\n\n    private registered: boolean;\n\n    constructor(props: ConfigProps) {\n        super(props);\n\n        this.state = {\n            checkedExist: false,\n            showStopAdminDialog: false,\n            running: false,\n            canStart: false,\n            alive: false,\n            connected: false,\n            connectedToHost: false,\n            logOnTheFlyValue: false,\n            logLevel: 'info',\n            logLevelValue: 'info',\n            tempLogLevel: 'info',\n            showLogLevelDialog: false,\n        };\n\n        this.refIframe = null;\n        this.registered = false;\n    }\n\n    componentDidUpdate(/* prevProps, prevState, snapshot */): void {\n        if (!this.registered && this.refIframe?.contentWindow) {\n            this.registered = true;\n            this.props.onRegisterIframeRef(this.refIframe);\n        }\n    }\n\n    componentDidMount(): void {\n        // receive messages from IFRAME\n        if (this.props.tab) {\n            void this.props.socket.fileExists(`${this.props.adapter}.admin`, 'tab.html').then(exist => {\n                if (exist) {\n                    this.setState({ checkedExist: 'tab.html' });\n                } else {\n                    return this.props.socket\n                        .fileExists(`${this.props.adapter}.admin`, 'tab_m.html')\n                        .then(exists =>\n                            exists\n                                ? this.setState({ checkedExist: 'tab_m.html' })\n                                : window.alert('Cannot find tab(_m).html'),\n                        );\n                }\n            });\n        } else {\n            // this.props.socket.getState('system.adapter.' + this.props.adapter + '.' + this.props.instance + '.')\n            const instanceId = `system.adapter.${this.props.adapter}.${this.props.instance}`;\n            void this.props.socket.subscribeObject(instanceId, this.onObjectChange);\n            this.props.socket\n                .getObject(instanceId)\n                .then(async obj => {\n                    const tempLogLevel = await this.props.socket.getState(`${instanceId}.logLevel`);\n                    await this.props.socket.subscribeState(`${instanceId}.logLevel`, this.onStateChange);\n\n                    const alive = await this.props.socket.getState(`${instanceId}.alive`);\n                    await this.props.socket.subscribeState(`${instanceId}.alive`, this.onStateChange);\n\n                    const connectedToHost = await this.props.socket.getState(`${instanceId}.connected`);\n                    await this.props.socket.subscribeState(`${instanceId}.connected`, this.onStateChange);\n\n                    let connected;\n                    try {\n                        connected = await this.props.socket.getState(\n                            `${this.props.adapter}.${this.props.instance}.info.connection`,\n                        );\n                        void this.props.socket.subscribeState(\n                            `${this.props.adapter}.${this.props.instance}.info.connection`,\n                            this.onStateChange,\n                        );\n                    } catch {\n                        // ignore\n                        connected = null;\n                    }\n\n                    let extension;\n                    try {\n                        extension = await this.props.socket.getState(\n                            `${this.props.adapter}.${this.props.instance}.info.extension`,\n                        );\n                        void this.props.socket.subscribeState(\n                            `${this.props.adapter}.${this.props.instance}.info.extension`,\n                            this.onStateChange,\n                        );\n                    } catch {\n                        // ignore\n                        extension = null;\n                    }\n\n                    this.setState({\n                        checkedExist: true,\n                        running: obj?.common?.onlyWWW || obj?.common?.enabled,\n                        canStart: !obj?.common?.onlyWWW,\n                        alive: !!alive?.val,\n                        extension: extension ? !!extension?.val : null,\n                        connectedToHost: !!connectedToHost?.val,\n                        connected: connected ? !!connected.val : null,\n                        logLevel: obj?.common?.loglevel || 'info',\n                        logLevelValue: obj?.common?.loglevel || 'info',\n                        tempLogLevel: tempLogLevel?.val || obj?.common?.loglevel || 'info',\n                        common: obj?.common || {},\n                        native: obj?.native || {},\n                        adapterDocLangs: obj?.common?.docs\n                            ? (Object.keys(obj.common.docs) as ioBroker.Languages[])\n                            : ['en'],\n                    });\n                })\n                .catch(error => {\n                    console.error(error);\n                    this.setState({ checkedExist: true, running: false });\n                });\n        }\n\n        if (!this.registered && this.refIframe?.contentWindow) {\n            this.registered = true;\n            this.props.onRegisterIframeRef(this.refIframe);\n        }\n\n        (window.addEventListener || window.attachEvent)(\n            window.addEventListener ? 'message' : 'onmessage',\n            this.closeConfig,\n            false,\n        );\n    }\n\n    onObjectChange = (id: string, obj: ioBroker.InstanceObject | null): void => {\n        if (id === `system.adapter.${this.props.adapter}.${this.props.instance}`) {\n            this.setState({\n                running: obj?.common?.onlyWWW || obj?.common?.enabled,\n                canStart: !obj?.common?.onlyWWW,\n                logLevel: obj?.common?.loglevel || 'info',\n            });\n        }\n    };\n\n    // returns:\n    // grey   - daemon / disabled\n    // green  - daemon / run,connected,alive\n    // blue   - schedule\n    // orangeDevice - daemon / run, connected to controller, not connected to device\n    // orange - daemon / run,not connected\n    // red    - daemon / not run, not connected\n    getInstanceStatus(): string {\n        const mode = this.state.common?.mode || '';\n        let status = mode === 'daemon' ? 'green' : 'blue';\n\n        if (\n            this.state.common?.enabled &&\n            (!this.state.common.webExtension || !this.state.native?.webInstance || mode === 'daemon')\n        ) {\n            if (this.state.common.webExtension && this.state.native?.webInstance) {\n                if (this.state.extension !== null) {\n                    return this.state.extension ? 'green' : 'red';\n                }\n            }\n\n            if (!this.state.connectedToHost || !this.state.alive) {\n                status = mode === 'daemon' ? 'red' : 'orangeDevice';\n            }\n            if (this.state.connected !== null && !this.state.connected && status !== 'red') {\n                status = 'orange';\n            }\n        } else {\n            status = mode === 'daemon' ? 'grey' : 'blue';\n        }\n\n        return status;\n    }\n\n    onStateChange = (id: string, state?: ioBroker.State | null): void => {\n        const instanceId = `system.adapter.${this.props.adapter}.${this.props.instance}`;\n        if (id === `${instanceId}.alive`) {\n            this.setState({ alive: !!state?.val });\n        } else if (id === `${instanceId}.connected`) {\n            this.setState({ connectedToHost: !!state?.val });\n        } else if (id === `${this.props.adapter}.${this.props.instance}.info.connection`) {\n            this.setState({ connected: state ? !!state.val : null });\n        } else if (id === `${this.props.adapter}.${this.props.instance}.info.extension`) {\n            this.setState({ extension: state ? !!state.val : null });\n        } else if (id === `${instanceId}.logLevel`) {\n            this.setState({ tempLogLevel: state ? (state.val as ioBroker.LogLevel) : null });\n        }\n    };\n\n    componentWillUnmount(): void {\n        void this.props.socket.unsubscribeObject(\n            `system.adapter.${this.props.adapter}.${this.props.instance}`,\n            this.onObjectChange,\n        );\n\n        (window.removeEventListener || window.detachEvent)(\n            window.removeEventListener ? 'message' : 'onmessage',\n            this.closeConfig,\n            false,\n        );\n\n        if (this.registered && this.refIframe) {\n            this.props.onUnregisterIframeRef(this.refIframe);\n        }\n        this.refIframe = null;\n    }\n\n    closeConfig = (event: MessageEvent & { message: string }): void => {\n        if (event.origin !== window.location.origin) {\n            return;\n        }\n\n        if (event.data === 'close' || event.message === 'close') {\n            if (this.props.easyMode) {\n                this.props.handleNavigation('easy');\n            } else {\n                this.props.handleNavigation('tab-instances');\n            }\n        } else if (event.data === 'change' || event.message === 'change') {\n            this.props.configStored(false);\n        } else if (event.data === 'nochange' || event.message === 'nochange') {\n            this.props.configStored(true);\n        } else if (\n            (typeof event.data === 'string' && event.data.startsWith('goto:')) ||\n            (typeof event.message === 'string' && event.message.startsWith('goto:'))\n        ) {\n            const [, url] = (event.data || event.message).split(':');\n            const [tab, subTab, parameter] = url.split('/');\n            this.props.handleNavigation(tab, subTab, parameter);\n        }\n    };\n\n    renderHelpButton(): JSX.Element | null {\n        if (this.props.jsonConfig) {\n            return (\n                <div\n                    style={{\n                        display: 'inline-block',\n                        position: 'absolute',\n                        right: 0,\n                        top: 5,\n                    }}\n                >\n                    <Tooltip\n                        title={this.props.t('Show help for this adapter')}\n                        slotProps={{ popper: { sx: styles.tooltip } }}\n                    >\n                        <Fab\n                            sx={{ '&.MuiFab-root': styles.button }}\n                            onClick={() => {\n                                const lang = this.state.adapterDocLangs?.includes(this.props.lang)\n                                    ? this.props.lang\n                                    : 'en';\n                                window.open(\n                                    AdminUtils.getDocsLinkForAdapter({ lang, adapterName: this.props.adapter }),\n                                    'help',\n                                );\n                            }}\n                        >\n                            <HelpIcon />\n                        </Fab>\n                    </Tooltip>\n                </div>\n            );\n        }\n        return null;\n    }\n\n    getConfigurator(): JSX.Element | null {\n        if (this.props.jsonConfig) {\n            return (\n                <JsonConfig\n                    expertMode={this.props.expertMode}\n                    theme={this.props.theme}\n                    width={this.props.width}\n                    adapterName={this.props.adapter}\n                    instance={this.props.instance}\n                    socket={this.props.socket}\n                    themeName={this.props.themeName}\n                    themeType={this.props.themeType}\n                    dateFormat={this.props.dateFormat}\n                    isFloatComma={this.props.isFloatComma}\n                    configStored={this.props.configStored}\n                    t={this.props.t}\n                    DeviceManager={DeviceManager as unknown as React.FC<DeviceManagerPropsProps>}\n                />\n            );\n        }\n        const src =\n            `adapter/${this.props.adapter}/` +\n            `${this.props.tab ? this.state.checkedExist : this.props.materialize ? 'index_m.html' : 'index.html'}?` +\n            `${this.props.instance || 0}&newReact=true&${this.props.instance || 0}&react=${this.props.themeName}`;\n\n        if (this.state.checkedExist) {\n            return (\n                <iframe\n                    ref={el => this && (this.refIframe = el)}\n                    title=\"config\"\n                    style={this.props.style}\n                    src={src}\n                ></iframe>\n            );\n        }\n        return null;\n    }\n\n    returnStopAdminDialog(): JSX.Element | null {\n        return this.state.showStopAdminDialog ? (\n            <DialogConfirm\n                title={this.props.t('Please confirm')}\n                text={this.props.t('stop_admin', this.props.instance)}\n                ok={this.props.t('Stop admin')}\n                onClose={result => {\n                    if (result) {\n                        this.props.socket\n                            .extendObject(`system.adapter.${this.props.adapter}.${this.props.instance}`, {\n                                common: { enabled: false },\n                            })\n                            .catch(error => window.alert(error));\n                    }\n                    this.setState({ showStopAdminDialog: false });\n                }}\n            />\n        ) : null;\n    }\n\n    renderLogLevelDialog(): JSX.Element | null {\n        if (!this.state.showLogLevelDialog) {\n            return null;\n        }\n        return (\n            <Dialog\n                open={!0}\n                onClose={() => this.setState({ showLogLevelDialog: false })}\n            >\n                <DialogTitle>\n                    {this.props.t('Edit log level rule for %s', `${this.props.adapter}.${this.props.instance}`)}\n                </DialogTitle>\n                <DialogContent>\n                    <FormControl\n                        style={{ ...styles.formControl, marginTop: 10 }}\n                        variant=\"outlined\"\n                    >\n                        <InputLabel>{this.props.t('log level')}</InputLabel>\n                        <Select\n                            variant=\"standard\"\n                            value={this.state.logLevelValue}\n                            fullWidth\n                            onChange={el => this.setState({ logLevelValue: el.target.value as ioBroker.LogLevel })}\n                        >\n                            {arrayLogLevel.map(el => (\n                                <MenuItem\n                                    key={el}\n                                    value={el}\n                                >\n                                    {this.props.t(el)}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                    <FormControl\n                        style={styles.formControl}\n                        variant=\"outlined\"\n                    >\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={this.state.logOnTheFlyValue}\n                                    onChange={e => this.setState({ logOnTheFlyValue: e.target.checked })}\n                                />\n                            }\n                            label={this.props.t('Without restart')}\n                        />\n                        <FormHelperText>\n                            {this.state.logOnTheFlyValue\n                                ? this.props.t('Will be reset to the saved log level after restart of adapter')\n                                : this.props.t('Log level will be saved permanently')}\n                        </FormHelperText>\n                    </FormControl>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={() => {\n                            if (this.state.logOnTheFlyValue) {\n                                void this.props.socket.setState(\n                                    `system.adapter.${this.props.adapter}.${this.props.instance}.logLevel`,\n                                    this.state.logLevelValue,\n                                );\n                            } else {\n                                this.props.socket\n                                    .extendObject(`system.adapter.${this.props.adapter}.${this.props.instance}`, {\n                                        common: { loglevel: this.state.logLevelValue },\n                                    })\n                                    .catch(error => window.alert(`Cannot set log level: ${error}`));\n                            }\n                            this.setState({ showLogLevelDialog: false });\n                        }}\n                    >\n                        {this.props.t('Ok')}\n                    </Button>\n                    <Button\n                        color=\"grey\"\n                        variant=\"contained\"\n                        onClick={() => this.setState({ showLogLevelDialog: false })}\n                    >\n                        {this.props.t('Cancel')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <Paper style={styles.root}>\n                <AppBar\n                    color=\"default\"\n                    position=\"static\"\n                >\n                    <Toolbar\n                        variant=\"dense\"\n                        style={{ marginLeft: 8 }}\n                    >\n                        <Typography\n                            variant=\"h6\"\n                            color=\"inherit\"\n                        >\n                            <IconButton\n                                size=\"small\"\n                                onClick={() => {\n                                    if (this.props.easyMode) {\n                                        this.props.handleNavigation('easy');\n                                    } else {\n                                        this.props.handleNavigation('tab-instances');\n                                    }\n                                }}\n                                onFocus={event => event.stopPropagation()}\n                                style={{\n                                    marginRight: 10,\n                                }}\n                            >\n                                <ArrowBack />\n                            </IconButton>\n                            {this.props.jsonConfig ? (\n                                <Icon\n                                    src={this.props.icon}\n                                    style={styles.instanceIcon}\n                                />\n                            ) : null}\n                            {`${this.props.t('Instance settings')}: ${this.props.adapter}.${this.props.instance}`}\n                            {this.props.version ? (\n                                <span\n                                    style={{\n                                        ...styles.version,\n                                        ...styles[this.getInstanceStatus()],\n                                    }}\n                                >\n                                    v{this.props.version}\n                                </span>\n                            ) : null}\n                            <Tooltip\n                                title={this.props.t('Start/stop')}\n                                slotProps={{ popper: { sx: styles.tooltip } }}\n                            >\n                                <span>\n                                    <IconButton\n                                        size=\"small\"\n                                        onClick={event => {\n                                            event.stopPropagation();\n                                            event.preventDefault();\n                                            if (\n                                                this.state.running &&\n                                                `${this.props.adapter}.${this.props.instance}` ===\n                                                    this.props.adminInstance\n                                            ) {\n                                                this.setState({ showStopAdminDialog: true });\n                                            } else {\n                                                this.props.socket\n                                                    .extendObject(\n                                                        `system.adapter.${this.props.adapter}.${this.props.instance}`,\n                                                        { common: { enabled: !this.state.running } },\n                                                    )\n                                                    .catch(error => window.alert(`Cannot set log level: ${error}`));\n                                            }\n                                        }}\n                                        onFocus={event => event.stopPropagation()}\n                                        sx={{\n                                            ...styles.buttonControl,\n                                            ...(this.state.canStart\n                                                ? this.state.running\n                                                    ? styles.enabled\n                                                    : styles.disabled\n                                                : styles.hide),\n                                        }}\n                                    >\n                                        {this.state.running ? <PauseIcon /> : <PlayArrowIcon />}\n                                    </IconButton>\n                                </span>\n                            </Tooltip>\n                            <Tooltip\n                                title={this.props.t('Restart')}\n                                slotProps={{ popper: { sx: styles.tooltip } }}\n                            >\n                                <span>\n                                    <IconButton\n                                        size=\"small\"\n                                        onClick={event => {\n                                            event.stopPropagation();\n                                            this.props.socket\n                                                .extendObject(\n                                                    `system.adapter.${this.props.adapter}.${this.props.instance}`,\n                                                    {},\n                                                )\n                                                .catch(error => window.alert(`Cannot set log level: ${error}`));\n                                        }}\n                                        onFocus={event => event.stopPropagation()}\n                                        style={{\n                                            ...styles.buttonControl,\n                                            ...(!this.state.canStart ? styles.hide : undefined),\n                                        }}\n                                        disabled={!this.state.running}\n                                    >\n                                        <RefreshIcon />\n                                    </IconButton>\n                                </span>\n                            </Tooltip>\n                            {this.state.tempLogLevel !== this.state.logLevel ? (\n                                <Tooltip\n                                    title={this.props.t('temporary log level')}\n                                    slotProps={{ popper: { sx: styles.tooltip } }}\n                                >\n                                    <span style={styles.logLevel}>{this.state.tempLogLevel}</span>\n                                </Tooltip>\n                            ) : null}\n                            <Tooltip\n                                title={this.props.t('log level')}\n                                slotProps={{ popper: { sx: styles.tooltip } }}\n                            >\n                                <span style={styles.logLevel}>\n                                    {this.state.tempLogLevel !== this.state.logLevel\n                                        ? `/ ${this.state.logLevel}`\n                                        : this.state.logLevel}\n                                </span>\n                            </Tooltip>\n                            <Tooltip\n                                title={this.props.t(\n                                    'Edit log level rule for %s',\n                                    `${this.props.adapter}.${this.props.instance}`,\n                                )}\n                            >\n                                <IconButton\n                                    size=\"small\"\n                                    onClick={event => {\n                                        event.stopPropagation();\n                                        this.setState({ showLogLevelDialog: true });\n                                    }}\n                                    onFocus={event => event.stopPropagation()}\n                                    style={{\n                                        ...styles.buttonControl,\n                                        ...(!this.state.canStart ? styles.hide : undefined),\n                                        width: 34,\n                                        height: 34,\n                                    }}\n                                >\n                                    <EditIcon style={{ width: 20, height: 20 }} />\n                                </IconButton>\n                            </Tooltip>\n                            {/* <IsVisible config={item} name=\"allowInstanceLink\">\n                            <Tooltip title={this.props.t('Instance link %s', this.props.instanceItem?.id)}>\n                                <span>\n                                    <IconButton\n                                        size=\"small\"\n                                        className={Utils.clsx(classes.buttonControl, (!this.props.instanceItem?.links || !this.props.instanceItem?.links[0]) && classes.hide)}\n                                        disabled={!this.state.running}\n                                        onClick={event => {\n                                            event.stopPropagation();\n                                            if (this.props.instanceItem?.links.length === 1) {\n                                                // replace IPv6 Address with [ipv6]:port\n                                                let url = this.props.instanceItem?.links[0].link;\n                                                url = url.replace(/\\/\\/([0-9a-f]*:[0-9a-f]*:[0-9a-f]*:[0-9a-f]*:[0-9a-f]*:[0-9a-f]*)(:\\d+)?\\//i, '//[$1]$2/');\n                                                window.open(url, this.props.instanceItem?.id);\n                                            } else {\n                                                setShowLinks(true);\n                                            }\n                                        }}\n                                        onFocus={event => event.stopPropagation()}\n                                    >\n                                        <InputIcon />\n                                    </IconButton>\n                                </div>\n                            </Tooltip>\n                        </IsVisible> */}\n                        </Typography>\n                        {this.renderHelpButton()}\n                    </Toolbar>\n                </AppBar>\n                {this.getConfigurator()}\n                {this.returnStopAdminDialog()}\n                {this.renderLogLevelDialog()}\n            </Paper>\n        );\n    }\n}\n\nexport default Config;\n","import React, { type JSX } from 'react';\nimport { Card, CardMedia } from '@mui/material';\n\nimport { type IobTheme } from '@iobroker/adapter-react-v5';\n\nconst boxShadow = '0 2px 2px 0 rgba(0, 0, 0, .14),0 3px 1px -2px rgba(0, 0, 0, .12),0 1px 5px 0 rgba(0, 0, 0, .2)';\nconst boxShadowHover = '0 8px 17px 0 rgba(0, 0, 0, .2),0 6px 20px 0 rgba(0, 0, 0, .19)';\n\nconst styles: Record<string, any> = {\n    root: (theme: IobTheme) => ({\n        position: 'relative',\n        m: '10px',\n        width: 300,\n        minHeight: 200,\n        background: theme.palette.background.default,\n        boxShadow,\n        display: 'flex',\n        transition: 'box-shadow 0.5s',\n        cursor: 'pointer',\n        '&:hover': {\n            boxShadow: boxShadowHover,\n        },\n    }),\n    imageBlock: {\n        background: 'silver',\n        minHeight: 60,\n        display: 'flex',\n        padding: '0 10px 0 10px',\n        position: 'relative',\n        justifyContent: 'space-between',\n        transition: 'background 0.5s',\n    },\n    img: {\n        width: 60,\n        height: 60,\n        marginTop: 20,\n        position: 'relative',\n        '&:after': {\n            content: '\"\"',\n            position: 'absolute',\n            zIndex: 2,\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            background: 'url(\"img/no-image.png\") 100% 100% no-repeat',\n            backgroundSize: 'cover',\n            backgroundColor: '#fff',\n        },\n    },\n    adapter: {\n        width: '100%',\n        fontWeight: 'bold',\n        fontSize: 15,\n        verticalAlign: 'middle',\n        marginTop: 'auto',\n        borderTop: '1px solid silver',\n        padding: '20px 4px',\n        textAlign: 'center',\n        textTransform: 'uppercase',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        color: '#ffab40',\n    },\n    instanceStateNotAlive1: {\n        backgroundColor: 'rgba(192, 192, 192, 0.4)',\n    },\n    wrapperDesc: {\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        overflow: 'hidden',\n    },\n    desc: {\n        padding: 20,\n        fontSize: 15,\n    },\n};\n\nfunction getText(text: ioBroker.StringOrTranslated, lang: ioBroker.Languages): string {\n    if (text && typeof text === 'object') {\n        return text[lang] || text.en || '';\n    }\n    return (text as string) || '';\n}\n\ninterface EasyModeCardProps {\n    icon: string;\n    id: string;\n    desc: ioBroker.StringOrTranslated;\n    lang: ioBroker.Languages;\n    navigate: () => void;\n}\n\nconst EasyModeCard = ({ icon, id, desc, lang, navigate }: EasyModeCardProps): JSX.Element => (\n    <Card\n        onClick={navigate}\n        sx={styles.root}\n    >\n        <div style={{ ...styles.imageBlock, ...styles.instanceStateNotAlive1 }}>\n            <CardMedia\n                sx={styles.img}\n                component=\"img\"\n                image={`adapter/${id.split('.')[0]}/${icon}`}\n            />\n        </div>\n        <div style={styles.wrapperDesc}>\n            <div style={styles.desc}>{getText(desc, lang)}</div>\n            <div style={styles.adapter}>{id}</div>\n        </div>\n    </Card>\n);\n\nexport default EasyModeCard;\n","import React, { Component, type JSX } from 'react';\n\nimport { AppBar, CardMedia, CircularProgress, IconButton, Paper, Toolbar } from '@mui/material';\n\nimport { ArrowBack as ArrowBackIcon } from '@mui/icons-material';\n\nimport {\n    ToggleThemeMenu,\n    type IobTheme,\n    type AdminConnection,\n    type ThemeType,\n    type ThemeName,\n    type Translate,\n} from '@iobroker/adapter-react-v5';\n\nimport Config from './Config';\nimport EasyModeCard from '../components/EasyModeCard';\n\nconst styles: Record<string, any> = {\n    appBar: (theme: IobTheme) => ({\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    }),\n    wrapperEasyMode: {\n        height: '100%',\n        borderRadius: 0,\n    },\n    wrapperCard: {\n        padding: '80px 20px 20px',\n        height: '100%',\n        overflowY: 'auto',\n    },\n    controlHeight: {\n        display: 'flex',\n        flexFlow: 'wrap',\n        justifyContent: 'center',\n    },\n    img: {\n        width: 60,\n        height: 60,\n        position: 'relative',\n        borderRadius: 60,\n    },\n    logoWhite: {\n        background: 'white',\n    },\n    wrapperHeader: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    headerName: {\n        fontSize: 24,\n        marginLeft: 10,\n    },\n    toolBar: {\n        justifyContent: 'space-between',\n        margin: '5px 0',\n    },\n    paper: {\n        height: '100%',\n        paddingTop: 80,\n    },\n    iframe: {\n        height: '100%',\n        width: '100%',\n        background: '#FFF',\n        color: '#000',\n        borderRadius: 5,\n        border: '1px solid #888',\n    },\n    IconButtons: {\n        display: 'flex',\n    },\n    logoPointer: {\n        cursor: 'pointer',\n    },\n};\n\nexport interface InstanceConfig {\n    id: string;\n    title: ioBroker.StringOrTranslated;\n    desc: ioBroker.StringOrTranslated;\n    color: string;\n    url: string;\n    icon: string;\n    materialize: boolean;\n    jsonConfig: boolean;\n    version: string;\n    tab?: boolean;\n    config?: boolean;\n}\n\ninterface EasyModeConfig {\n    strict: boolean;\n    configs: InstanceConfig[];\n}\n\ninterface EasyModeProps {\n    themeName: ThemeName;\n    toggleTheme: () => void;\n    t: Translate;\n    lang: ioBroker.Languages;\n    navigate: (tab: string | undefined | null, dialog?: string | null, id?: string | null, arg?: string | null) => void;\n    location: {\n        tab: string;\n        dialog?: string;\n        id?: string;\n        arg?: string;\n    };\n    socket: AdminConnection;\n    themeType: ThemeType;\n    theme: IobTheme;\n    width: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n    isFloatComma: boolean;\n    dateFormat: string;\n    configStored: (changed: boolean) => void;\n    getLocation: () => {\n        tab: string;\n        dialog: string;\n        id: string;\n        arg: string;\n    };\n    onRegisterIframeRef: (ref: HTMLIFrameElement) => void;\n    onUnregisterIframeRef: (ref: HTMLIFrameElement) => void;\n    configs?: InstanceConfig[];\n    adminInstance: string;\n    handleNavigation: (tab: string, subTab?: string, param?: string) => void;\n}\n\ninterface EasyModeState {\n    configs: InstanceConfig[];\n    strictMode: boolean;\n}\n\nclass EasyMode extends Component<EasyModeProps, EasyModeState> {\n    constructor(props: EasyModeProps) {\n        super(props);\n        this.state = {\n            configs: this.props.configs,\n            strictMode: !this.props.configs,\n        };\n    }\n\n    componentDidMount(): void {\n        if (!this.props.configs) {\n            void this.props.socket\n                .getEasyMode()\n                .then((config: EasyModeConfig) => this.setState({ configs: config.configs }));\n        }\n    }\n\n    render(): JSX.Element {\n        const {\n            t,\n            themeName,\n            toggleTheme,\n            navigate,\n            location,\n            socket,\n            themeType,\n            theme,\n            width,\n            isFloatComma,\n            dateFormat,\n            configStored,\n            getLocation,\n            adminInstance,\n        } = this.props;\n\n        const { configs, strictMode } = this.state;\n        if (!configs) {\n            return <CircularProgress />;\n        }\n\n        const tab = location.id;\n        const currentInstance = configs.find(({ id }) => id === tab);\n        return (\n            <Paper style={styles.wrapperEasyMode}>\n                <AppBar\n                    color=\"default\"\n                    position=\"fixed\"\n                    sx={styles.appBar}\n                >\n                    <Toolbar style={styles.toolBar}>\n                        <div style={styles.wrapperHeader}>\n                            <CardMedia\n                                onClick={\n                                    (strictMode && !getLocation().dialog) || currentInstance?.tab\n                                        ? () => navigate(currentInstance?.tab ? 'easy' : 'tab-intro')\n                                        : null\n                                }\n                                style={{\n                                    ...styles.img,\n                                    ...(themeName === 'colored' ? styles.logoWhite : undefined),\n                                    ...((strictMode && !getLocation().dialog) || currentInstance?.tab\n                                        ? styles.logoPointer\n                                        : undefined),\n                                }}\n                                component=\"img\"\n                                image=\"img/no-image.png\"\n                            />\n                            <div style={styles.headerName}>{t('Easy Admin')}</div>\n                        </div>\n                        <div style={styles.IconButtons}>\n                            {((strictMode && !getLocation().dialog) || currentInstance?.tab) && (\n                                <IconButton\n                                    size=\"large\"\n                                    onClick={() => navigate(currentInstance?.tab ? 'easy' : 'tab-intro')}\n                                >\n                                    <ArrowBackIcon />\n                                </IconButton>\n                            )}\n                            <ToggleThemeMenu\n                                t={t}\n                                toggleTheme={toggleTheme}\n                                themeName={themeName as 'dark' | 'blue' | 'colored' | 'light'}\n                                size=\"large\"\n                            />\n                        </div>\n                    </Toolbar>\n                </AppBar>\n                {currentInstance ? (\n                    <Paper style={styles.paper}>\n                        <Config\n                            expertMode\n                            style={styles.iframe}\n                            adapter={currentInstance.id.split('.')[0]}\n                            instance={parseInt(currentInstance.id.split('.')[1], 10)}\n                            jsonConfig={currentInstance.jsonConfig}\n                            materialize={currentInstance.materialize}\n                            tab={currentInstance?.tab}\n                            socket={socket}\n                            easyMode\n                            themeName={themeName}\n                            themeType={themeType}\n                            theme={theme}\n                            width={width}\n                            t={t}\n                            lang={this.props.lang}\n                            icon={currentInstance.icon}\n                            adminInstance={adminInstance}\n                            configStored={configStored}\n                            dateFormat={dateFormat}\n                            isFloatComma={isFloatComma}\n                            // version={currentInstance.version} We don't need a version in easy mode\n                            onRegisterIframeRef={(ref: HTMLIFrameElement) => this.props.onRegisterIframeRef(ref)}\n                            onUnregisterIframeRef={(ref: HTMLIFrameElement) => this.props.onUnregisterIframeRef(ref)}\n                            handleNavigation={this.props.handleNavigation}\n                        />\n                    </Paper>\n                ) : (\n                    <div style={styles.wrapperCard}>\n                        <div style={styles.controlHeight}>\n                            {configs\n                                .sort((a, b) => (a.id < b.id ? -1 : a.id > b.id ? 1 : 0))\n                                .map(el => (\n                                    <EasyModeCard\n                                        key={el.id}\n                                        lang={this.props.lang}\n                                        navigate={() => navigate(null, 'config', el.id)}\n                                        {...el}\n                                    />\n                                ))}\n                        </div>\n                    </div>\n                )}\n            </Paper>\n        );\n    }\n}\n\nexport default EasyMode;\n"],"names":["arrayLogLevel","styles","root","height","display","flexDirection","overflow","scroll","overflowY","instanceIcon","width","marginRight","verticalAlign","button","version","fontSize","opacity","marginLeft","versionAliveConnected","theme","color","palette","mode","versionAliveNotConnected","buttonControl","padding","transition","enabled","green","backgroundColor","disabled","red","hide","visibility","formControl","marginBottom","logLevel","grey","blue","orange","orangeDevice","tooltip","pointerEvents","Config","Component","constructor","props","super","refIframe","registered","onObjectChange","id","obj","_obj$common","_obj$common2","_obj$common3","_obj$common4","this","adapter","instance","setState","running","common","onlyWWW","canStart","loglevel","onStateChange","state","instanceId","alive","val","connectedToHost","connected","extension","tempLogLevel","closeConfig","event","origin","window","location","data","message","easyMode","handleNavigation","configStored","startsWith","url","split","tab","subTab","parameter","checkedExist","showStopAdminDialog","logOnTheFlyValue","logLevelValue","showLogLevelDialog","componentDidUpdate","_this$refIframe","contentWindow","onRegisterIframeRef","componentDidMount","_this$refIframe2","socket","fileExists","then","exist","exists","alert","subscribeObject","getObject","async","_obj$common5","_obj$common6","_obj$common7","_extension","_obj$common8","_obj$common9","_obj$common10","_obj$common11","getState","subscribeState","native","adapterDocLangs","docs","Object","keys","catch","error","console","addEventListener","attachEvent","getInstanceStatus","_this$state$common","_this$state$common2","_this$state$native","status","webExtension","webInstance","_this$state$native2","componentWillUnmount","unsubscribeObject","removeEventListener","detachEvent","onUnregisterIframeRef","renderHelpButton","jsonConfig","_jsx","style","position","right","top","children","Tooltip","title","t","slotProps","popper","sx","Fab","onClick","_this$state$adapterDo","lang","includes","open","AdminUtils","getDocsLinkForAdapter","adapterName","HelpIcon","getConfigurator","JsonConfig","expertMode","themeName","themeType","dateFormat","isFloatComma","DeviceManager","src","materialize","ref","el","returnStopAdminDialog","DialogConfirm","text","ok","onClose","result","extendObject","renderLogLevelDialog","_jsxs","Dialog","DialogTitle","DialogContent","FormControl","marginTop","variant","InputLabel","Select","value","fullWidth","onChange","target","map","MenuItem","FormControlLabel","control","Checkbox","checked","e","label","FormHelperText","DialogActions","Button","render","Paper","AppBar","Toolbar","Typography","IconButton","size","onFocus","stopPropagation","ArrowBack","Icon","icon","preventDefault","adminInstance","PauseIcon","PlayArrowIcon","undefined","RefreshIcon","EditIcon","m","minHeight","background","default","boxShadow","cursor","imageBlock","justifyContent","img","content","zIndex","left","backgroundSize","fontWeight","borderTop","textAlign","textTransform","textOverflow","instanceStateNotAlive1","wrapperDesc","desc","getText","en","_ref","navigate","Card","CardMedia","component","image","appBar","transitions","create","easing","sharp","duration","leavingScreen","wrapperEasyMode","borderRadius","wrapperCard","controlHeight","flexFlow","logoWhite","wrapperHeader","alignItems","headerName","toolBar","margin","paper","paddingTop","iframe","border","IconButtons","logoPointer","EasyMode","configs","strictMode","getEasyMode","config","toggleTheme","getLocation","CircularProgress","currentInstance","find","dialog","ArrowBackIcon","ToggleThemeMenu","parseInt","sort","a","b","EasyModeCard"],"sourceRoot":""}