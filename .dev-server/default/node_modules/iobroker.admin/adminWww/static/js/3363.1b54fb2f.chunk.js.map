{"version":3,"file":"static/js/3363.1b54fb2f.chunk.js","mappings":"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","sources":["components/Intro/IntroCard.tsx","components/Intro/CameraIntroDialog.tsx","components/Intro/IntroCardCamera.tsx","components/Intro/EditIntroLinkDialog.tsx","dialogs/NodeUpdateDialog.tsx","tabs/Intro.tsx","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js"],"sourcesContent":["import React, { Component, type JSX } from 'react';\n\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CardMedia,\n    Collapse,\n    Divider,\n    Grid2,\n    IconButton,\n    Link,\n    Typography,\n    Tooltip,\n    Box,\n} from '@mui/material';\n\nimport {\n    Check as CheckIcon,\n    Create as EditIcon,\n    Close as CloseIcon,\n    Delete as DeleteIcon,\n    Warning as WarningIcon,\n} from '@mui/icons-material';\n\nimport { blue, grey, red } from '@mui/material/colors';\n\nimport { Utils, IconCopy as SaveIcon, type IobTheme, type Translate } from '@iobroker/adapter-react-v5';\n\nimport AdminUtils from '../../helpers/AdminUtils';\n\nconst boxShadow = '0 2px 2px 0 rgba(0, 0, 0, .14),0 3px 1px -2px rgba(0, 0, 0, .12),0 1px 5px 0 rgba(0, 0, 0, .2)';\nconst boxShadowHover = '0 8px 17px 0 rgba(0, 0, 0, .2),0 6px 20px 0 rgba(0, 0, 0, .19)';\n\nexport const styles: Record<string, any> = {\n    root: (theme: IobTheme) => ({\n        padding: '.75rem',\n        [theme.breakpoints.up('xl')]: {\n            flex: '0 1 20%',\n        },\n    }),\n    card: {\n        display: 'flex',\n        minHeight: '235px',\n        position: 'relative',\n        overflow: 'hidden',\n        maxHeight: '235p',\n        '&:hover': {\n            overflowY: 'auto',\n            boxShadow: boxShadowHover,\n        },\n    },\n    cardInfo: {\n        display: 'flex',\n        minHeight: '235px',\n        position: 'relative',\n        overflow: 'initial',\n        maxHeight: '235p',\n        flexDirection: 'column',\n        '&:hover': {\n            // overflowY: 'auto',\n            boxShadow: boxShadowHover,\n        },\n    },\n    cardInfoHead: (theme: IobTheme) => ({\n        position: 'sticky',\n        top: 0,\n        background: theme.palette.background.default,\n        display: 'flex',\n        width: '100%',\n        justifyContent: 'space-between',\n        borderBottom: '1px solid',\n        padding: '5px 5px 0px 5px',\n    }),\n    edit: {\n        opacity: 0.6,\n        userSelect: 'none',\n        pointerEvents: 'none',\n    },\n    media: (theme: IobTheme) => ({\n        backgroundColor: theme.palette.mode === 'dark' ? '#535353' : '#e2e2e2',\n        maxWidth: '30%',\n    }),\n    img: {\n        width: 120,\n        height: 'auto',\n        padding: '2rem .5rem',\n        maxWidth: '100%',\n    },\n    contentContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 1,\n    },\n    content: {\n        height: '170px',\n        flexGrow: 1,\n        overflowY: 'hidden',\n    },\n    action: {\n        minHeight: '49px',\n        padding: '16px 24px',\n    },\n    expand: {\n        position: 'absolute',\n        right: '10px',\n        bottom: '10px',\n    },\n    collapse: {\n        minHeight: '100%',\n        backgroundColor: '#ffffff',\n        position: 'absolute',\n        width: '100%',\n        // '& button': {\n        //     position: 'absolute',\n        //     top: '10px',\n        //     color: '#000000',\n        //     '&:focus': {\n        //         color: '#ffffff',\n        //         backgroundColor: blue[500]\n        //     }\n        // }\n    },\n    close: {\n        right: '10px',\n    },\n    save: {\n        right: '50px',\n    },\n    enabled: {\n        color: '#ffffff',\n        backgroundColor: blue[500],\n        position: 'absolute',\n        top: 8,\n        right: 8,\n        boxShadow,\n        '&:hover': {\n            backgroundColor: blue[300],\n        },\n        '&:focus': {\n            backgroundColor: blue[500],\n        },\n    },\n    disabled: {\n        color: '#ffffff',\n        backgroundColor: grey[500],\n        position: 'absolute',\n        top: 8,\n        right: 8,\n        boxShadow,\n        '&:hover': {\n            backgroundColor: grey[300],\n        },\n        '&:focus': {\n            backgroundColor: grey[500],\n        },\n    },\n    editButton: {\n        color: '#ffffff',\n        backgroundColor: grey[500],\n        position: 'absolute',\n        top: 16 + 48, // 48 is the height of button\n        right: 8,\n        boxShadow,\n        '&:hover': {\n            backgroundColor: grey[300],\n        },\n        '&:focus': {\n            backgroundColor: grey[500],\n        },\n    },\n    deleteButton: {\n        color: '#ffffff',\n        backgroundColor: red[500],\n        position: 'absolute',\n        top: 24 + 48 + 48, // 48 is the height of button\n        right: 8,\n        boxShadow,\n        '&:hover': {\n            backgroundColor: red[300],\n        },\n        '&:focus': {\n            backgroundColor: red[500],\n        },\n    },\n    contentGrid: {\n        height: '100%',\n    },\n    colorOrange: {\n        color: '#ffcc80',\n    },\n    tooltip: {\n        pointerEvents: 'none',\n    },\n};\n\nexport interface IntroCardProps {\n    disabled?: boolean;\n    onEdit?: () => void;\n    offline?: boolean;\n    t: Translate;\n    lang: ioBroker.Languages;\n    /** Shows a warning on the card with given text if configured */\n    warning?: string;\n    edit?: boolean;\n    toggleActivation?: () => void;\n    enabled: boolean;\n    onRemove?: () => void;\n    action: {\n        text: ioBroker.StringOrTranslated;\n        link: string;\n    };\n    color: string;\n    image: string;\n    children?: JSX.Element | JSX.Element[] | string | string[] | null | undefined;\n    title: string | JSX.Element;\n    showInfo?: boolean;\n    getHostDescriptionAll?: () => { el: JSX.Element; text: string };\n    openSnackBarFunc?: () => void;\n    style?: React.CSSProperties;\n    theme: IobTheme;\n}\n\nexport interface IntroCardState {\n    expanded: boolean;\n}\n\nclass IntroCard<TProps extends IntroCardProps, TState extends IntroCardState> extends Component<TProps, TState> {\n    constructor(props: TProps) {\n        super(props);\n\n        this.state = {\n            expanded: false,\n        } as TState;\n    }\n\n    static getDerivedStateFromProps(props: IntroCardProps): Partial<IntroCardState> | null {\n        if (props.edit) {\n            return { expanded: false };\n        }\n        return null;\n    }\n\n    handleExpandClick(): void {\n        this.setState({ expanded: !this.state.expanded });\n    }\n\n    renderContent(): JSX.Element | JSX.Element[] | string | string[] | null | undefined {\n        return this.props.children;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    openDialog(): void {\n        // do nothing\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    renderDialogs(): JSX.Element | null {\n        return null;\n    }\n\n    render(): JSX.Element {\n        const editClass = this.props.edit ? styles.edit : undefined;\n\n        let buttonTitle: ioBroker.StringOrTranslated = this.props.action.text || this.props.t('Link');\n        if (typeof buttonTitle === 'object') {\n            buttonTitle = buttonTitle[this.props.lang] || buttonTitle.en;\n        }\n\n        return (\n            <Grid2\n                size={{\n                    xs: 12,\n                    sm: 6,\n                    md: 4,\n                    lg: 3,\n                }}\n                sx={Utils.getStyle(this.props.theme, styles.root, this.props.style)}\n            >\n                <Link\n                    href={\n                        !this.props.edit && this.props.action && this.props.action.link ? this.props.action.link : null\n                    }\n                    underline=\"none\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <Card\n                        sx={styles.card}\n                        onClick={e => {\n                            e.stopPropagation();\n                            this.openDialog();\n                        }}\n                    >\n                        {this.props.showInfo && !this.props.offline && (\n                            <Button\n                                style={{ ...styles.expand, ...editClass }}\n                                variant=\"contained\"\n                                size=\"small\"\n                                disabled={this.props.disabled}\n                                onClick={() => this.handleExpandClick()}\n                                color=\"primary\"\n                            >\n                                {this.props.t('Info')}\n                            </Button>\n                        )}\n                        <Box\n                            component=\"div\"\n                            sx={Utils.getStyle(\n                                this.props.theme,\n                                styles.media,\n                                editClass,\n                                this.props.color && { backgroundColor: this.props.color },\n                                { display: 'flex', flexDirection: 'column' },\n                            )}\n                        >\n                            <CardMedia\n                                style={styles.img}\n                                component=\"img\"\n                                image={this.props.image}\n                            ></CardMedia>\n                            <div\n                                style={{\n                                    flex: 1,\n                                    display: 'flex',\n                                    paddingBottom: '5px',\n                                    paddingLeft: '5px',\n                                }}\n                            >\n                                {this.props.warning ? (\n                                    <Tooltip\n                                        title={this.props.warning}\n                                        slotProps={{ popper: { sx: styles.tooltip } }}\n                                    >\n                                        <WarningIcon\n                                            style={{\n                                                alignSelf: 'end',\n                                                fontSize: 36,\n                                            }}\n                                        />\n                                    </Tooltip>\n                                ) : null}\n                            </div>\n                        </Box>\n                        <div style={{ ...styles.contentContainer, ...editClass }}>\n                            <CardContent style={styles.content}>\n                                <Grid2\n                                    container\n                                    direction=\"column\"\n                                    wrap=\"nowrap\"\n                                    style={styles.contentGrid}\n                                >\n                                    <Typography\n                                        gutterBottom\n                                        variant=\"h5\"\n                                        component=\"h5\"\n                                    >\n                                        {this.props.title}\n                                    </Typography>\n                                    {this.renderContent()}\n                                </Grid2>\n                            </CardContent>\n                            {this.props.action?.link && <Divider />}\n                            {this.props.action?.link && (\n                                <CardActions style={styles.action}>\n                                    <div style={styles.colorOrange}>\n                                        {AdminUtils.getText(buttonTitle, this.props.lang)}\n                                    </div>\n                                </CardActions>\n                            )}\n                        </div>\n                        {this.props.showInfo && (\n                            <Collapse\n                                style={styles.collapse}\n                                in={this.state.expanded}\n                                timeout=\"auto\"\n                                unmountOnExit\n                            >\n                                <Card sx={styles.cardInfo}>\n                                    <Box\n                                        component=\"div\"\n                                        sx={styles.cardInfoHead}\n                                    >\n                                        <Typography\n                                            gutterBottom\n                                            variant=\"h5\"\n                                            component=\"h5\"\n                                        >\n                                            {this.props.t('Info')}\n                                        </Typography>\n                                        <div>\n                                            <IconButton\n                                                size=\"small\"\n                                                onClick={() => {\n                                                    if (this.props.getHostDescriptionAll) {\n                                                        Utils.copyToClipboard(this.props.getHostDescriptionAll().text);\n                                                    }\n                                                    if (this.props.openSnackBarFunc) {\n                                                        this.props.openSnackBarFunc();\n                                                    }\n                                                }}\n                                            >\n                                                <SaveIcon />\n                                            </IconButton>\n                                            <IconButton\n                                                size=\"small\"\n                                                onClick={() => this.handleExpandClick()}\n                                            >\n                                                <CloseIcon />\n                                            </IconButton>\n                                        </div>\n                                    </Box>\n                                    <CardContent>{this.props.getHostDescriptionAll().el}</CardContent>\n                                </Card>\n                            </Collapse>\n                        )}\n                        {this.props.edit && this.props.toggleActivation && (\n                            <IconButton\n                                size=\"large\"\n                                sx={this.props.enabled ? styles.enabled : styles.disabled}\n                                onClick={() => this.props.toggleActivation()}\n                            >\n                                <CheckIcon />\n                            </IconButton>\n                        )}\n                        {this.props.edit && this.props.onEdit && (\n                            <IconButton\n                                size=\"large\"\n                                sx={styles.editButton}\n                                onClick={() => this.props.onEdit()}\n                            >\n                                <EditIcon />\n                            </IconButton>\n                        )}\n                        {this.props.edit && this.props.onRemove && (\n                            <IconButton\n                                size=\"large\"\n                                sx={styles.deleteButton}\n                                onClick={() => this.props.onRemove()}\n                            >\n                                <DeleteIcon />\n                            </IconButton>\n                        )}\n                        {this.renderDialogs()}\n                    </Card>\n                </Link>\n            </Grid2>\n        );\n    }\n}\n\nexport default IntroCard;\n","import React, { createRef, Component, type JSX } from 'react';\n\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Typography } from '@mui/material';\n\nimport { Close as CloseIcon } from '@mui/icons-material';\n\nimport type { IobTheme, Translate, AdminConnection } from '@iobroker/adapter-react-v5';\n\nconst styles: Record<string, any> = {\n    rootGrid: {\n        flexGrow: 1,\n    },\n    closeButton: (theme: IobTheme) => ({\n        position: 'absolute',\n        right: 8,\n        top: 8,\n        color: theme.palette.grey[500],\n    }),\n    paper: {\n        // minWidth: 600\n    },\n    typography: {\n        paddingRight: 30,\n    },\n    img: {\n        width: '100%',\n        height: '100%',\n        objectFit: 'contain',\n    },\n};\n\ninterface CameraIntroLinkDialogProps {\n    t: Translate;\n    camera: string;\n    socket: AdminConnection;\n    interval?: string;\n    onClose: () => void;\n    name: string | JSX.Element;\n    addTs?: boolean;\n    cameraUrl: string;\n}\n\nclass CameraIntroLinkDialog extends Component<CameraIntroLinkDialogProps> {\n    cameraUpdateTimer: ReturnType<typeof setInterval>;\n\n    cameraRef: React.RefObject<HTMLImageElement>;\n\n    constructor(props: CameraIntroLinkDialogProps) {\n        super(props);\n\n        this.cameraUpdateTimer = null;\n        this.cameraRef = createRef();\n    }\n\n    componentDidMount(): void {\n        if (this.props.camera && this.props.camera !== 'text') {\n            this.cameraUpdateTimer = setInterval(\n                () => this.updateCamera(),\n                Math.max(parseInt(this.props.interval, 10), 500),\n            );\n            this.updateCamera();\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.cameraUpdateTimer) {\n            clearInterval(this.cameraUpdateTimer);\n            this.cameraUpdateTimer = null;\n        }\n    }\n\n    updateCamera(): void {\n        if (this.cameraRef.current) {\n            if (this.props.camera === 'custom') {\n                let url = this.props.cameraUrl;\n                if (this.props.addTs) {\n                    if (url.includes('?')) {\n                        url += `&ts=${Date.now()}`;\n                    } else {\n                        url += `?ts=${Date.now()}`;\n                    }\n                }\n                this.cameraRef.current.src = url;\n            } else {\n                const parts = this.props.camera.split('.');\n                const adapter = parts.shift();\n                const instance = parts.shift();\n                void this.props.socket\n                    .sendTo(`${adapter}.${instance}`, 'image', {\n                        name: parts.pop(),\n                        width: this.cameraRef.current.width,\n                    })\n                    .then(result => {\n                        if (result && result.data && this.cameraRef.current) {\n                            this.cameraRef.current.src = `data:image/jpeg;base64,${result.data}`;\n                        }\n                    });\n            }\n        }\n    }\n\n    render(): JSX.Element {\n        return (\n            <Dialog\n                onClose={() => this.props.onClose()}\n                open={!0}\n                maxWidth=\"xl\"\n                fullWidth\n                fullScreen\n                sx={{ '& .MuiDialog-paper': styles.paper }}\n            >\n                <DialogTitle>\n                    <Typography\n                        component=\"h2\"\n                        variant=\"h6\"\n                        sx={{ '&.MuiTypography-root': styles.typography }}\n                    >\n                        {this.props.name}\n                        <IconButton\n                            size=\"large\"\n                            sx={styles.closeButton}\n                            onClick={() => this.props.onClose()}\n                        >\n                            <CloseIcon />\n                        </IconButton>\n                    </Typography>\n                </DialogTitle>\n                <DialogContent dividers>\n                    <img\n                        style={styles.img}\n                        src=\"\"\n                        alt=\"camera\"\n                        ref={this.cameraRef}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        variant=\"contained\"\n                        autoFocus\n                        onClick={e => {\n                            e.stopPropagation();\n                            this.props.onClose();\n                        }}\n                        color=\"primary\"\n                        startIcon={<CloseIcon />}\n                    >\n                        {this.props.t('Close')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nexport default CameraIntroLinkDialog;\n","import React, { createRef, type JSX } from 'react';\n\nimport { Grid2, Skeleton } from '@mui/material';\n\nimport { Error as ErrorIcon } from '@mui/icons-material';\n\nimport { type AdminConnection } from '@iobroker/adapter-react-v5';\n\nimport IntroCard, { type IntroCardProps, type IntroCardState } from '@/components/Intro/IntroCard';\nimport CameraIntroDialog from './CameraIntroDialog';\n\nconst styles: Record<string, any> = {\n    cameraImg: {\n        width: '100%',\n        height: '100%',\n        maxWidth: 200,\n        maxHeight: 200,\n        objectFit: 'contain',\n    },\n    imgContainer: {\n        height: '100%',\n    },\n    hidden: {\n        display: 'none',\n    },\n    imgSkeleton: {\n        transform: 'initial',\n    },\n};\n\ninterface IntroCardCameraProps extends IntroCardProps {\n    camera?: string;\n    addTs?: boolean;\n    interval?: number;\n    cameraUrl?: string;\n    socket: AdminConnection;\n}\n\ninterface IntroCardCameraState extends IntroCardState {\n    error: boolean;\n    dialog: boolean;\n    loaded: boolean;\n}\n\nclass IntroCardCamera extends IntroCard<IntroCardCameraProps, IntroCardCameraState> {\n    private readonly cameraRef: React.RefObject<HTMLImageElement>;\n\n    private cameraUpdateTimer: ReturnType<typeof setTimeout> | null;\n\n    private interval: number;\n\n    constructor(props: IntroCardCameraProps) {\n        super(props);\n\n        Object.assign(this.state, {\n            error: false,\n            dialog: false,\n            loaded: false,\n        });\n\n        this.cameraRef = createRef<HTMLImageElement>();\n        this.cameraUpdateTimer = null;\n\n        this.interval = props.interval;\n    }\n\n    updateCamera(): void {\n        if (this.cameraRef.current) {\n            if (this.props.camera === 'custom') {\n                let url = this.props.cameraUrl;\n                if (this.props.addTs) {\n                    if (url.includes('?')) {\n                        url += `&ts=${Date.now()}`;\n                    } else {\n                        url += `?ts=${Date.now()}`;\n                    }\n                }\n                this.cameraRef.current.src = url;\n            } else {\n                const parts = this.props.camera.split('.');\n                const adapter = parts.shift();\n                const instance = parts.shift();\n                this.props.socket\n                    .sendTo(`${adapter}.${instance}`, 'image', {\n                        name: parts.pop(),\n                        width: this.cameraRef.current.width,\n                    })\n                    .then((result: { data?: string }) => {\n                        if (result?.data && this.cameraRef.current) {\n                            this.cameraRef.current.src = `data:image/jpeg;base64,${result.data}`;\n                        }\n                    })\n                    .catch((e: string) => window.alert(`Cannot send to instance: ${e}`));\n            }\n        }\n    }\n\n    componentDidMount(): void {\n        if (this.props.camera && this.props.camera !== 'text') {\n            this.cameraUpdateTimer = setInterval(\n                () => this.updateCamera(),\n                Math.max(parseInt(this.props.interval as any as string, 10), 500),\n            );\n            this.updateCamera();\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.cameraUpdateTimer) {\n            clearInterval(this.cameraUpdateTimer);\n            this.cameraUpdateTimer = null;\n        }\n    }\n\n    renderDialogs(): JSX.Element | null {\n        if (!this.state.dialog) {\n            return null;\n        }\n        return (\n            <CameraIntroDialog\n                socket={this.props.socket}\n                camera={this.props.camera}\n                name={this.props.title}\n                t={this.props.t}\n                onClose={() => {\n                    if (this.props.camera && this.props.camera !== 'text') {\n                        if (this.cameraUpdateTimer) {\n                            clearInterval(this.cameraUpdateTimer);\n                        }\n                        this.cameraUpdateTimer = setInterval(\n                            () => this.updateCamera(),\n                            Math.max(parseInt(this.props.interval as any as string, 10), 500),\n                        );\n                        this.updateCamera();\n                    }\n\n                    this.setState({ dialog: false });\n                }}\n                cameraUrl={this.props.cameraUrl}\n            />\n        );\n    }\n\n    handleImageLoad(): void {\n        if (!this.state.loaded) {\n            this.setState({\n                loaded: true,\n                error: false,\n            });\n        }\n    }\n\n    handleImageError(): void {\n        if (!this.state.error) {\n            this.setState({\n                loaded: false,\n                error: true,\n            });\n        }\n    }\n\n    renderContent(): JSX.Element | null {\n        if (this.props.camera === 'custom') {\n            let url = this.props.cameraUrl;\n\n            if (this.props.addTs) {\n                if (url.includes('?')) {\n                    url += `&ts=${Date.now()}`;\n                } else {\n                    url += `?ts=${Date.now()}`;\n                }\n            }\n\n            return (\n                <Grid2\n                    container\n                    style={styles.imgContainer}\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                >\n                    <img\n                        ref={this.cameraRef}\n                        src={url}\n                        alt=\"Camera\"\n                        style={this.state.loaded && !this.state.error ? styles.cameraImg : styles.hidden}\n                        onLoad={() => this.handleImageLoad()}\n                        onError={() => this.handleImageError()}\n                    />\n                    {!this.state.loaded && !this.state.error && (\n                        <Skeleton\n                            height=\"100%\"\n                            width=\"100%\"\n                            animation=\"wave\"\n                            style={styles.imgSkeleton}\n                        />\n                    )}\n                    {this.state.error && <ErrorIcon fontSize=\"large\" />}\n                </Grid2>\n            );\n        }\n\n        if (this.props.camera.startsWith('cameras.')) {\n            return (\n                <img\n                    ref={this.cameraRef}\n                    src=\"\"\n                    alt=\"camera\"\n                    style={styles.cameraImg}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    render(): JSX.Element {\n        if (this.props.camera && this.props.camera !== 'text') {\n            if (this.interval !== this.props.interval) {\n                this.interval = this.props.interval;\n                if (this.cameraUpdateTimer) {\n                    clearInterval(this.cameraUpdateTimer);\n                }\n                this.cameraUpdateTimer = setInterval(\n                    () => this.updateCamera(),\n                    Math.max(parseInt(this.props.interval as any as string, 10), 500),\n                );\n            }\n        } else if (this.cameraUpdateTimer) {\n            clearInterval(this.cameraUpdateTimer);\n            this.cameraUpdateTimer = null;\n        }\n\n        return super.render();\n    }\n}\n\nexport default IntroCardCamera;\n","import React, { Component, type JSX } from 'react';\n\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    TextField,\n    Grid2,\n    IconButton,\n    Typography,\n    FormControlLabel,\n    Checkbox,\n    Slider,\n    InputLabel,\n    MenuItem,\n    FormControl,\n    Select,\n    InputAdornment,\n} from '@mui/material';\n\n// icons\nimport { Add as AddIcon, Check as CheckIcon, Close as CloseIcon } from '@mui/icons-material';\n\nimport { UploadImage, type AdminConnection, type IobTheme, type Translate } from '@iobroker/adapter-react-v5';\n\nimport IntroCardCamera from '@/components/Intro/IntroCardCamera';\nimport IntroCard from './IntroCard';\n\nconst styles: Record<string, any> = {\n    formControl: {\n        marginTop: 32,\n    },\n    rootGrid: {\n        flexGrow: 1,\n    },\n    closeButton: (theme: IobTheme) => ({\n        position: 'absolute',\n        right: 8,\n        top: 8,\n        color: theme.palette.grey[500],\n    }),\n    paper: {\n        // minWidth: 600\n    },\n    typography: {\n        paddingRight: 30,\n    },\n    editItem: {\n        marginTop: 8,\n    },\n    editItemSlider: {\n        marginTop: 24,\n    },\n    labelSlider: {\n        marginTop: 16,\n        fontSize: '1rem',\n    },\n    editColor: {\n        width: '100%',\n    },\n    dropZone: {\n        width: '100%',\n        height: 100,\n        position: 'relative',\n    },\n    dropZoneEmpty: {},\n    image: {\n        height: '100%',\n        width: 'auto',\n        objectFir: 'contain',\n    },\n\n    uploadDiv: {\n        position: 'relative',\n        width: '100%',\n        height: 100,\n        opacity: 0.9,\n    },\n    uploadDivDragging: {\n        opacity: 1,\n    },\n\n    uploadCenterDiv: {\n        margin: 5,\n        border: '3px dashed grey',\n        borderRadius: 5,\n        width: 'calc(100% - 10px)',\n        height: 'calc(100% - 10px)',\n        position: 'relative',\n    },\n    uploadCenterIcon: {\n        paddingTop: 10,\n        width: 48,\n        height: 48,\n    },\n    uploadCenterText: {\n        fontSize: 16,\n    },\n    uploadCenterTextAndIcon: {\n        textAlign: 'center',\n        position: 'absolute',\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n    },\n};\n\ninterface EditIntroLinkDialogProps {\n    t: Translate;\n    lang: ioBroker.Languages;\n    socket: AdminConnection;\n    link: Record<string, any>;\n    onClose: (link?: Record<string, any>) => void;\n    isNew: boolean;\n    theme: IobTheme;\n}\n\ninterface EditIntroLinkDialogState {\n    image: string;\n    name: string;\n    link: string;\n    linkName: string;\n    color: string;\n    desc: string;\n    addTs: boolean;\n    interval: number;\n    camera: string;\n    cameraList: { id: string; name: string }[];\n}\n\nclass EditIntroLinkDialog extends Component<EditIntroLinkDialogProps, EditIntroLinkDialogState> {\n    constructor(props: EditIntroLinkDialogProps) {\n        super(props);\n\n        this.state = {\n            image: '',\n            name: props.t('New link'),\n            link: 'http://',\n            linkName: '',\n            color: '',\n            desc: '',\n            addTs: true,\n            interval: 5000,\n            camera: 'text',\n            cameraList: [],\n            ...props.link,\n        };\n    }\n\n    componentDidMount(): void {\n        this.getCamerasInstances();\n    }\n\n    getCamerasInstances(): void {\n        void this.props.socket.getAdapterInstances('cameras', true).then(list => {\n            const cameraList: { id: string; name: string }[] = [];\n            const promises: Promise<{ id: string; name: string }>[] = [];\n            list.forEach(obj => {\n                const instance = obj._id.replace('system.adapter.', '');\n\n                if (obj.common && obj.common.enabled) {\n                    promises.push(\n                        // if instance is alive\n                        this.props.socket\n                            .getState(`${obj._id}.alive`)\n                            // get the list of cameras\n                            .then(state => state && state.val && this.props.socket.sendTo(instance, 'list', null))\n                            .then(\n                                result =>\n                                    result &&\n                                    result.list &&\n                                    result.list.forEach((cam: { id: string; name: string; desc: string }) =>\n                                        cameraList.push({ id: cam.id, name: `${cam.desc} [${instance}/${cam.name}]` }),\n                                    ),\n                            ),\n                    );\n                }\n            });\n\n            void Promise.all(promises).then(() => this.setState({ cameraList }));\n        });\n    }\n\n    static getLinkNameFromLink(link: string): string {\n        const m = link.trim().match(/^https?:\\/\\/([^/:]+)(:\\d+)?/);\n        if (m) {\n            return m[1] + (m[2] || '');\n        }\n        return '';\n    }\n\n    render(): JSX.Element {\n        return (\n            <Dialog\n                onClose={() => this.props.onClose()}\n                open={!0}\n                maxWidth=\"md\"\n                fullWidth\n                sx={{ '& .MuiDialog-paper': styles.paper }}\n            >\n                <DialogTitle>\n                    <Typography\n                        component=\"h2\"\n                        variant=\"h6\"\n                        sx={{ '&.MuiTypography-root': styles.typography }}\n                    >\n                        {this.props.isNew ? this.props.t('Add new link: ') : this.props.t('Edit link')}\n                        <IconButton\n                            size=\"large\"\n                            sx={styles.closeButton}\n                            onClick={() => this.props.onClose()}\n                        >\n                            <CloseIcon />\n                        </IconButton>\n                    </Typography>\n                </DialogTitle>\n                <DialogContent dividers>\n                    <Grid2\n                        style={styles.rootGrid}\n                        container\n                        direction=\"row\"\n                    >\n                        <Grid2\n                            size={{\n                                xs: 12,\n                                sm: 6,\n                                md: 8,\n                                lg: 9,\n                            }}\n                        >\n                            <Grid2\n                                container\n                                direction=\"column\"\n                            >\n                                <FormControl\n                                    variant=\"standard\"\n                                    style={styles.formControl}\n                                >\n                                    <InputLabel id=\"select-helper-label\">{this.props.t('Link type')}</InputLabel>\n                                    <Select\n                                        variant=\"standard\"\n                                        labelId=\"select-helper-label\"\n                                        value={this.state.camera}\n                                        onChange={e => this.setState({ camera: e.target.value })}\n                                    >\n                                        <MenuItem\n                                            value=\"text\"\n                                            key=\"desc\"\n                                        >\n                                            <em>{this.props.t('Description')}</em>\n                                        </MenuItem>\n                                        {this.state.cameraList.map(cam => (\n                                            <MenuItem\n                                                key={cam.id}\n                                                value={cam.id}\n                                            >\n                                                {cam.name}\n                                            </MenuItem>\n                                        ))}\n                                        <MenuItem\n                                            value=\"custom\"\n                                            key=\"custom\"\n                                        >\n                                            {this.props.t('Custom camera URL')}\n                                        </MenuItem>\n                                    </Select>\n                                </FormControl>\n\n                                <TextField\n                                    variant=\"standard\"\n                                    label={this.props.t('URL')}\n                                    value={this.state.link}\n                                    style={styles.editItem}\n                                    onChange={e => {\n                                        const oldLinkName = EditIntroLinkDialog.getLinkNameFromLink(this.state.link);\n                                        if (\n                                            oldLinkName &&\n                                            (!this.state.linkName || oldLinkName === this.state.linkName)\n                                        ) {\n                                            this.setState({\n                                                link: e.target.value,\n                                                linkName: EditIntroLinkDialog.getLinkNameFromLink(e.target.value),\n                                            });\n                                        } else {\n                                            this.setState({ link: e.target.value });\n                                        }\n                                    }}\n                                    slotProps={{\n                                        input: {\n                                            endAdornment: this.state.link ? (\n                                                <InputAdornment position=\"end\">\n                                                    <IconButton\n                                                        size=\"small\"\n                                                        onClick={() => this.setState({ link: '' })}\n                                                    >\n                                                        <CloseIcon />\n                                                    </IconButton>\n                                                </InputAdornment>\n                                            ) : null,\n                                        },\n                                    }}\n                                />\n\n                                <TextField\n                                    variant=\"standard\"\n                                    style={styles.editItem}\n                                    label={this.props.t('Name')}\n                                    value={this.state.name || ''}\n                                    onChange={e => this.setState({ name: e.target.value })}\n                                    slotProps={{\n                                        input: {\n                                            endAdornment: this.state.name ? (\n                                                <InputAdornment position=\"end\">\n                                                    <IconButton\n                                                        size=\"small\"\n                                                        onClick={() => this.setState({ name: '' })}\n                                                    >\n                                                        <CloseIcon />\n                                                    </IconButton>\n                                                </InputAdornment>\n                                            ) : null,\n                                        },\n                                    }}\n                                />\n\n                                {this.state.link ? (\n                                    <TextField\n                                        variant=\"standard\"\n                                        style={styles.editItem}\n                                        label={this.props.t('Link name')}\n                                        value={this.state.linkName || ''}\n                                        onChange={e => this.setState({ linkName: e.target.value })}\n                                        slotProps={{\n                                            input: {\n                                                endAdornment: this.state.linkName ? (\n                                                    <InputAdornment position=\"end\">\n                                                        <IconButton\n                                                            size=\"small\"\n                                                            onClick={() => this.setState({ linkName: '' })}\n                                                        >\n                                                            <CloseIcon />\n                                                        </IconButton>\n                                                    </InputAdornment>\n                                                ) : null,\n                                            },\n                                        }}\n                                    />\n                                ) : null}\n\n                                {this.state.camera === 'custom' || this.state.camera === 'text' ? (\n                                    <TextField\n                                        variant=\"standard\"\n                                        style={styles.editItem}\n                                        label={\n                                            this.state.camera === 'custom'\n                                                ? this.props.t('Camera URL')\n                                                : this.props.t('Description')\n                                        }\n                                        value={this.state.desc || ''}\n                                        onChange={e => this.setState({ desc: e.target.value })}\n                                        slotProps={{\n                                            input: {\n                                                endAdornment: this.state.desc ? (\n                                                    <InputAdornment position=\"end\">\n                                                        <IconButton\n                                                            size=\"small\"\n                                                            onClick={() => this.setState({ desc: '' })}\n                                                        >\n                                                            <CloseIcon />\n                                                        </IconButton>\n                                                    </InputAdornment>\n                                                ) : null,\n                                            },\n                                        }}\n                                    />\n                                ) : null}\n\n                                {this.state.camera === 'custom' ? (\n                                    <FormControlLabel\n                                        style={styles.editItem}\n                                        control={\n                                            <Checkbox\n                                                checked={this.state.addTs}\n                                                onChange={e => this.setState({ addTs: e.target.checked })}\n                                            />\n                                        }\n                                        label={this.props.t('Add timestamp to URL')}\n                                    />\n                                ) : null}\n\n                                {this.state.camera !== 'text' ? (\n                                    <Typography\n                                        style={styles.labelSlider}\n                                        gutterBottom\n                                    >\n                                        Polling interval in ms\n                                    </Typography>\n                                ) : null}\n                                {this.state.camera !== 'text' ? (\n                                    <Slider\n                                        style={styles.editItemSlider}\n                                        value={this.state.interval}\n                                        getAriaValueText={() => `${this.state.interval}ms`}\n                                        onChange={(e, interval) => this.setState({ interval: interval as number })}\n                                        step={100}\n                                        min={500}\n                                        max={60000}\n                                        valueLabelDisplay=\"on\"\n                                    />\n                                ) : null}\n\n                                <div style={{ ...styles.editItem, width: 50 }}>\n                                    <TextField\n                                        variant=\"standard\"\n                                        fullWidth\n                                        label={this.props.t('Color')}\n                                        style={styles.editColor}\n                                        type=\"color\"\n                                        value={this.state.color}\n                                        onChange={e => this.setState({ color: e.target.value })}\n                                    />\n                                </div>\n                                <UploadImage\n                                    disabled={false}\n                                    crop\n                                    maxSize={256 * 1024}\n                                    icon={this.state.image}\n                                    removeIconFunc={() => this.setState({ image: '' })}\n                                    onChange={base64 => this.setState({ image: base64 })}\n                                    // t={this.props.t}\n                                />\n                            </Grid2>\n                        </Grid2>\n                        <Grid2\n                            size={{\n                                xs: 12,\n                                sm: 6,\n                                md: 4,\n                                lg: 3,\n                            }}\n                        >\n                            {this.state.camera === 'text' ? (\n                                <IntroCard\n                                    image={this.state.image}\n                                    title={this.state.name}\n                                    action={{ link: this.state.link, text: this.state.linkName }}\n                                    t={this.props.t}\n                                    lang={this.props.lang}\n                                    style={{ width: '100% !important', maxWidth: '100% !important', marginLeft: '8px' }}\n                                    color={this.state.color}\n                                    enabled\n                                    theme={this.props.theme}\n                                >\n                                    {this.state.desc}\n                                </IntroCard>\n                            ) : (\n                                <IntroCardCamera\n                                    interval={this.state.interval}\n                                    camera={this.state.camera}\n                                    addTs={this.state.addTs}\n                                    style={{ width: '100% !important', maxWidth: '100% !important', marginLeft: '8px' }}\n                                    image={this.state.image}\n                                    title={this.state.name}\n                                    socket={this.props.socket}\n                                    action={{ link: this.state.link, text: this.state.linkName }}\n                                    t={this.props.t}\n                                    lang={this.props.lang}\n                                    color={this.state.color}\n                                    enabled\n                                    cameraUrl={this.state.desc}\n                                    theme={this.props.theme}\n                                />\n                            )}\n                        </Grid2>\n                    </Grid2>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        variant=\"contained\"\n                        autoFocus\n                        onClick={() => {\n                            this.props.onClose({\n                                link: this.state.link,\n                                name: this.state.name,\n                                desc: this.state.desc,\n                                linkName: this.state.linkName,\n                                color: this.state.color,\n                                image: this.state.image,\n                                addTs: this.state.addTs,\n                                camera: this.state.camera,\n                                interval: this.state.interval,\n                            });\n                        }}\n                        color=\"primary\"\n                        startIcon={this.props.isNew ? <AddIcon /> : <CheckIcon />}\n                    >\n                        {this.props.isNew ? this.props.t('Add') : this.props.t('Save')}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() => this.props.onClose()}\n                        color=\"grey\"\n                        startIcon={<CloseIcon />}\n                    >\n                        {this.props.t('Close')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nexport default EditIntroLinkDialog;\n","import React, { type JSX } from 'react';\nimport {\n    Box,\n    Button,\n    CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Typography,\n} from '@mui/material';\nimport { Close as CloseIcon, Refresh as RefreshIcon } from '@mui/icons-material';\n\nimport { type AdminConnection, I18n } from '@iobroker/adapter-react-v5';\n\ninterface NodeUpdateDialogProps {\n    /** Called when user closes dialog */\n    onClose: () => void;\n    /** The socket connection */\n    socket: AdminConnection;\n    /** The host id of the host to upgrade node.js on */\n    hostId: string;\n    /** The node.js version to upgrade to */\n    // version: string;\n}\n\ninterface NodeUpdateDialogState {\n    /** If update is in progress */\n    inProgress: boolean;\n    /** Result from controller */\n    success: boolean;\n    /** Error from controller */\n    error: string;\n    /** If execution finished */\n    finished: boolean;\n}\n\nexport default class NodeUpdateDialog extends React.Component<NodeUpdateDialogProps, NodeUpdateDialogState> {\n    constructor(props: NodeUpdateDialogProps) {\n        super(props);\n\n        this.state = {\n            inProgress: false,\n            success: false,\n            error: '',\n            finished: false,\n        };\n    }\n\n    /**\n     * Render the element\n     */\n    render(): JSX.Element {\n        return (\n            <Dialog\n                open={!0}\n                maxWidth=\"lg\"\n                fullWidth\n            >\n                <DialogTitle>{I18n.t('Node.js upgrade')}</DialogTitle>\n                <DialogContent style={{ height: 100, padding: '0 20px', overflow: 'hidden' }}>\n                    {!this.state.finished ? (\n                        <Typography>\n                            {I18n.t('Performing this update will restart the js-controller afterwards!')}\n                        </Typography>\n                    ) : null}\n                    {this.state.inProgress ? (\n                        <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n                            <CircularProgress />\n                        </Box>\n                    ) : null}\n                    {this.state.success ? (\n                        <Typography>{I18n.t('Node.js update successful, restarting controller now!')}</Typography>\n                    ) : null}\n                    {this.state.error ? (\n                        <Typography sx={{ color: 'red' }}>\n                            {I18n.t('Node.js update failed: %s', this.state.error)}\n                        </Typography>\n                    ) : null}\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        disabled={this.state.inProgress || this.state.finished}\n                        color=\"primary\"\n                        variant=\"contained\"\n                        startIcon={<RefreshIcon />}\n                        onClick={() => this.updateNodeJsVersion()}\n                    >\n                        {I18n.t('Upgrade')}\n                    </Button>\n                    <Button\n                        disabled={this.state.inProgress}\n                        variant=\"contained\"\n                        onClick={() => {\n                            this.props.onClose();\n                        }}\n                        color=\"primary\"\n                        startIcon={<CloseIcon />}\n                    >\n                        {I18n.t('Close')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n\n    /**\n     * Update Node.js to given version and restart the controller afterward\n     */\n    async updateNodeJsVersion(): Promise<void> {\n        this.setState({ inProgress: true });\n        const res = await this.props.socket.upgradeOsPackages(\n            this.props.hostId,\n            [\n                {\n                    name: 'nodejs',\n                    // For apt updates we need to be precise about the version, e.g. `18.20.2-1nodesource1`, thus we simply upgrade to the newest version instead\n                    // version: this.props.version,\n                },\n            ],\n            // restart the controller after the Node.js update\n            true,\n        );\n\n        this.setState({\n            inProgress: false,\n            success: res.success,\n            error: res.error,\n            finished: true,\n        });\n    }\n}\n","import React, { type JSX } from 'react';\n\nimport semver from 'semver';\n\nimport { Fab, Snackbar, Tooltip, Grid2, LinearProgress, Skeleton } from '@mui/material';\n\nimport {\n    Add as AddIcon,\n    Check as CheckIcon,\n    Close as CloseIcon,\n    Create as CreateIcon,\n    Refresh as RefreshIcon,\n} from '@mui/icons-material';\n\nimport {\n    type AdminConnection,\n    Utils as UtilsCommon,\n    type IobTheme,\n    type Translate,\n    TabContainer,\n    TabContent,\n} from '@iobroker/adapter-react-v5';\n\nimport type InstancesWorker from '@/Workers/InstancesWorker';\nimport type HostsWorker from '@/Workers/HostsWorker';\nimport { type HostAliveEvent, type HostEvent } from '@/Workers/HostsWorker';\nimport AdminUtils from '@/helpers/AdminUtils';\nimport { replaceLink } from '@/helpers/utils';\nimport IntroCard from '@/components/Intro/IntroCard';\nimport EditIntroLinkDialog from '@/components/Intro/EditIntroLinkDialog';\n\nimport { type InstanceEvent } from '@/Workers/InstancesWorker';\nimport NodeUpdateDialog from '@/dialogs/NodeUpdateDialog';\nimport IntroCardCamera from '@/components/Intro/IntroCardCamera';\n\ntype OldLinkStructure = {\n    link: string;\n    color?: string;\n    order?: number | string;\n    icon?: string;\n    img?: string;\n    description?: ioBroker.StringOrTranslated;\n    pro?: string | boolean;\n    cloud?: string;\n    intro?: boolean;\n    name?: ioBroker.StringOrTranslated;\n    localLinks?: string;\n};\n\nexport type CompactHost = {\n    _id: `system.host.${string}`;\n    common: {\n        name: string;\n        icon?: string;\n        color?: string;\n        installedVersion?: string;\n    };\n    native: {\n        hardware: {\n            networkInterfaces?: ioBroker.HostNative['hardware']['networkInterfaces'];\n        };\n    };\n};\n\nconst styles: Record<string, any> = {\n    root: {\n        width: '100%',\n        height: '100%',\n    },\n    button: {\n        position: 'absolute',\n        bottom: 16,\n        right: 16,\n    },\n    saveButton: (theme: IobTheme) => ({\n        backgroundColor: theme.palette.success.main,\n        right: 80,\n        '&:hover': {\n            backgroundColor: theme.palette.success.dark,\n        },\n    }),\n    addButton: (theme: IobTheme) => ({\n        backgroundColor: theme.palette.secondary.main,\n        right: 144,\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.dark,\n        },\n    }),\n    closeButton: (theme: IobTheme) => ({\n        backgroundColor: theme.palette.error.main,\n        '&:hover': {\n            backgroundColor: theme.palette.error.dark,\n        },\n    }),\n    bold: {\n        fontWeight: 'bold',\n    },\n    container: {\n        overflowY: 'auto',\n    },\n    hostOffline: {\n        color: '#bb0000',\n    },\n    updateExists: {\n        color: '#c28700',\n        marginRight: 4,\n    },\n    updateNo: {\n        color: '#00b204',\n        marginRight: 4,\n    },\n    nodeUpdate: {\n        opacity: 0.6,\n    },\n    instanceNumber: {\n        opacity: 0.7,\n        fontSize: 16,\n    },\n    updateIcon: {\n        cursor: 'pointer',\n        fontSize: 16,\n    },\n    tooltip: {\n        pointerEvents: 'none',\n    },\n};\n\ninterface ReverseProxyItem {\n    globalPath: string;\n    paths: { path: string; instance: string }[];\n}\n\ninterface LinkItem {\n    id: string;\n    link: string;\n    name: string;\n    description: string;\n    order: number;\n\n    color?: string;\n    icon: string;\n    cloud?: string;\n    pro?: string;\n    intro?: boolean;\n    /** Is this link should be first */\n    default?: boolean;\n}\n\ninterface IntroInstanceItem {\n    id: string;\n    name?: string;\n    color?: string;\n    description?: string;\n    image?: string;\n    link?: string;\n    linkName?: string;\n    order?: number;\n    info: string;\n    port?: number;\n}\n\ninterface HostData {\n    alive: boolean;\n    time?: number;\n    _nodeNewest?: string;\n    _nodeNewestNext?: string;\n    'Node.js'?: string;\n    _npmNewest?: string;\n    NPM?: string;\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    Platform?: 'win32' | 'linux' | 'darwin' | 'freebsd' | 'sunos' | string;\n    RAM?: number;\n    _npmNewestNext?: string;\n    _versions?: Record<string, string>;\n    dockerInformation?: {\n        isDocker: boolean;\n        isOfficial: boolean;\n        officialVersion: string;\n    };\n    [key: string]: string | boolean | number | Record<string, string | boolean>;\n}\n\nconst formatInfo: Record<string, (seconds: number, t?: Translate) => string> = {\n    Uptime: AdminUtils.formatSeconds,\n    'System uptime': AdminUtils.formatSeconds,\n    RAM: AdminUtils.formatRam,\n    Speed: AdminUtils.formatSpeed,\n    'Disk size': AdminUtils.formatBytes,\n    'Disk free': AdminUtils.formatBytes,\n};\n\ninterface IntroProps {\n    showAlert: (message: string, type?: 'error' | 'warning' | 'info' | 'success') => void;\n    socket: AdminConnection;\n    t: Translate;\n    lang: ioBroker.Languages;\n    instancesWorker: InstancesWorker;\n    hostsWorker: HostsWorker;\n    hostname: string;\n    adminInstance: string;\n    theme: IobTheme;\n}\n\ninterface NodeUpdateDialogInfo {\n    /** The host id of the host to upgrade node.js on */\n    hostId: string;\n    /** The node.js version to upgrade to */\n    version: string;\n}\n\ntype ItemCamera = {\n    camera: 'custom';\n    enabled: boolean;\n    link: string;\n    name: string;\n    /** Title of the link */\n    linkName: string;\n    /** Camera URL */\n    desc: string;\n    /** Add timestamp on the image */\n    addTs: boolean;\n    /** Polling interval in milliseconds */\n    interval: number;\n    color: string;\n    /** base64 image */\n    image: string;\n};\n\ntype ItemLink = {\n    camera: 'text';\n    enabled: boolean;\n    link: string;\n    name: string;\n    /** Title of the link */\n    linkName: string;\n    /** Camera URL */\n    desc: string;\n    color: string;\n    /** base64 image */\n    image: string;\n};\n\ntype ItemElement = ItemCamera | ItemLink;\n\ninterface IntroState {\n    /** Difference between client and host time in ms */\n    hostTimeDiffMap: Map<string, number>;\n    hostsData: Record<string, HostData>;\n    alive: Record<string, boolean>;\n    reverseProxy: null | ReverseProxyItem[];\n    hasUnsavedChanges: boolean;\n    openSnackBar: boolean;\n    editLinkIndex: number;\n    editLink: boolean;\n    link: null | ItemElement;\n    introLinks: ItemElement[] | null;\n    edit: boolean;\n    deactivated: string[] | null;\n    instances: null | IntroInstanceItem[];\n    hosts: CompactHost[] | null;\n    /** If controller supports upgrade of nodejs */\n    nodeUpdateSupported: boolean;\n    /** If node update dialog should be shown */\n    nodeUpdateDialog: null | NodeUpdateDialogInfo;\n}\n\nclass Intro extends React.Component<IntroProps, IntroState> {\n    /** If server time differs more than MS from client time, show a warning */\n    #THRESHOLD_TIME_DIFF_MS = 30 * 60 * 1_000;\n\n    #ONE_MINUTE_MS = 60 * 1_000;\n\n    /** // e.g. /admin/; */\n    private readonly currentProxyPath = window.location.pathname;\n\n    private introLinksOriginal?: string;\n\n    private deactivatedOriginal?: string[];\n\n    private readonly t: Translate;\n\n    private getDataTimeout?: ReturnType<typeof setTimeout>;\n\n    constructor(props: IntroProps) {\n        super(props);\n\n        this.state = {\n            instances: null,\n            deactivated: [],\n            edit: false,\n            link: null,\n            introLinks: [],\n            editLink: false,\n            editLinkIndex: -1,\n            openSnackBar: false,\n            hasUnsavedChanges: false,\n            reverseProxy: null,\n            alive: {},\n            hostsData: {},\n            hosts: null,\n            /** Difference between client and host time in ms */\n            hostTimeDiffMap: new Map(),\n            nodeUpdateSupported: false,\n            nodeUpdateDialog: null,\n        };\n\n        this.t = props.t;\n    }\n\n    /**\n     * Compares the backend time with the frontend time\n     */\n    checkBackendTime(): void {\n        const timeDiffMap = this.state.hostTimeDiffMap;\n\n        for (const [hostId, hostData] of Object.entries(this.state.hostsData)) {\n            const currDate = new Date();\n            const diff = Math.abs(hostData.time - currDate.getTime());\n\n            timeDiffMap.set(hostId, diff);\n        }\n\n        this.setState({ hostTimeDiffMap: timeDiffMap });\n    }\n\n    /**\n     * React lifecycle hook called when component did mount\n     */\n    async componentDidMount(): Promise<void> {\n        await this.getData();\n        this.props.instancesWorker.registerHandler(this.getDataDelayed);\n        this.props.hostsWorker.registerHandler(this.updateHosts);\n        this.props.hostsWorker.registerAliveHandler(this.updateHostsAlive);\n\n        const nodeUpdateSupported = await this.props.socket.checkFeatureSupported('CONTROLLER_OS_PACKAGE_UPGRADE');\n\n        // read reverse proxy settings\n        const obj = await this.props.socket.getObject(`system.adapter.${this.props.adminInstance}`);\n        this.setState({ nodeUpdateSupported, reverseProxy: obj?.native?.reverseProxy || [] });\n        this.checkBackendTime();\n    }\n\n    componentWillUnmount(): void {\n        if (this.getDataTimeout) {\n            clearTimeout(this.getDataTimeout);\n            this.getDataTimeout = undefined;\n        }\n\n        this.props.instancesWorker.unregisterHandler(this.getDataDelayed);\n        this.props.hostsWorker.unregisterHandler(this.updateHosts);\n        this.props.hostsWorker.unregisterAliveHandler(this.updateHostsAlive);\n    }\n\n    updateHostsAlive = async (events: HostAliveEvent[]): Promise<void> => {\n        const alive: Record<string, boolean> = JSON.parse(JSON.stringify(this.state.alive));\n        const hostsId: string[] = [];\n\n        // if some host deleted\n        if (events.find(event => event.type === 'deleted')) {\n            // get all information anew\n            this.getDataDelayed();\n            return;\n        }\n        // update alive status\n        events.forEach(event => {\n            if (!!alive[event.id] !== !!event.alive) {\n                alive[event.id] = event.alive;\n                hostsId.push(event.id);\n            }\n        });\n\n        if (hostsId.length) {\n            const hostsData: Record<string, HostData> = JSON.parse(JSON.stringify(this.state.hostsData));\n\n            const results = await Promise.all(hostsId.map(id => this.getHostData(id, alive[id])));\n            results.forEach(res => (hostsData[res.id] = Intro.preprocessHostData(res.data)));\n            this.setState({ alive, hostsData }, () => this.checkBackendTime());\n        }\n    };\n\n    updateHosts = (events: HostEvent[]): void => {\n        let hostsId = [];\n\n        // if host deleted\n        if (events.find(event => !event.obj)) {\n            this.getDataDelayed();\n            return;\n        }\n        hostsId = events.map(event => event.id);\n\n        if (hostsId.length) {\n            const hostsData: Record<string, HostData> = JSON.parse(JSON.stringify(this.state.hostsData));\n\n            void Promise.all(hostsId.map(id => this.getHostData(id))).then(results => {\n                results.forEach(res => (hostsData[res.id] = Intro.preprocessHostData(res.data)));\n                this.setState({ hostsData });\n            });\n        }\n    };\n\n    async activateEditMode(): Promise<void> {\n        const systemConfig: ioBroker.SystemConfigObject = await this.props.socket.getSystemConfig(true);\n        const data: { instances: IntroInstanceItem[]; deactivated: string[] } = await this.getInstances(\n            true,\n            null,\n            systemConfig,\n        );\n        const introLinks = systemConfig?.native?.introLinks ? (systemConfig.native.introLinks as ItemElement[]) : [];\n\n        this.introLinksOriginal = JSON.stringify(introLinks);\n        this.deactivatedOriginal = JSON.parse(JSON.stringify(data.deactivated));\n\n        this.setState({\n            instances: data.instances,\n            deactivated: data.deactivated,\n            edit: true,\n            introLinks,\n            hasUnsavedChanges: false,\n        });\n    }\n\n    deactivateEditMode(): void {\n        if (!this.state.hasUnsavedChanges) {\n            // todo: implement confirmation dialog\n        }\n\n        // restore old state\n        this.setState(\n            {\n                deactivated: this.deactivatedOriginal,\n                introLinks: JSON.parse(this.introLinksOriginal),\n                hasUnsavedChanges: false,\n                edit: false,\n            },\n            () => {\n                this.deactivatedOriginal = null;\n                this.introLinksOriginal = null;\n            },\n        );\n    }\n\n    toggleCard(id: string, linkName: string): void {\n        if (!this.state.instances || !this.state.instances.length) {\n            return;\n        }\n\n        const deactivated = JSON.parse(JSON.stringify(this.state.deactivated));\n\n        const pos = deactivated.indexOf(`${id}_${linkName}`);\n\n        if (pos !== -1) {\n            deactivated.splice(pos, 1);\n        } else {\n            deactivated.push(`${id}_${linkName}`);\n            deactivated.sort();\n        }\n\n        const hasUnsavedChanges =\n            JSON.stringify(deactivated) !== JSON.stringify(this.deactivatedOriginal) ||\n            JSON.stringify(this.state.introLinks) !== this.introLinksOriginal;\n\n        this.setState({ deactivated, hasUnsavedChanges });\n    }\n\n    getInstancesCards(): (JSX.Element | null)[] {\n        return this.state.instances?.map(instance => {\n            const enabled = !this.state.deactivated?.includes(`${instance.id}_${instance.linkName}`);\n            if (enabled || this.state.edit) {\n                let linkText = instance.link ? instance.link.replace(/^https?:\\/\\//, '') : '';\n                linkText = linkText.split('/')[0];\n\n                // ignore own admin instance\n                if (instance.id === this.props.adminInstance) {\n                    return null;\n                }\n\n                let isShowInstance = window.isFinite(instance.id.split('.').pop() as any);\n                if (isShowInstance) {\n                    // try to find second instance of a same type\n                    isShowInstance = !!this.state.instances?.find(\n                        inst =>\n                            inst.id !== instance.id &&\n                            instance.name === inst.name &&\n                            instance.id.split('.')[0] === inst.id.split('.')[0],\n                    );\n                }\n\n                const hostData = this.state.hostsData ? this.state.hostsData[instance.id] : null;\n                const timeDiff = this.state.hostTimeDiffMap.get(instance.id) ?? 0;\n                return (\n                    <IntroCard\n                        key={`${instance.id}_${instance.link}`}\n                        image={instance.image}\n                        title={\n                            <>\n                                <span\n                                    style={\n                                        instance.name && instance.name.length > 12 ? { fontSize: '1rem' } : undefined\n                                    }\n                                >\n                                    {instance.name}\n                                </span>\n                                {isShowInstance ? (\n                                    <span style={styles.instanceNumber}>.{instance.id.split('.').pop()}</span>\n                                ) : null}\n                            </>\n                        }\n                        action={{ link: instance.link, text: linkText }}\n                        t={this.props.t}\n                        lang={this.props.lang}\n                        color={instance.color}\n                        showInfo={!!instance.info}\n                        edit={this.state.edit}\n                        offline={hostData && hostData.alive === false}\n                        warning={\n                            timeDiff > this.#THRESHOLD_TIME_DIFF_MS\n                                ? this.t(\n                                      'Backend time differs by %s minutes',\n                                      Math.round(timeDiff / this.#ONE_MINUTE_MS).toString(),\n                                  )\n                                : null\n                        }\n                        enabled={enabled}\n                        disabled={!hostData || typeof hostData !== 'object'}\n                        getHostDescriptionAll={() => this.getHostDescriptionAll(instance.id)}\n                        toggleActivation={() => this.toggleCard(instance.id, instance.linkName)}\n                        openSnackBarFunc={() => this.setState({ openSnackBar: true })}\n                        theme={this.props.theme}\n                    >\n                        {instance.description || this.getHostDescription(instance.id)}\n                    </IntroCard>\n                );\n            }\n            return null;\n        });\n    }\n\n    toggleLinkCard(i: number): void {\n        const introLinks = JSON.parse(JSON.stringify(this.state.introLinks));\n\n        introLinks[i].enabled = !introLinks[i].enabled;\n\n        const hasUnsavedChanges =\n            JSON.stringify(this.state.deactivated) !== JSON.stringify(this.deactivatedOriginal) ||\n            JSON.stringify(introLinks) !== this.introLinksOriginal;\n\n        this.setState({ introLinks, hasUnsavedChanges });\n    }\n\n    getLinkCards(): (JSX.Element | null)[] {\n        return this.state.introLinks?.map((item, i) => {\n            if (!item.enabled && !this.state.edit) {\n                return null;\n            }\n\n            if (item.camera === 'custom') {\n                return (\n                    <IntroCardCamera\n                        key={`link${i}`}\n                        image={item.image}\n                        title={item.name}\n                        action={{ link: item.link, text: item.linkName }}\n                        t={this.props.t}\n                        socket={this.props.socket}\n                        color={item.color}\n                        edit={this.state.edit}\n                        interval={item.interval}\n                        camera={item.camera}\n                        addTs={item.addTs}\n                        onEdit={() =>\n                            this.setState({\n                                editLink: true,\n                                editLinkIndex: i,\n                                link: JSON.parse(JSON.stringify(this.state.introLinks?.[i])),\n                            })\n                        }\n                        onRemove={() => {\n                            const introLinks = JSON.parse(JSON.stringify(this.state.introLinks));\n                            introLinks.splice(i, 1);\n                            const hasUnsavedChanges =\n                                JSON.stringify(this.state.deactivated) !== JSON.stringify(this.deactivatedOriginal) ||\n                                JSON.stringify(introLinks) !== this.introLinksOriginal;\n                            this.setState({ introLinks, hasUnsavedChanges });\n                        }}\n                        enabled={item.enabled}\n                        lang={this.props.lang}\n                        toggleActivation={() => this.toggleLinkCard(i)}\n                        cameraUrl={item.desc}\n                        theme={this.props.theme}\n                    />\n                );\n            }\n\n            return (\n                <IntroCard\n                    key={`link${i}`}\n                    image={item.image}\n                    title={item.name}\n                    action={{ link: item.link, text: item.linkName }}\n                    t={this.props.t}\n                    color={item.color}\n                    edit={this.state.edit}\n                    onEdit={() =>\n                        this.setState({\n                            editLink: true,\n                            editLinkIndex: i,\n                            link: JSON.parse(JSON.stringify(this.state.introLinks?.[i])),\n                        })\n                    }\n                    onRemove={() => {\n                        const introLinks = JSON.parse(JSON.stringify(this.state.introLinks));\n                        introLinks.splice(i, 1);\n                        const hasUnsavedChanges =\n                            JSON.stringify(this.state.deactivated) !== JSON.stringify(this.deactivatedOriginal) ||\n                            JSON.stringify(introLinks) !== this.introLinksOriginal;\n                        this.setState({ introLinks, hasUnsavedChanges });\n                    }}\n                    enabled={item.enabled}\n                    lang={this.props.lang}\n                    toggleActivation={() => this.toggleLinkCard(i)}\n                    theme={this.props.theme}\n                >\n                    {item.desc || ''}\n                </IntroCard>\n            );\n        });\n    }\n\n    editLinkCard(): JSX.Element | null {\n        if (this.state.editLink) {\n            return (\n                <EditIntroLinkDialog\n                    link={this.state.link}\n                    socket={this.props.socket}\n                    isNew={this.state.editLinkIndex === -1}\n                    t={this.props.t}\n                    lang={this.props.lang}\n                    theme={this.props.theme}\n                    onClose={link => {\n                        if (link) {\n                            const introLinks = JSON.parse(JSON.stringify(this.state.introLinks));\n                            if (this.state.editLinkIndex === -1) {\n                                link.enabled = true;\n                                introLinks.push(link);\n                            } else {\n                                link.enabled = introLinks[this.state.editLinkIndex].enabled;\n                                introLinks[this.state.editLinkIndex] = link;\n                            }\n                            const hasUnsavedChanges =\n                                JSON.stringify(this.state.deactivated) !== JSON.stringify(this.deactivatedOriginal) ||\n                                JSON.stringify(introLinks) !== this.introLinksOriginal;\n\n                            this.setState({\n                                introLinks,\n                                editLink: false,\n                                hasUnsavedChanges,\n                                link: null,\n                            });\n                        } else {\n                            this.setState({ editLink: false });\n                        }\n                    }}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    getButtons(): JSX.Element[] {\n        const buttons = [];\n\n        if (this.state.edit) {\n            buttons.push(\n                <Fab\n                    key=\"add\"\n                    color=\"primary\"\n                    size=\"small\"\n                    sx={UtilsCommon.getStyle(this.props.theme, styles.button, styles.addButton)}\n                    onClick={() =>\n                        this.setState({\n                            editLink: true,\n                            editLinkIndex: -1,\n                            link: {} as ItemCamera | ItemLink,\n                        })\n                    }\n                >\n                    <AddIcon />\n                </Fab>,\n            );\n\n            buttons.push(\n                <Fab\n                    key=\"save\"\n                    size=\"small\"\n                    color=\"primary\"\n                    disabled={!this.state.hasUnsavedChanges}\n                    sx={UtilsCommon.getStyle(this.props.theme, styles.button, styles.saveButton)}\n                    onClick={() => this.saveCards()}\n                >\n                    <CheckIcon />\n                </Fab>,\n            );\n\n            buttons.push(\n                <Fab\n                    key=\"close\"\n                    size=\"small\"\n                    color=\"primary\"\n                    sx={UtilsCommon.getStyle(this.props.theme, styles.button, styles.closeButton)}\n                    onClick={() => this.deactivateEditMode()}\n                >\n                    <CloseIcon />\n                </Fab>,\n            );\n        } else {\n            buttons.push(\n                <Fab\n                    color=\"primary\"\n                    size=\"small\"\n                    key=\"edit\"\n                    style={styles.button}\n                    onClick={() => this.activateEditMode()}\n                >\n                    <CreateIcon />\n                </Fab>,\n            );\n        }\n\n        return buttons;\n    }\n\n    async saveCards(): Promise<void> {\n        const systemConfig = await this.props.socket.getSystemConfig(true);\n        let changed = false;\n        if (JSON.stringify(systemConfig.common.intro) !== JSON.stringify(this.state.deactivated)) {\n            systemConfig.common.intro = this.state.deactivated;\n            changed = true;\n        }\n        if (!changed && JSON.stringify(systemConfig.native.introLinks) !== JSON.stringify(this.state.introLinks)) {\n            changed = true;\n            systemConfig.native.introLinks = this.state.introLinks;\n        }\n        if (changed) {\n            void this.props.socket\n                .setSystemConfig(systemConfig)\n                .then(() => this.props.showAlert('Updated', 'success'))\n                .catch((error: any) => {\n                    console.log(error);\n                    this.props.showAlert(error, 'error');\n                })\n                .then(() => this.setState({ edit: false }));\n        } else {\n            this.setState({ edit: false });\n        }\n    }\n\n    async getHostData(hostId: string, isAlive?: boolean): Promise<{ id: string; data: HostData }> {\n        let alive;\n        if (isAlive !== undefined) {\n            alive = { val: isAlive };\n        } else {\n            try {\n                alive = await this.props.socket.getState(`${hostId}.alive`);\n            } catch (e) {\n                console.error(`Cannot get state ${hostId}.alive: ${e}`);\n                alive = { val: false };\n            }\n        }\n\n        let data: HostData = { alive: false };\n        if (alive?.val) {\n            try {\n                data = await this.props.socket.getHostInfo(hostId, false, 10000);\n                if (data && typeof data === 'object' && data.alive !== false) {\n                    data.alive = true;\n                }\n            } catch (e) {\n                console.error(`Cannot get host info for ${hostId}: ${e}`);\n                data = { alive: false };\n            }\n        } else {\n            data = { alive: false };\n        }\n\n        const states = await this.props.socket.getForeignStates(`${hostId}.versions.*`);\n\n        Object.keys(states).forEach(id => (data[`_${id.split('.').pop()}`] = states[id].val));\n\n        return { id: hostId, data };\n    }\n\n    async getHostsData(\n        hosts: CompactHost[],\n    ): Promise<{ hostsData: Record<string, HostData>; alive: Record<string, boolean> }> {\n        const promises = hosts.map(obj => this.getHostData(obj._id));\n\n        const results = await Promise.all(promises);\n        const hostsData: Record<string, HostData> = {};\n        const alive: Record<string, boolean> = {};\n        results.forEach(res => {\n            hostsData[res.id] = Intro.preprocessHostData(res.data);\n            alive[res.id] = res.data.alive;\n        });\n        return { hostsData, alive };\n    }\n\n    static applyReverseProxy(\n        webReverseProxyPath: ReverseProxyItem,\n        instances: Record<string, ioBroker.InstanceObject>,\n        instance: IntroInstanceItem,\n    ): void {\n        webReverseProxyPath?.paths.forEach(item => {\n            if (item.instance === instance.id) {\n                instance.link = item.path;\n            } else if (item.instance.startsWith('web.')) {\n                // if this is a web instance, check if it is the same as the current instance\n                const _obj = instances[`system.adapter.${item.instance}`];\n                if (_obj?.native?.port && instance.link.includes(`:${_obj.native.port}`)) {\n                    // replace\n                    const regExp = new RegExp(`^.*:${_obj.native.port}/`);\n                    if (instance.link) {\n                        instance.link = instance.link.replace(regExp, item.path);\n                    }\n                    console.log(instance.link);\n                }\n            }\n        });\n    }\n\n    addLinks(\n        linkItem: LinkItem,\n        common: ioBroker.InstanceCommon,\n        instanceId: number,\n        instances: Record<string, ioBroker.InstanceObject>,\n        hosts: Record<string, ioBroker.HostObject>,\n        introInstances: IntroInstanceItem[],\n    ): void {\n        const instance: IntroInstanceItem = {\n            id: linkItem.id,\n            name: linkItem.name,\n            description: linkItem.description,\n            color: linkItem.color,\n            image: linkItem.icon,\n            info: '',\n        };\n\n        const _urls: {\n            url: string;\n            port: number;\n            instance?: string;\n        }[] = replaceLink(linkItem.link, common.name, instanceId, {\n            instances,\n            hostname: this.props.hostname,\n            adminInstance: this.props.adminInstance,\n            hosts,\n        });\n\n        let webReverseProxyPath: ReverseProxyItem | null = null;\n        if (this.state.reverseProxy?.length) {\n            webReverseProxyPath = this.state.reverseProxy.find(item => item.globalPath === this.currentProxyPath);\n        }\n        if (_urls.length === 1) {\n            instance.link = _urls[0].url;\n            instance.port = _urls[0].port;\n\n            Intro.applyReverseProxy(webReverseProxyPath, instances, instance);\n\n            // if a link already exists => ignore\n            const lll = introInstances.find(item => item.link === instance.link);\n            if (!lll) {\n                introInstances.push(instance);\n            } else {\n                console.log(`Double links: \"${instance.id}\" and \"${lll.id}\"`);\n            }\n        } else if (_urls.length > 1) {\n            _urls.forEach(url => {\n                const lll = introInstances.find(item => item.link === url.url);\n\n                if (!lll) {\n                    const item = { ...instance, link: url.url, port: url.port };\n                    Intro.applyReverseProxy(webReverseProxyPath, instances, item);\n                    introInstances.push(item);\n                } else {\n                    console.log(`Double links: \"${instance.id}\" and \"${lll.id}\"`);\n                }\n            });\n        }\n    }\n\n    static getText(text: ioBroker.StringOrTranslated, lang: ioBroker.Languages): string {\n        if (!text) {\n            return '';\n        }\n        if (typeof text === 'object') {\n            return text[lang] || text.en || '';\n        }\n        return text || '';\n    }\n\n    static normalizeLinks(\n        instance: ioBroker.InstanceObject,\n        language: ioBroker.Languages,\n        filterDuplicates?: boolean,\n    ): LinkItem[] | null {\n        if (\n            !instance.common.localLinks &&\n            !instance.common.localLink &&\n            !instance.common.welcomeScreen &&\n            !instance.common.welcomeScreenPro\n        ) {\n            return null;\n        }\n        const defaultLink: LinkItem = {\n            id: instance._id.replace('system.adapter.', ''),\n            link: '',\n            name: Intro.getText(instance.common.titleLang || instance.common.title || instance.common.name, language),\n            // @ts-expect-error order in common is deprecated, but could happen\n            order: instance.common.order || 1000,\n            intro: true,\n            description: Intro.getText(instance.common.desc, language),\n            icon: instance.common.icon ? `adapter/${instance.common.name}/${instance.common.icon}` : 'img/no-image.png',\n        };\n        let result: LinkItem[] = [];\n        if (instance.common.localLink) {\n            if (typeof instance.common.localLink === 'string') {\n                result.push({\n                    ...defaultLink,\n                    link: instance.common.localLink,\n                });\n            } else {\n                // localLink is an object\n                /*\n                    {\n                        link: string;\n                        color: string;\n                        order: number;\n                        icon: string;\n                    }\n                 */\n                const compatibilityStructure: OldLinkStructure = instance.common.localLink as OldLinkStructure;\n                if (compatibilityStructure.link) {\n                    const item: LinkItem = {\n                        ...defaultLink,\n                        link: compatibilityStructure.link,\n                    };\n                    if (compatibilityStructure.color) {\n                        item.color = compatibilityStructure.color;\n                    }\n                    if (\n                        compatibilityStructure.order !== undefined &&\n                        typeof compatibilityStructure.order === 'number'\n                    ) {\n                        item.order = compatibilityStructure.order;\n                    }\n                    if (compatibilityStructure.icon && compatibilityStructure.img) {\n                        item.icon = compatibilityStructure.icon || compatibilityStructure.img;\n                    }\n\n                    result.push(item);\n                } else {\n                    console.warn(`Unknown localLink structure: ${JSON.stringify(instance.common.localLink)}`);\n                }\n            }\n        }\n\n        if (instance.common.localLinks && typeof instance.common.localLinks === 'object') {\n            Object.keys(instance.common.localLinks).forEach((linkName: string) => {\n                const linkItem: unknown = instance.common.localLinks[linkName];\n                if (typeof linkItem === 'string') {\n                    result.push({\n                        ...defaultLink,\n                        link: linkItem,\n                    });\n                } else {\n                    const compatibilityStructure: OldLinkStructure = linkItem as OldLinkStructure;\n\n                    if (compatibilityStructure.link) {\n                        const item: LinkItem = {\n                            ...defaultLink,\n                            id:\n                                instance._id.replace('system.adapter.', '') +\n                                (linkName === '_default' ? '' : ` ${linkName}`),\n                            link: compatibilityStructure.link,\n                            name: defaultLink.name + (linkName === '_default' ? '' : ` ${linkName}`),\n                        };\n                        if (compatibilityStructure.color) {\n                            item.color = compatibilityStructure.color;\n                        }\n                        if (compatibilityStructure.order !== undefined) {\n                            item.order = parseInt(compatibilityStructure.order as string, 10) || 1000;\n                        }\n                        if (compatibilityStructure.icon && compatibilityStructure.img) {\n                            item.icon = compatibilityStructure.icon || compatibilityStructure.img;\n                        }\n                        if (compatibilityStructure.description) {\n                            item.description = Intro.getText(compatibilityStructure.description, language);\n                        }\n                        if (compatibilityStructure.pro !== undefined) {\n                            if (typeof compatibilityStructure.pro === 'string') {\n                                item.pro = compatibilityStructure.pro;\n                            } else {\n                                item.pro = `${instance.common.name}/index.html`;\n                            }\n                        }\n                        if (compatibilityStructure.cloud !== undefined) {\n                            item.cloud = compatibilityStructure.cloud;\n                        }\n                        if (compatibilityStructure.intro !== undefined) {\n                            item.intro = compatibilityStructure.intro === true;\n                        }\n\n                        if (compatibilityStructure.name) {\n                            item.name = Intro.getText(compatibilityStructure.name, language);\n                        }\n                        if (linkName === '_default') {\n                            item.default = true;\n                        }\n\n                        result.push(item);\n                    } else {\n                        console.warn(`Unknown localLinks structure: ${JSON.stringify(linkItem)}`);\n                    }\n                }\n            });\n        }\n\n        if (instance.common.welcomeScreen && typeof instance.common.welcomeScreen === 'object') {\n            const compatibilityStructureArr: OldLinkStructure[] = Array.isArray(instance.common.welcomeScreen)\n                ? (instance.common.welcomeScreen as OldLinkStructure[])\n                : [instance.common.welcomeScreen as OldLinkStructure];\n\n            compatibilityStructureArr.forEach(compatibilityStructure => {\n                if (compatibilityStructure.link) {\n                    const item: LinkItem = {\n                        ...defaultLink,\n                        id: `${instance._id.replace('system.adapter.', '')} cloud`,\n                        link: `%web_protocol%://%web_bind%:%web_port%/${compatibilityStructure.link}`,\n                        cloud: compatibilityStructure.link,\n                    };\n                    if (compatibilityStructure.color) {\n                        item.color = compatibilityStructure.color;\n                    }\n                    if (\n                        compatibilityStructure.order !== undefined &&\n                        typeof compatibilityStructure.order === 'number'\n                    ) {\n                        item.order = compatibilityStructure.order;\n                    }\n                    if (compatibilityStructure.icon && compatibilityStructure.img) {\n                        item.icon = compatibilityStructure.icon || compatibilityStructure.img;\n                    }\n\n                    if (compatibilityStructure.localLinks) {\n                        const link: unknown = instance.common.localLinks[compatibilityStructure.localLinks];\n                        if (link && typeof link === 'string') {\n                            item.link = link;\n                        } else if (link && typeof link === 'object' && (link as any).link) {\n                            item.link = (link as any).link;\n                        }\n                    }\n\n                    if (compatibilityStructure.name) {\n                        item.name = Intro.getText(compatibilityStructure.name, language);\n                    }\n\n                    result.push(item);\n                }\n            });\n\n            if (instance.common.welcomeScreenPro && typeof instance.common.welcomeScreenPro === 'object') {\n                const _compatibilityStructureArr: OldLinkStructure[] = Array.isArray(instance.common.welcomeScreenPro)\n                    ? (instance.common.welcomeScreenPro as OldLinkStructure[])\n                    : [instance.common.welcomeScreenPro as OldLinkStructure];\n\n                _compatibilityStructureArr.forEach(compatibilityStructure => {\n                    if (compatibilityStructure.link) {\n                        const item: LinkItem = {\n                            ...defaultLink,\n                            id: `${instance._id.replace('system.adapter.', '')} pro`,\n                            link: `%web_protocol%://%web_bind%:%web_port%/${compatibilityStructure.link}`,\n                            pro: compatibilityStructure.link,\n                        };\n                        if (compatibilityStructure.color) {\n                            item.color = compatibilityStructure.color;\n                        }\n                        if (\n                            compatibilityStructure.order !== undefined &&\n                            typeof compatibilityStructure.order === 'number'\n                        ) {\n                            item.order = compatibilityStructure.order;\n                        }\n                        if (compatibilityStructure.icon && compatibilityStructure.img) {\n                            item.icon = compatibilityStructure.icon || compatibilityStructure.img;\n                        }\n\n                        if (compatibilityStructure.localLinks) {\n                            const link: unknown = instance.common.localLinks[compatibilityStructure.localLinks];\n                            if (link && typeof link === 'string') {\n                                item.link = link;\n                            } else if (link && typeof link === 'object' && (link as any).link) {\n                                item.link = (link as any).link;\n                            }\n                        }\n\n                        if (compatibilityStructure.name) {\n                            item.name = Intro.getText(compatibilityStructure.name, language);\n                        }\n\n                        result.push(item);\n                    }\n                });\n            }\n        }\n\n        result.forEach(item => {\n            if (\n                !item.icon.startsWith('adapter/') &&\n                !item.icon.startsWith('data:image/') &&\n                !item.icon.startsWith('http://') &&\n                !item.icon.startsWith('https://') &&\n                item.icon !== 'img/no-image.png'\n            ) {\n                // normalize icon\n                item.icon = `adapter/${instance.common.name}/${item.icon}`;\n            }\n        });\n\n        if (filterDuplicates) {\n            // filter all links with the same \"link\"\n            const links: Record<string, LinkItem> = {};\n            result.forEach(item => {\n                if (!links[item.link]) {\n                    links[item.link] = item;\n                } else {\n                    // merge\n                    if (item.color) {\n                        links[item.link].color = item.color;\n                    }\n                    if (item.icon) {\n                        links[item.link].icon = item.icon;\n                    }\n                    if (item.cloud) {\n                        links[item.link].cloud = item.cloud;\n                    }\n                    if (item.pro) {\n                        links[item.link].pro = item.pro;\n                    }\n                    if (item.intro !== undefined) {\n                        links[item.link].intro = item.intro;\n                    }\n                    if (item.name && typeof item.name === 'object') {\n                        links[item.link].name = item.name;\n                    }\n                    if (item.order !== undefined) {\n                        links[item.link].order = item.order;\n                    }\n                    if (item.default) {\n                        links[item.link].default = item.default;\n                    }\n                }\n            });\n            result = Object.values(links);\n        }\n\n        result.sort((a: LinkItem, b: LinkItem) => {\n            if (a.default === undefined && b.default === undefined) {\n                if (a.order === undefined && b.order === undefined) {\n                    return 0;\n                }\n                if (a.order === undefined) {\n                    return -1;\n                }\n                if (b.order === undefined) {\n                    return 1;\n                }\n                return a.order - b.order;\n            }\n            if (a.default === undefined) {\n                return -1;\n            }\n            if (b.default === undefined) {\n                return 1;\n            }\n\n            if (a.order === undefined && b.order === undefined) {\n                return 0;\n            }\n            if (a.order === undefined) {\n                return -1;\n            }\n            if (b.order === undefined) {\n                return 1;\n            }\n            return a.order - b.order;\n        });\n\n        return result;\n    }\n\n    async getInstances(\n        update: boolean | undefined,\n        hosts: CompactHost[] | null,\n        systemConfig: ioBroker.SystemConfigObject,\n    ): Promise<{ instances: IntroInstanceItem[]; deactivated: string[] }> {\n        hosts = hosts || this.state.hosts;\n\n        const oHosts: Record<string, ioBroker.HostObject> = {};\n        hosts.forEach(obj => (oHosts[obj._id] = obj as ioBroker.HostObject));\n\n        try {\n            const objects = await this.props.socket.getAdapterInstances('', update);\n            let deactivated: string[] = systemConfig.common.intro || [];\n            if (!Array.isArray(deactivated)) {\n                deactivated = Object.keys(deactivated);\n                deactivated.sort();\n            }\n            const introInstances: IntroInstanceItem[] = [];\n            const instances: Record<string, ioBroker.InstanceObject> = {};\n            // Array to the mapped object\n            objects.forEach(obj => (instances[obj._id] = obj));\n\n            objects.forEach(obj => {\n                if (!obj) {\n                    return;\n                }\n                const common = obj.common || null;\n                const objId = obj._id.split('.');\n                const instanceId: number = parseInt(objId.pop(), 10);\n                let name: string;\n                if (common?.name && typeof common.name === 'object') {\n                    const commonName: ioBroker.Translated = common?.name;\n                    name = commonName[this.props.lang] || commonName.en;\n                } else {\n                    name = common?.name || '';\n                }\n\n                if (name === 'admin' && common.localLink === (this.props.hostname || '')) {\n                    return;\n                }\n                if (name === 'web') {\n                    return;\n                }\n\n                if (name && name !== 'vis-web-admin' && name.match(/^vis-/) && name !== 'vis-2') {\n                    return;\n                }\n                if (name?.match(/^icons-/)) {\n                    return;\n                }\n                if (common && (common.enabled || common.onlyWWW)) {\n                    const links = Intro.normalizeLinks(obj, this.props.lang, true);\n\n                    if (links) {\n                        links.forEach(link =>\n                            this.addLinks(link, common, instanceId, instances, oHosts, introInstances),\n                        );\n                    }\n                }\n            });\n\n            introInstances.forEach(instance => {\n                if (instance.link) {\n                    instance.linkName = instance.link\n                        .replace('https://', '')\n                        .replace('http://', '')\n                        .replace(/^[^_]+:/, '');\n                }\n            });\n\n            introInstances.sort((a, b) => {\n                if (a.order !== undefined || b.order !== undefined) {\n                    a.order = a.order === undefined ? 1000 : a.order;\n                    b.order = b.order === undefined ? 1000 : b.order;\n                    if (a.order < b.order) {\n                        return -1;\n                    }\n                    if (a.order > b.order) {\n                        return 1;\n                    }\n                }\n\n                if (a.id > b.id) {\n                    return 1;\n                }\n                if (a.id < b.id) {\n                    return -1;\n                }\n                return 0;\n            });\n\n            hosts?.forEach(obj => {\n                const common = obj?.common;\n                let name: ioBroker.StringOrTranslated = common?.name;\n                if (typeof name === 'object') {\n                    if (name) {\n                        name = (name as ioBroker.Translated)[this.props.lang] || (name as ioBroker.Translated).en;\n                    }\n                }\n\n                if (common) {\n                    const instance: IntroInstanceItem = {\n                        id: obj._id,\n                        name: name || '',\n                        color: '',\n                        image: common.icon || 'img/no-image.png',\n                        info: this.t('Info'),\n                        linkName: '',\n                    };\n\n                    introInstances.push(instance);\n                }\n            });\n\n            const _deactivated: string[] = [];\n            deactivated.forEach(id => {\n                if (introInstances.find(instance => id === `${instance.id}_${instance.linkName}`)) {\n                    _deactivated.push(id);\n                }\n            });\n            deactivated = _deactivated;\n\n            return {\n                instances: introInstances,\n                deactivated,\n            };\n        } catch (error) {\n            console.log(error);\n            return { instances: [], deactivated: [] };\n        }\n    }\n\n    getHostDescription(id: string): JSX.Element {\n        const hostData = this.state.hostsData ? this.state.hostsData[id] : null;\n\n        if (hostData && hostData.alive === false) {\n            return <div style={styles.hostOffline}>{this.props.t('Offline')}</div>;\n        }\n\n        let nodeUpdate: string | JSX.Element = '';\n        let npmUpdate: string | JSX.Element = '';\n        if (hostData) {\n            try {\n                if (\n                    hostData._nodeNewest &&\n                    hostData['Node.js'] &&\n                    semver.gt(hostData._nodeNewest, hostData['Node.js'].replace(/^v/, ''))\n                ) {\n                    nodeUpdate = hostData._nodeNewest;\n                }\n            } catch {\n                // ignore\n            }\n            try {\n                if (\n                    hostData._nodeNewest !== hostData._nodeNewestNext &&\n                    hostData._nodeNewestNext &&\n                    hostData['Node.js'] &&\n                    hostData._nodeNewest &&\n                    semver.gt(hostData._nodeNewestNext, hostData['Node.js'].replace(/^v/, '')) &&\n                    semver.gt(hostData._nodeNewestNext, hostData._nodeNewest)\n                ) {\n                    nodeUpdate += (nodeUpdate ? ' / ' : '') + hostData._nodeNewestNext;\n                }\n            } catch {\n                // ignore\n            }\n\n            if (nodeUpdate) {\n                const updateSupported = this.state.nodeUpdateSupported && hostData.Platform === 'linux';\n\n                nodeUpdate = (\n                    <Tooltip\n                        title={this.props.t('Some updates available')}\n                        slotProps={{ popper: { sx: styles.tooltip } }}\n                    >\n                        <span style={{ ...styles.nodeUpdate, display: 'inline-flex' }}>\n                            ({nodeUpdate})\n                            {updateSupported ? (\n                                <RefreshIcon\n                                    style={styles.updateIcon}\n                                    onClick={() =>\n                                        this.setState({\n                                            nodeUpdateDialog: { hostId: id, version: hostData._nodeNewestNext },\n                                        })\n                                    }\n                                />\n                            ) : null}\n                        </span>\n                    </Tooltip>\n                );\n            }\n\n            try {\n                if (hostData._npmNewest && hostData.NPM && semver.gt(hostData._npmNewest, hostData.NPM)) {\n                    npmUpdate = hostData._npmNewest;\n                }\n            } catch {\n                // ignore\n            }\n            try {\n                if (\n                    hostData._npmNewest !== hostData._npmNewestNext &&\n                    hostData._npmNewestNext &&\n                    hostData.NPM &&\n                    hostData._npmNewest &&\n                    semver.gt(hostData._npmNewestNext, hostData.NPM) &&\n                    semver.gt(hostData._npmNewestNext, hostData._npmNewest)\n                ) {\n                    npmUpdate += (npmUpdate ? ' / ' : '') + hostData._npmNewestNext;\n                }\n            } catch {\n                // ignore\n            }\n            if (npmUpdate) {\n                npmUpdate = (\n                    <Tooltip\n                        title={this.props.t('Some updates available')}\n                        slotProps={{ popper: { sx: styles.tooltip } }}\n                    >\n                        <span style={styles.nodeUpdate}>({npmUpdate})</span>\n                    </Tooltip>\n                );\n            }\n        }\n\n        return hostData && typeof hostData === 'object' ? (\n            <ul style={{ textTransform: 'none' }}>\n                <li>\n                    <span>\n                        <span style={styles.bold}>{this.t('Platform')}: </span>\n                        {hostData.Platform || '--'}\n                    </span>\n                </li>\n                <li>\n                    <span>\n                        <span style={styles.bold}>{this.t('RAM')}: </span>\n                        {formatInfo.RAM(hostData.RAM)}\n                    </span>\n                </li>\n                <li>\n                    <span>\n                        <span style={styles.bold}>{this.t('Node.js')}: </span>\n                        <span style={nodeUpdate ? styles.updateExists : styles.updateNo}>\n                            {hostData['Node.js'] || '--'}\n                        </span>\n                        {nodeUpdate}\n                    </span>\n                </li>\n                <li>\n                    <span>\n                        <span style={styles.bold}>{this.t('NPM')}: </span>\n                        <span className={npmUpdate ? styles.updateExists : styles.updateNo}>\n                            {hostData.NPM || '--'}\n                        </span>\n                        {npmUpdate}\n                    </span>\n                </li>\n            </ul>\n        ) : (\n            <ul>\n                <Skeleton />\n                <Skeleton />\n                <Skeleton />\n                <Skeleton />\n            </ul>\n        );\n    }\n\n    getHostDescriptionAll(id: string): { el: JSX.Element; text: string } {\n        const hostData = this.state.hostsData ? this.state.hostsData[id] : null;\n\n        return {\n            el: (\n                <ul style={{ textTransform: 'none' }}>\n                    {hostData &&\n                        typeof hostData === 'object' &&\n                        Object.keys(hostData)\n                            .filter(\n                                _id => !_id.startsWith('_') && hostData[_id] !== null && hostData[_id] !== undefined,\n                            )\n                            .map(value => (\n                                <li key={value}>\n                                    {hostData && typeof hostData === 'object' ? (\n                                        <span>\n                                            <span style={styles.bold}>{this.t(value)}: </span>\n                                            {formatInfo[value]\n                                                ? formatInfo[value](hostData[value] as number, this.t)\n                                                : (typeof hostData[value] === 'object'\n                                                      ? JSON.stringify(hostData[value])\n                                                      : (hostData[value] as any).toString()) || '--'}\n                                        </span>\n                                    ) : (\n                                        <Skeleton />\n                                    )}\n                                </li>\n                            ))}\n                </ul>\n            ),\n\n            text:\n                hostData && typeof hostData === 'object'\n                    ? Object.keys(hostData).reduce(\n                          (acom: string, item: string) =>\n                              `${acom}${this.t(item)}:${formatInfo[item] ? formatInfo[item](hostData[item] as number, this.t) : (typeof hostData[item] === 'object' ? JSON.stringify(hostData[item]) : hostData[item] as string) || '--'}\\n`,\n                      )\n                    : '',\n        };\n    }\n\n    getDataDelayed = (_events?: InstanceEvent[]): void => {\n        if (this.getDataTimeout) {\n            clearTimeout(this.getDataTimeout);\n        }\n        this.getDataTimeout = setTimeout(() => {\n            this.getDataTimeout = undefined;\n            void this.getData(true).catch(e => console.error(`Cannot get data: ${e}`));\n        }, 300);\n    };\n\n    async getData(update?: boolean): Promise<void> {\n        try {\n            const systemConfig: ioBroker.SystemConfigObject = await this.props.socket.getSystemConfig(update);\n            const hosts: CompactHost[] = await this.props.socket.getCompactHosts(update);\n            const data: { instances: IntroInstanceItem[]; deactivated: string[] } = await this.getInstances(\n                update,\n                hosts,\n                systemConfig,\n            );\n            this.setState({\n                instances: data.instances,\n                hosts,\n                deactivated: data.deactivated,\n                introLinks:\n                    systemConfig && systemConfig.native && systemConfig.native.introLinks\n                        ? systemConfig.native.introLinks\n                        : [],\n            });\n            // hosts data could last a long time, so show some results to user now and then get the info about hosts\n            const newState: Partial<IntroState> = await this.getHostsData(hosts);\n            await new Promise<void>(resolve => {\n                this.setState(newState as IntroState, () => resolve());\n            });\n        } catch (error: any) {\n            window.alert(`Cannot get data: ${error}`);\n        }\n    }\n\n    /**\n     * Render toast if content has been copied\n     */\n    renderCopiedToast(): JSX.Element {\n        return (\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={this.state.openSnackBar}\n                autoHideDuration={3_000}\n                onClose={() => this.setState({ openSnackBar: false })}\n                message={this.t('copied')}\n            />\n        );\n    }\n\n    render(): JSX.Element {\n        if (!this.state.instances) {\n            return <LinearProgress />;\n        }\n\n        return (\n            <TabContainer\n                elevation={0}\n                overflow=\"visible\"\n            >\n                {this.renderCopiedToast()}\n                {this.state.nodeUpdateDialog ? (\n                    <NodeUpdateDialog\n                        onClose={() => this.setState({ nodeUpdateDialog: null })}\n                        socket={this.props.socket}\n                        {...this.state.nodeUpdateDialog}\n                    />\n                ) : null}\n                <TabContent style={styles.container}>\n                    {/* This fragment is required here\n                to split directives of Grid2 in TabContent and Grid2 directives in Intro */}\n                    <>\n                        <Grid2\n                            container\n                            spacing={2}\n                        >\n                            {this.getInstancesCards()}\n                            {this.getLinkCards()}\n                        </Grid2>\n                    </>\n                    {this.getButtons()}\n                    {this.editLinkCard()}\n                </TabContent>\n            </TabContainer>\n        );\n    }\n\n    /**\n     * Preprocess host data to harmonize information\n     *\n     * @param hostData Host data from controller\n     */\n    static preprocessHostData(hostData: HostData): HostData {\n        if (hostData.dockerInformation?.isDocker) {\n            let dockerString = hostData.dockerInformation.isOfficial ? 'official image' : 'unofficial image';\n\n            if (hostData.dockerInformation.isOfficial) {\n                dockerString += ` - ${hostData.dockerInformation.officialVersion}`;\n            }\n\n            hostData.Platform = `${hostData.Platform} (${dockerString})`;\n        }\n\n        delete hostData.dockerInformation;\n        return hostData;\n    }\n}\n\nexport default Intro;\n","function _classPrivateFieldBase(e, t) {\n  if (!{}.hasOwnProperty.call(e, t)) throw new TypeError(\"attempted to use private field on non-instance\");\n  return e;\n}\nexport { _classPrivateFieldBase as default };","var id = 0;\nfunction _classPrivateFieldKey(e) {\n  return \"__private_\" + id++ + \"_\" + e;\n}\nexport { _classPrivateFieldKey as default };"],"names":["boxShadow","boxShadowHover","styles","root","theme","padding","breakpoints","up","flex","card","display","minHeight","position","overflow","maxHeight","overflowY","cardInfo","flexDirection","cardInfoHead","top","background","palette","default","width","justifyContent","borderBottom","edit","opacity","userSelect","pointerEvents","media","backgroundColor","mode","maxWidth","img","height","contentContainer","content","flexGrow","action","expand","right","bottom","collapse","close","save","enabled","color","blue","disabled","grey","editButton","deleteButton","red","contentGrid","colorOrange","tooltip","IntroCard","Component","constructor","props","super","this","state","expanded","getDerivedStateFromProps","handleExpandClick","setState","renderContent","children","openDialog","renderDialogs","render","_this$props$action","_this$props$action2","editClass","undefined","buttonTitle","text","t","lang","en","_jsx","Grid2","size","xs","sm","md","lg","sx","Utils","getStyle","style","Link","href","link","underline","target","rel","_jsxs","Card","onClick","e","stopPropagation","showInfo","offline","Button","variant","Box","component","CardMedia","image","paddingBottom","paddingLeft","warning","Tooltip","title","slotProps","popper","WarningIcon","alignSelf","fontSize","CardContent","container","direction","wrap","Typography","gutterBottom","Divider","CardActions","AdminUtils","getText","Collapse","in","timeout","unmountOnExit","IconButton","getHostDescriptionAll","copyToClipboard","openSnackBarFunc","SaveIcon","CloseIcon","el","toggleActivation","CheckIcon","onEdit","EditIcon","onRemove","DeleteIcon","rootGrid","closeButton","paper","typography","paddingRight","objectFit","CameraIntroLinkDialog","cameraUpdateTimer","cameraRef","createRef","componentDidMount","camera","setInterval","updateCamera","Math","max","parseInt","interval","componentWillUnmount","clearInterval","current","url","cameraUrl","addTs","includes","Date","now","src","parts","split","adapter","shift","instance","socket","sendTo","name","pop","then","result","data","Dialog","onClose","open","fullWidth","fullScreen","DialogTitle","DialogContent","dividers","alt","ref","DialogActions","autoFocus","startIcon","cameraImg","imgContainer","hidden","imgSkeleton","transform","Object","assign","error","dialog","loaded","catch","window","alert","CameraIntroDialog","handleImageLoad","handleImageError","alignItems","onLoad","onError","Skeleton","animation","ErrorIcon","startsWith","formControl","marginTop","editItem","editItemSlider","labelSlider","editColor","dropZone","dropZoneEmpty","objectFir","uploadDiv","uploadDivDragging","uploadCenterDiv","margin","border","borderRadius","uploadCenterIcon","paddingTop","uploadCenterText","uploadCenterTextAndIcon","textAlign","left","EditIntroLinkDialog","linkName","desc","cameraList","getCamerasInstances","getAdapterInstances","list","promises","forEach","obj","_id","replace","common","push","getState","val","cam","id","Promise","all","getLinkNameFromLink","m","trim","match","isNew","FormControl","InputLabel","Select","labelId","value","onChange","MenuItem","map","TextField","label","oldLinkName","input","endAdornment","InputAdornment","FormControlLabel","control","Checkbox","checked","Slider","getAriaValueText","step","min","valueLabelDisplay","type","UploadImage","crop","maxSize","icon","removeIconFunc","base64","marginLeft","IntroCardCamera","AddIcon","NodeUpdateDialog","React","inProgress","success","finished","I18n","CircularProgress","RefreshIcon","updateNodeJsVersion","res","upgradeOsPackages","hostId","button","saveButton","main","dark","addButton","secondary","bold","fontWeight","hostOffline","updateExists","marginRight","updateNo","nodeUpdate","instanceNumber","updateIcon","cursor","formatInfo","Uptime","formatSeconds","RAM","formatRam","Speed","formatSpeed","formatBytes","_THRESHOLD_TIME_DIFF_MS","_classPrivateFieldLooseKey","_ONE_MINUTE_MS","Intro","defineProperty","writable","currentProxyPath","location","pathname","introLinksOriginal","deactivatedOriginal","getDataTimeout","updateHostsAlive","async","alive","JSON","parse","stringify","hostsId","events","find","event","getDataDelayed","length","hostsData","getHostData","preprocessHostData","checkBackendTime","updateHosts","results","_events","clearTimeout","setTimeout","getData","console","instances","deactivated","introLinks","editLink","editLinkIndex","openSnackBar","hasUnsavedChanges","reverseProxy","hosts","hostTimeDiffMap","Map","nodeUpdateSupported","nodeUpdateDialog","timeDiffMap","hostData","entries","currDate","diff","abs","time","getTime","set","_obj$native","instancesWorker","registerHandler","hostsWorker","registerAliveHandler","checkFeatureSupported","getObject","adminInstance","native","unregisterHandler","unregisterAliveHandler","activateEditMode","_systemConfig$native","systemConfig","getSystemConfig","getInstances","deactivateEditMode","toggleCard","pos","indexOf","splice","sort","getInstancesCards","_this$state$instances","_this$state$deactivat","_this$state$hostTimeD","linkText","isShowInstance","isFinite","_this$state$instances2","inst","timeDiff","get","_Fragment","info","_classPrivateFieldLooseBase","round","toString","description","getHostDescription","toggleLinkCard","i","getLinkCards","_this$state$introLink","item","_this$state$introLink2","_this$state$introLink3","editLinkCard","getButtons","buttons","Fab","UtilsCommon","saveCards","CreateIcon","changed","intro","setSystemConfig","showAlert","log","isAlive","_alive","getHostInfo","states","getForeignStates","keys","getHostsData","applyReverseProxy","webReverseProxyPath","paths","path","_obj$native2","_obj","port","regExp","RegExp","addLinks","linkItem","instanceId","introInstances","_this$state$reversePr","_urls","replaceLink","hostname","globalPath","lll","normalizeLinks","language","filterDuplicates","localLinks","localLink","welcomeScreen","welcomeScreenPro","defaultLink","titleLang","order","compatibilityStructure","warn","pro","cloud","Array","isArray","links","values","a","b","update","oHosts","_hosts","objects","_name","objId","commonName","onlyWWW","_deactivated","npmUpdate","_nodeNewest","semver","_nodeNewestNext","updateSupported","Platform","version","_npmNewest","NPM","_npmNewestNext","textTransform","className","filter","reduce","acom","getCompactHosts","newState","resolve","renderCopiedToast","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","TabContainer","elevation","TabContent","spacing","LinearProgress","_hostData$dockerInfor","dockerInformation","isDocker","dockerString","isOfficial","officialVersion","_classPrivateFieldBase","hasOwnProperty","call","TypeError","_classPrivateFieldKey"],"sourceRoot":""}